// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: convnet_config.proto

#ifndef PROTOBUF_convnet_5fconfig_2eproto__INCLUDED
#define PROTOBUF_convnet_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace config {
class DataStreamConfig;
class DataStreamConfigDefaultTypeInternal;
extern DataStreamConfigDefaultTypeInternal _DataStreamConfig_default_instance_;
class DatasetConfig;
class DatasetConfigDefaultTypeInternal;
extern DatasetConfigDefaultTypeInternal _DatasetConfig_default_instance_;
class Edge;
class EdgeDefaultTypeInternal;
extern EdgeDefaultTypeInternal _Edge_default_instance_;
class FeatureExtractorConfig;
class FeatureExtractorConfigDefaultTypeInternal;
extern FeatureExtractorConfigDefaultTypeInternal _FeatureExtractorConfig_default_instance_;
class FeatureStreamConfig;
class FeatureStreamConfigDefaultTypeInternal;
extern FeatureStreamConfigDefaultTypeInternal _FeatureStreamConfig_default_instance_;
class Layer;
class LayerDefaultTypeInternal;
extern LayerDefaultTypeInternal _Layer_default_instance_;
class Model;
class ModelDefaultTypeInternal;
extern ModelDefaultTypeInternal _Model_default_instance_;
class Optimizer;
class OptimizerDefaultTypeInternal;
extern OptimizerDefaultTypeInternal _Optimizer_default_instance_;
class Subnet;
class SubnetDefaultTypeInternal;
extern SubnetDefaultTypeInternal _Subnet_default_instance_;
class Subnet_MergeLayer;
class Subnet_MergeLayerDefaultTypeInternal;
extern Subnet_MergeLayerDefaultTypeInternal _Subnet_MergeLayer_default_instance_;
}  // namespace config

namespace config {

namespace protobuf_convnet_5fconfig_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_convnet_5fconfig_2eproto

enum Layer_Activation {
  Layer_Activation_LINEAR = 0,
  Layer_Activation_LOGISTIC = 1,
  Layer_Activation_RECTIFIED_LINEAR = 2,
  Layer_Activation_SOFTMAX = 3,
  Layer_Activation_SOFTMAX_DIST = 4,
  Layer_Activation_HINGE_LINEAR = 5,
  Layer_Activation_HINGE_QUADRATIC = 6
};
bool Layer_Activation_IsValid(int value);
const Layer_Activation Layer_Activation_Activation_MIN = Layer_Activation_LINEAR;
const Layer_Activation Layer_Activation_Activation_MAX = Layer_Activation_HINGE_QUADRATIC;
const int Layer_Activation_Activation_ARRAYSIZE = Layer_Activation_Activation_MAX + 1;

const ::google::protobuf::EnumDescriptor* Layer_Activation_descriptor();
inline const ::std::string& Layer_Activation_Name(Layer_Activation value) {
  return ::google::protobuf::internal::NameOfEnum(
    Layer_Activation_descriptor(), value);
}
inline bool Layer_Activation_Parse(
    const ::std::string& name, Layer_Activation* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Layer_Activation>(
    Layer_Activation_descriptor(), name, value);
}
enum Optimizer_OptimizerType {
  Optimizer_OptimizerType_STOCHASTIC_GRADIENT_DESCENT = 0,
  Optimizer_OptimizerType_LBFGS = 1
};
bool Optimizer_OptimizerType_IsValid(int value);
const Optimizer_OptimizerType Optimizer_OptimizerType_OptimizerType_MIN = Optimizer_OptimizerType_STOCHASTIC_GRADIENT_DESCENT;
const Optimizer_OptimizerType Optimizer_OptimizerType_OptimizerType_MAX = Optimizer_OptimizerType_LBFGS;
const int Optimizer_OptimizerType_OptimizerType_ARRAYSIZE = Optimizer_OptimizerType_OptimizerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Optimizer_OptimizerType_descriptor();
inline const ::std::string& Optimizer_OptimizerType_Name(Optimizer_OptimizerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Optimizer_OptimizerType_descriptor(), value);
}
inline bool Optimizer_OptimizerType_Parse(
    const ::std::string& name, Optimizer_OptimizerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Optimizer_OptimizerType>(
    Optimizer_OptimizerType_descriptor(), name, value);
}
enum Optimizer_Decay {
  Optimizer_Decay_NONE = 0,
  Optimizer_Decay_INVERSE_T = 1,
  Optimizer_Decay_EXPONENTIAL = 2,
  Optimizer_Decay_LINEAR = 3
};
bool Optimizer_Decay_IsValid(int value);
const Optimizer_Decay Optimizer_Decay_Decay_MIN = Optimizer_Decay_NONE;
const Optimizer_Decay Optimizer_Decay_Decay_MAX = Optimizer_Decay_LINEAR;
const int Optimizer_Decay_Decay_ARRAYSIZE = Optimizer_Decay_Decay_MAX + 1;

const ::google::protobuf::EnumDescriptor* Optimizer_Decay_descriptor();
inline const ::std::string& Optimizer_Decay_Name(Optimizer_Decay value) {
  return ::google::protobuf::internal::NameOfEnum(
    Optimizer_Decay_descriptor(), value);
}
inline bool Optimizer_Decay_Parse(
    const ::std::string& name, Optimizer_Decay* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Optimizer_Decay>(
    Optimizer_Decay_descriptor(), name, value);
}
enum Edge_EdgeType {
  Edge_EdgeType_FC = 0,
  Edge_EdgeType_CONVOLUTIONAL = 1,
  Edge_EdgeType_LOCAL = 2,
  Edge_EdgeType_MAXPOOL = 3,
  Edge_EdgeType_RESPONSE_NORM = 4,
  Edge_EdgeType_UPSAMPLE = 5,
  Edge_EdgeType_DOWNSAMPLE = 6,
  Edge_EdgeType_RGBTOYUV = 7,
  Edge_EdgeType_AVERAGE_POOL = 8,
  Edge_EdgeType_CONV_ONETOONE = 9
};
bool Edge_EdgeType_IsValid(int value);
const Edge_EdgeType Edge_EdgeType_EdgeType_MIN = Edge_EdgeType_FC;
const Edge_EdgeType Edge_EdgeType_EdgeType_MAX = Edge_EdgeType_CONV_ONETOONE;
const int Edge_EdgeType_EdgeType_ARRAYSIZE = Edge_EdgeType_EdgeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Edge_EdgeType_descriptor();
inline const ::std::string& Edge_EdgeType_Name(Edge_EdgeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Edge_EdgeType_descriptor(), value);
}
inline bool Edge_EdgeType_Parse(
    const ::std::string& name, Edge_EdgeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Edge_EdgeType>(
    Edge_EdgeType_descriptor(), name, value);
}
enum Edge_Initialization {
  Edge_Initialization_DENSE_GAUSSIAN = 0,
  Edge_Initialization_SPARSE_GAUSSIAN = 1,
  Edge_Initialization_CONSTANT = 2,
  Edge_Initialization_DENSE_GAUSSIAN_SQRT_FAN_IN = 3,
  Edge_Initialization_PRETRAINED = 4,
  Edge_Initialization_DENSE_UNIFORM = 5,
  Edge_Initialization_DENSE_UNIFORM_SQRT_FAN_IN = 6
};
bool Edge_Initialization_IsValid(int value);
const Edge_Initialization Edge_Initialization_Initialization_MIN = Edge_Initialization_DENSE_GAUSSIAN;
const Edge_Initialization Edge_Initialization_Initialization_MAX = Edge_Initialization_DENSE_UNIFORM_SQRT_FAN_IN;
const int Edge_Initialization_Initialization_ARRAYSIZE = Edge_Initialization_Initialization_MAX + 1;

const ::google::protobuf::EnumDescriptor* Edge_Initialization_descriptor();
inline const ::std::string& Edge_Initialization_Name(Edge_Initialization value) {
  return ::google::protobuf::internal::NameOfEnum(
    Edge_Initialization_descriptor(), value);
}
inline bool Edge_Initialization_Parse(
    const ::std::string& name, Edge_Initialization* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Edge_Initialization>(
    Edge_Initialization_descriptor(), name, value);
}
enum DataStreamConfig_DataType {
  DataStreamConfig_DataType_DUMMY = 0,
  DataStreamConfig_DataType_HDF5 = 1,
  DataStreamConfig_DataType_IMAGE_RAW = 2,
  DataStreamConfig_DataType_SLIDING_WINDOW = 3,
  DataStreamConfig_DataType_TXT = 4,
  DataStreamConfig_DataType_BOUNDING_BOX = 5,
  DataStreamConfig_DataType_CROPS = 6
};
bool DataStreamConfig_DataType_IsValid(int value);
const DataStreamConfig_DataType DataStreamConfig_DataType_DataType_MIN = DataStreamConfig_DataType_DUMMY;
const DataStreamConfig_DataType DataStreamConfig_DataType_DataType_MAX = DataStreamConfig_DataType_CROPS;
const int DataStreamConfig_DataType_DataType_ARRAYSIZE = DataStreamConfig_DataType_DataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataStreamConfig_DataType_descriptor();
inline const ::std::string& DataStreamConfig_DataType_Name(DataStreamConfig_DataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataStreamConfig_DataType_descriptor(), value);
}
inline bool DataStreamConfig_DataType_Parse(
    const ::std::string& name, DataStreamConfig_DataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataStreamConfig_DataType>(
    DataStreamConfig_DataType_descriptor(), name, value);
}
// ===================================================================

class Layer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:config.Layer) */ {
 public:
  Layer();
  virtual ~Layer();

  Layer(const Layer& from);

  inline Layer& operator=(const Layer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Layer& default_instance();

  static inline const Layer* internal_default_instance() {
    return reinterpret_cast<const Layer*>(
               &_Layer_default_instance_);
  }

  void Swap(Layer* other);

  // implements Message ----------------------------------------------

  inline Layer* New() const PROTOBUF_FINAL { return New(NULL); }

  Layer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Layer& from);
  void MergeFrom(const Layer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Layer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Layer_Activation Activation;
  static const Activation LINEAR =
    Layer_Activation_LINEAR;
  static const Activation LOGISTIC =
    Layer_Activation_LOGISTIC;
  static const Activation RECTIFIED_LINEAR =
    Layer_Activation_RECTIFIED_LINEAR;
  static const Activation SOFTMAX =
    Layer_Activation_SOFTMAX;
  static const Activation SOFTMAX_DIST =
    Layer_Activation_SOFTMAX_DIST;
  static const Activation HINGE_LINEAR =
    Layer_Activation_HINGE_LINEAR;
  static const Activation HINGE_QUADRATIC =
    Layer_Activation_HINGE_QUADRATIC;
  static inline bool Activation_IsValid(int value) {
    return Layer_Activation_IsValid(value);
  }
  static const Activation Activation_MIN =
    Layer_Activation_Activation_MIN;
  static const Activation Activation_MAX =
    Layer_Activation_Activation_MAX;
  static const int Activation_ARRAYSIZE =
    Layer_Activation_Activation_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Activation_descriptor() {
    return Layer_Activation_descriptor();
  }
  static inline const ::std::string& Activation_Name(Activation value) {
    return Layer_Activation_Name(value);
  }
  static inline bool Activation_Parse(const ::std::string& name,
      Activation* value) {
    return Layer_Activation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional int32 num_channels = 2;
  bool has_num_channels() const;
  void clear_num_channels();
  static const int kNumChannelsFieldNumber = 2;
  ::google::protobuf::int32 num_channels() const;
  void set_num_channels(::google::protobuf::int32 value);

  // optional float dropprob = 4 [default = 0];
  bool has_dropprob() const;
  void clear_dropprob();
  static const int kDropprobFieldNumber = 4;
  float dropprob() const;
  void set_dropprob(float value);

  // optional .config.Layer.Activation activation = 6 [default = LINEAR];
  bool has_activation() const;
  void clear_activation();
  static const int kActivationFieldNumber = 6;
  ::config::Layer_Activation activation() const;
  void set_activation(::config::Layer_Activation value);

  // optional bool is_input = 5 [default = false];
  bool has_is_input() const;
  void clear_is_input();
  static const int kIsInputFieldNumber = 5;
  bool is_input() const;
  void set_is_input(bool value);

  // optional bool is_spatial_output = 7 [default = false];
  bool has_is_spatial_output() const;
  void clear_is_spatial_output();
  static const int kIsSpatialOutputFieldNumber = 7;
  bool is_spatial_output() const;
  void set_is_spatial_output(bool value);

  // optional bool is_classifier_output = 8 [default = false];
  bool has_is_classifier_output() const;
  void clear_is_classifier_output();
  static const int kIsClassifierOutputFieldNumber = 8;
  bool is_classifier_output() const;
  void set_is_classifier_output(bool value);

  // optional bool display = 9 [default = false];
  bool has_display() const;
  void clear_display();
  static const int kDisplayFieldNumber = 9;
  bool display() const;
  void set_display(bool value);

  // optional bool is_output = 10 [default = false];
  bool has_is_output() const;
  void clear_is_output();
  static const int kIsOutputFieldNumber = 10;
  bool is_output() const;
  void set_is_output(bool value);

  // optional bool gaussian_dropout = 11 [default = false];
  bool has_gaussian_dropout() const;
  void clear_gaussian_dropout();
  static const int kGaussianDropoutFieldNumber = 11;
  bool gaussian_dropout() const;
  void set_gaussian_dropout(bool value);

  // optional int32 gpu_id = 13 [default = 0];
  bool has_gpu_id() const;
  void clear_gpu_id();
  static const int kGpuIdFieldNumber = 13;
  ::google::protobuf::int32 gpu_id() const;
  void set_gpu_id(::google::protobuf::int32 value);

  // optional float hinge_margin = 14 [default = 0];
  bool has_hinge_margin() const;
  void clear_hinge_margin();
  static const int kHingeMarginFieldNumber = 14;
  float hinge_margin() const;
  void set_hinge_margin(float value);

  // optional int32 size = 3 [default = -1];
  bool has_size() const;
  void clear_size();
  static const int kSizeFieldNumber = 3;
  ::google::protobuf::int32 size() const;
  void set_size(::google::protobuf::int32 value);

  // optional float max_act_gaussian_dropout = 12 [default = -1];
  bool has_max_act_gaussian_dropout() const;
  void clear_max_act_gaussian_dropout();
  static const int kMaxActGaussianDropoutFieldNumber = 12;
  float max_act_gaussian_dropout() const;
  void set_max_act_gaussian_dropout(float value);

  // @@protoc_insertion_point(class_scope:config.Layer)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_num_channels();
  void clear_has_num_channels();
  void set_has_size();
  void clear_has_size();
  void set_has_dropprob();
  void clear_has_dropprob();
  void set_has_is_input();
  void clear_has_is_input();
  void set_has_activation();
  void clear_has_activation();
  void set_has_is_spatial_output();
  void clear_has_is_spatial_output();
  void set_has_is_classifier_output();
  void clear_has_is_classifier_output();
  void set_has_display();
  void clear_has_display();
  void set_has_is_output();
  void clear_has_is_output();
  void set_has_gaussian_dropout();
  void clear_has_gaussian_dropout();
  void set_has_max_act_gaussian_dropout();
  void clear_has_max_act_gaussian_dropout();
  void set_has_gpu_id();
  void clear_has_gpu_id();
  void set_has_hinge_margin();
  void clear_has_hinge_margin();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 num_channels_;
  float dropprob_;
  int activation_;
  bool is_input_;
  bool is_spatial_output_;
  bool is_classifier_output_;
  bool display_;
  bool is_output_;
  bool gaussian_dropout_;
  ::google::protobuf::int32 gpu_id_;
  float hinge_margin_;
  ::google::protobuf::int32 size_;
  float max_act_gaussian_dropout_;
  friend struct protobuf_convnet_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Optimizer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:config.Optimizer) */ {
 public:
  Optimizer();
  virtual ~Optimizer();

  Optimizer(const Optimizer& from);

  inline Optimizer& operator=(const Optimizer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Optimizer& default_instance();

  static inline const Optimizer* internal_default_instance() {
    return reinterpret_cast<const Optimizer*>(
               &_Optimizer_default_instance_);
  }

  void Swap(Optimizer* other);

  // implements Message ----------------------------------------------

  inline Optimizer* New() const PROTOBUF_FINAL { return New(NULL); }

  Optimizer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Optimizer& from);
  void MergeFrom(const Optimizer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Optimizer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Optimizer_OptimizerType OptimizerType;
  static const OptimizerType STOCHASTIC_GRADIENT_DESCENT =
    Optimizer_OptimizerType_STOCHASTIC_GRADIENT_DESCENT;
  static const OptimizerType LBFGS =
    Optimizer_OptimizerType_LBFGS;
  static inline bool OptimizerType_IsValid(int value) {
    return Optimizer_OptimizerType_IsValid(value);
  }
  static const OptimizerType OptimizerType_MIN =
    Optimizer_OptimizerType_OptimizerType_MIN;
  static const OptimizerType OptimizerType_MAX =
    Optimizer_OptimizerType_OptimizerType_MAX;
  static const int OptimizerType_ARRAYSIZE =
    Optimizer_OptimizerType_OptimizerType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OptimizerType_descriptor() {
    return Optimizer_OptimizerType_descriptor();
  }
  static inline const ::std::string& OptimizerType_Name(OptimizerType value) {
    return Optimizer_OptimizerType_Name(value);
  }
  static inline bool OptimizerType_Parse(const ::std::string& name,
      OptimizerType* value) {
    return Optimizer_OptimizerType_Parse(name, value);
  }

  typedef Optimizer_Decay Decay;
  static const Decay NONE =
    Optimizer_Decay_NONE;
  static const Decay INVERSE_T =
    Optimizer_Decay_INVERSE_T;
  static const Decay EXPONENTIAL =
    Optimizer_Decay_EXPONENTIAL;
  static const Decay LINEAR =
    Optimizer_Decay_LINEAR;
  static inline bool Decay_IsValid(int value) {
    return Optimizer_Decay_IsValid(value);
  }
  static const Decay Decay_MIN =
    Optimizer_Decay_Decay_MIN;
  static const Decay Decay_MAX =
    Optimizer_Decay_Decay_MAX;
  static const int Decay_ARRAYSIZE =
    Optimizer_Decay_Decay_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Decay_descriptor() {
    return Optimizer_Decay_descriptor();
  }
  static inline const ::std::string& Decay_Name(Decay value) {
    return Optimizer_Decay_Name(value);
  }
  static inline bool Decay_Parse(const ::std::string& name,
      Decay* value) {
    return Optimizer_Decay_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .config.Optimizer.OptimizerType optimizer_type = 1 [default = STOCHASTIC_GRADIENT_DESCENT];
  bool has_optimizer_type() const;
  void clear_optimizer_type();
  static const int kOptimizerTypeFieldNumber = 1;
  ::config::Optimizer_OptimizerType optimizer_type() const;
  void set_optimizer_type(::config::Optimizer_OptimizerType value);

  // optional float epsilon = 2 [default = 0];
  bool has_epsilon() const;
  void clear_epsilon();
  static const int kEpsilonFieldNumber = 2;
  float epsilon() const;
  void set_epsilon(float value);

  // optional int32 epsilon_decay_timescale = 3 [default = 0];
  bool has_epsilon_decay_timescale() const;
  void clear_epsilon_decay_timescale();
  static const int kEpsilonDecayTimescaleFieldNumber = 3;
  ::google::protobuf::int32 epsilon_decay_timescale() const;
  void set_epsilon_decay_timescale(::google::protobuf::int32 value);

  // optional float initial_momentum = 4 [default = 0];
  bool has_initial_momentum() const;
  void clear_initial_momentum();
  static const int kInitialMomentumFieldNumber = 4;
  float initial_momentum() const;
  void set_initial_momentum(float value);

  // optional float final_momentum = 5 [default = 0];
  bool has_final_momentum() const;
  void clear_final_momentum();
  static const int kFinalMomentumFieldNumber = 5;
  float final_momentum() const;
  void set_final_momentum(float value);

  // optional int32 momentum_transition_timescale = 6 [default = 0];
  bool has_momentum_transition_timescale() const;
  void clear_momentum_transition_timescale();
  static const int kMomentumTransitionTimescaleFieldNumber = 6;
  ::google::protobuf::int32 momentum_transition_timescale() const;
  void set_momentum_transition_timescale(::google::protobuf::int32 value);

  // optional float l2_decay = 7 [default = 0];
  bool has_l2_decay() const;
  void clear_l2_decay();
  static const int kL2DecayFieldNumber = 7;
  float l2_decay() const;
  void set_l2_decay(float value);

  // optional float weight_norm_limit = 8 [default = 0];
  bool has_weight_norm_limit() const;
  void clear_weight_norm_limit();
  static const int kWeightNormLimitFieldNumber = 8;
  float weight_norm_limit() const;
  void set_weight_norm_limit(float value);

  // optional float weight_norm_constraint = 9 [default = 0];
  bool has_weight_norm_constraint() const;
  void clear_weight_norm_constraint();
  static const int kWeightNormConstraintFieldNumber = 9;
  float weight_norm_constraint() const;
  void set_weight_norm_constraint(float value);

  // optional .config.Optimizer.Decay epsilon_decay = 10 [default = NONE];
  bool has_epsilon_decay() const;
  void clear_epsilon_decay();
  static const int kEpsilonDecayFieldNumber = 10;
  ::config::Optimizer_Decay epsilon_decay() const;
  void set_epsilon_decay(::config::Optimizer_Decay value);

  // optional float minimum_epsilon = 11 [default = 0];
  bool has_minimum_epsilon() const;
  void clear_minimum_epsilon();
  static const int kMinimumEpsilonFieldNumber = 11;
  float minimum_epsilon() const;
  void set_minimum_epsilon(float value);

  // optional int32 lbfgs_memory = 13 [default = 0];
  bool has_lbfgs_memory() const;
  void clear_lbfgs_memory();
  static const int kLbfgsMemoryFieldNumber = 13;
  ::google::protobuf::int32 lbfgs_memory() const;
  void set_lbfgs_memory(::google::protobuf::int32 value);

  // optional int32 start_optimization_after = 14 [default = 0];
  bool has_start_optimization_after() const;
  void clear_start_optimization_after();
  static const int kStartOptimizationAfterFieldNumber = 14;
  ::google::protobuf::int32 start_optimization_after() const;
  void set_start_optimization_after(::google::protobuf::int32 value);

  // optional float gradient_clip = 12 [default = -1];
  bool has_gradient_clip() const;
  void clear_gradient_clip();
  static const int kGradientClipFieldNumber = 12;
  float gradient_clip() const;
  void set_gradient_clip(float value);

  // @@protoc_insertion_point(class_scope:config.Optimizer)
 private:
  void set_has_optimizer_type();
  void clear_has_optimizer_type();
  void set_has_epsilon();
  void clear_has_epsilon();
  void set_has_epsilon_decay_timescale();
  void clear_has_epsilon_decay_timescale();
  void set_has_initial_momentum();
  void clear_has_initial_momentum();
  void set_has_final_momentum();
  void clear_has_final_momentum();
  void set_has_momentum_transition_timescale();
  void clear_has_momentum_transition_timescale();
  void set_has_l2_decay();
  void clear_has_l2_decay();
  void set_has_weight_norm_limit();
  void clear_has_weight_norm_limit();
  void set_has_weight_norm_constraint();
  void clear_has_weight_norm_constraint();
  void set_has_epsilon_decay();
  void clear_has_epsilon_decay();
  void set_has_minimum_epsilon();
  void clear_has_minimum_epsilon();
  void set_has_gradient_clip();
  void clear_has_gradient_clip();
  void set_has_lbfgs_memory();
  void clear_has_lbfgs_memory();
  void set_has_start_optimization_after();
  void clear_has_start_optimization_after();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int optimizer_type_;
  float epsilon_;
  ::google::protobuf::int32 epsilon_decay_timescale_;
  float initial_momentum_;
  float final_momentum_;
  ::google::protobuf::int32 momentum_transition_timescale_;
  float l2_decay_;
  float weight_norm_limit_;
  float weight_norm_constraint_;
  int epsilon_decay_;
  float minimum_epsilon_;
  ::google::protobuf::int32 lbfgs_memory_;
  ::google::protobuf::int32 start_optimization_after_;
  float gradient_clip_;
  friend struct protobuf_convnet_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Edge : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:config.Edge) */ {
 public:
  Edge();
  virtual ~Edge();

  Edge(const Edge& from);

  inline Edge& operator=(const Edge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Edge& default_instance();

  static inline const Edge* internal_default_instance() {
    return reinterpret_cast<const Edge*>(
               &_Edge_default_instance_);
  }

  void Swap(Edge* other);

  // implements Message ----------------------------------------------

  inline Edge* New() const PROTOBUF_FINAL { return New(NULL); }

  Edge* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Edge& from);
  void MergeFrom(const Edge& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Edge* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Edge_EdgeType EdgeType;
  static const EdgeType FC =
    Edge_EdgeType_FC;
  static const EdgeType CONVOLUTIONAL =
    Edge_EdgeType_CONVOLUTIONAL;
  static const EdgeType LOCAL =
    Edge_EdgeType_LOCAL;
  static const EdgeType MAXPOOL =
    Edge_EdgeType_MAXPOOL;
  static const EdgeType RESPONSE_NORM =
    Edge_EdgeType_RESPONSE_NORM;
  static const EdgeType UPSAMPLE =
    Edge_EdgeType_UPSAMPLE;
  static const EdgeType DOWNSAMPLE =
    Edge_EdgeType_DOWNSAMPLE;
  static const EdgeType RGBTOYUV =
    Edge_EdgeType_RGBTOYUV;
  static const EdgeType AVERAGE_POOL =
    Edge_EdgeType_AVERAGE_POOL;
  static const EdgeType CONV_ONETOONE =
    Edge_EdgeType_CONV_ONETOONE;
  static inline bool EdgeType_IsValid(int value) {
    return Edge_EdgeType_IsValid(value);
  }
  static const EdgeType EdgeType_MIN =
    Edge_EdgeType_EdgeType_MIN;
  static const EdgeType EdgeType_MAX =
    Edge_EdgeType_EdgeType_MAX;
  static const int EdgeType_ARRAYSIZE =
    Edge_EdgeType_EdgeType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EdgeType_descriptor() {
    return Edge_EdgeType_descriptor();
  }
  static inline const ::std::string& EdgeType_Name(EdgeType value) {
    return Edge_EdgeType_Name(value);
  }
  static inline bool EdgeType_Parse(const ::std::string& name,
      EdgeType* value) {
    return Edge_EdgeType_Parse(name, value);
  }

  typedef Edge_Initialization Initialization;
  static const Initialization DENSE_GAUSSIAN =
    Edge_Initialization_DENSE_GAUSSIAN;
  static const Initialization SPARSE_GAUSSIAN =
    Edge_Initialization_SPARSE_GAUSSIAN;
  static const Initialization CONSTANT =
    Edge_Initialization_CONSTANT;
  static const Initialization DENSE_GAUSSIAN_SQRT_FAN_IN =
    Edge_Initialization_DENSE_GAUSSIAN_SQRT_FAN_IN;
  static const Initialization PRETRAINED =
    Edge_Initialization_PRETRAINED;
  static const Initialization DENSE_UNIFORM =
    Edge_Initialization_DENSE_UNIFORM;
  static const Initialization DENSE_UNIFORM_SQRT_FAN_IN =
    Edge_Initialization_DENSE_UNIFORM_SQRT_FAN_IN;
  static inline bool Initialization_IsValid(int value) {
    return Edge_Initialization_IsValid(value);
  }
  static const Initialization Initialization_MIN =
    Edge_Initialization_Initialization_MIN;
  static const Initialization Initialization_MAX =
    Edge_Initialization_Initialization_MAX;
  static const int Initialization_ARRAYSIZE =
    Edge_Initialization_Initialization_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Initialization_descriptor() {
    return Edge_Initialization_descriptor();
  }
  static inline const ::std::string& Initialization_Name(Initialization value) {
    return Edge_Initialization_Name(value);
  }
  static inline bool Initialization_Parse(const ::std::string& name,
      Initialization* value) {
    return Edge_Initialization_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string source = 1;
  bool has_source() const;
  void clear_source();
  static const int kSourceFieldNumber = 1;
  const ::std::string& source() const;
  void set_source(const ::std::string& value);
  #if LANG_CXX11
  void set_source(::std::string&& value);
  #endif
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  ::std::string* mutable_source();
  ::std::string* release_source();
  void set_allocated_source(::std::string* source);

  // required string dest = 2;
  bool has_dest() const;
  void clear_dest();
  static const int kDestFieldNumber = 2;
  const ::std::string& dest() const;
  void set_dest(const ::std::string& value);
  #if LANG_CXX11
  void set_dest(::std::string&& value);
  #endif
  void set_dest(const char* value);
  void set_dest(const char* value, size_t size);
  ::std::string* mutable_dest();
  ::std::string* release_dest();
  void set_allocated_dest(::std::string* dest);

  // optional string tied_to = 14;
  bool has_tied_to() const;
  void clear_tied_to();
  static const int kTiedToFieldNumber = 14;
  const ::std::string& tied_to() const;
  void set_tied_to(const ::std::string& value);
  #if LANG_CXX11
  void set_tied_to(::std::string&& value);
  #endif
  void set_tied_to(const char* value);
  void set_tied_to(const char* value, size_t size);
  ::std::string* mutable_tied_to();
  ::std::string* release_tied_to();
  void set_allocated_tied_to(::std::string* tied_to);

  // optional string pretrained_model = 25;
  bool has_pretrained_model() const;
  void clear_pretrained_model();
  static const int kPretrainedModelFieldNumber = 25;
  const ::std::string& pretrained_model() const;
  void set_pretrained_model(const ::std::string& value);
  #if LANG_CXX11
  void set_pretrained_model(::std::string&& value);
  #endif
  void set_pretrained_model(const char* value);
  void set_pretrained_model(const char* value, size_t size);
  ::std::string* mutable_pretrained_model();
  ::std::string* release_pretrained_model();
  void set_allocated_pretrained_model(::std::string* pretrained_model);

  // optional string pretrained_edge_name = 26;
  bool has_pretrained_edge_name() const;
  void clear_pretrained_edge_name();
  static const int kPretrainedEdgeNameFieldNumber = 26;
  const ::std::string& pretrained_edge_name() const;
  void set_pretrained_edge_name(const ::std::string& value);
  #if LANG_CXX11
  void set_pretrained_edge_name(::std::string&& value);
  #endif
  void set_pretrained_edge_name(const char* value);
  void set_pretrained_edge_name(const char* value, size_t size);
  ::std::string* mutable_pretrained_edge_name();
  ::std::string* release_pretrained_edge_name();
  void set_allocated_pretrained_edge_name(::std::string* pretrained_edge_name);

  // optional .config.Optimizer weight_optimizer = 10;
  bool has_weight_optimizer() const;
  void clear_weight_optimizer();
  static const int kWeightOptimizerFieldNumber = 10;
  const ::config::Optimizer& weight_optimizer() const;
  ::config::Optimizer* mutable_weight_optimizer();
  ::config::Optimizer* release_weight_optimizer();
  void set_allocated_weight_optimizer(::config::Optimizer* weight_optimizer);

  // optional .config.Optimizer bias_optimizer = 11;
  bool has_bias_optimizer() const;
  void clear_bias_optimizer();
  static const int kBiasOptimizerFieldNumber = 11;
  const ::config::Optimizer& bias_optimizer() const;
  ::config::Optimizer* mutable_bias_optimizer();
  ::config::Optimizer* release_bias_optimizer();
  void set_allocated_bias_optimizer(::config::Optimizer* bias_optimizer);

  // optional .config.Edge.EdgeType edge_type = 3 [default = FC];
  bool has_edge_type() const;
  void clear_edge_type();
  static const int kEdgeTypeFieldNumber = 3;
  ::config::Edge_EdgeType edge_type() const;
  void set_edge_type(::config::Edge_EdgeType value);

  // optional int32 padding = 6 [default = 0];
  bool has_padding() const;
  void clear_padding();
  static const int kPaddingFieldNumber = 6;
  ::google::protobuf::int32 padding() const;
  void set_padding(::google::protobuf::int32 value);

  // optional float init_bias = 9 [default = 0];
  bool has_init_bias() const;
  void clear_init_bias();
  static const int kInitBiasFieldNumber = 9;
  float init_bias() const;
  void set_init_bias(float value);

  // optional bool shared_bias = 12 [default = false];
  bool has_shared_bias() const;
  void clear_shared_bias();
  static const int kSharedBiasFieldNumber = 12;
  bool shared_bias() const;
  void set_shared_bias(bool value);

  // optional bool block_backprop = 13 [default = false];
  bool has_block_backprop() const;
  void clear_block_backprop();
  static const int kBlockBackpropFieldNumber = 13;
  bool block_backprop() const;
  void set_block_backprop(bool value);

  // optional bool has_no_bias = 15 [default = false];
  bool has_has_no_bias() const;
  void clear_has_no_bias();
  static const int kHasNoBiasFieldNumber = 15;
  bool has_no_bias() const;
  void set_has_no_bias(bool value);

  // optional bool response_norm_in_blocks = 19 [default = false];
  bool has_response_norm_in_blocks() const;
  void clear_response_norm_in_blocks();
  static const int kResponseNormInBlocksFieldNumber = 19;
  bool response_norm_in_blocks() const;
  void set_response_norm_in_blocks(bool value);

  // optional int32 partial_sum = 17 [default = 0];
  bool has_partial_sum() const;
  void clear_partial_sum();
  static const int kPartialSumFieldNumber = 17;
  ::google::protobuf::int32 partial_sum() const;
  void set_partial_sum(::google::protobuf::int32 value);

  // optional float add_scale = 20 [default = 0];
  bool has_add_scale() const;
  void clear_add_scale();
  static const int kAddScaleFieldNumber = 20;
  float add_scale() const;
  void set_add_scale(float value);

  // optional float pow_scale = 21 [default = 0];
  bool has_pow_scale() const;
  void clear_pow_scale();
  static const int kPowScaleFieldNumber = 21;
  float pow_scale() const;
  void set_pow_scale(float value);

  // optional float frac_of_filters_response_norm = 22 [default = 0];
  bool has_frac_of_filters_response_norm() const;
  void clear_frac_of_filters_response_norm();
  static const int kFracOfFiltersResponseNormFieldNumber = 22;
  float frac_of_filters_response_norm() const;
  void set_frac_of_filters_response_norm(float value);

  // optional int32 polyak_queue_size = 23 [default = 0];
  bool has_polyak_queue_size() const;
  void clear_polyak_queue_size();
  static const int kPolyakQueueSizeFieldNumber = 23;
  ::google::protobuf::int32 polyak_queue_size() const;
  void set_polyak_queue_size(::google::protobuf::int32 value);

  // optional int32 gpu_id = 24 [default = 0];
  bool has_gpu_id() const;
  void clear_gpu_id();
  static const int kGpuIdFieldNumber = 24;
  ::google::protobuf::int32 gpu_id() const;
  void set_gpu_id(::google::protobuf::int32 value);

  // optional bool display = 27 [default = false];
  bool has_display() const;
  void clear_display();
  static const int kDisplayFieldNumber = 27;
  bool display() const;
  void set_display(bool value);

  // optional int32 kernel_size = 4 [default = -1];
  bool has_kernel_size() const;
  void clear_kernel_size();
  static const int kKernelSizeFieldNumber = 4;
  ::google::protobuf::int32 kernel_size() const;
  void set_kernel_size(::google::protobuf::int32 value);

  // optional int32 stride = 5 [default = 1];
  bool has_stride() const;
  void clear_stride();
  static const int kStrideFieldNumber = 5;
  ::google::protobuf::int32 stride() const;
  void set_stride(::google::protobuf::int32 value);

  // optional .config.Edge.Initialization initialization = 7 [default = DENSE_GAUSSIAN_SQRT_FAN_IN];
  bool has_initialization() const;
  void clear_initialization();
  static const int kInitializationFieldNumber = 7;
  ::config::Edge_Initialization initialization() const;
  void set_initialization(::config::Edge_Initialization value);

  // optional float init_wt = 8 [default = 1];
  bool has_init_wt() const;
  void clear_init_wt();
  static const int kInitWtFieldNumber = 8;
  float init_wt() const;
  void set_init_wt(float value);

  // optional float scale_gradients = 16 [default = 1];
  bool has_scale_gradients() const;
  void clear_scale_gradients();
  static const int kScaleGradientsFieldNumber = 16;
  float scale_gradients() const;
  void set_scale_gradients(float value);

  // optional int32 sample_factor = 18 [default = 1];
  bool has_sample_factor() const;
  void clear_sample_factor();
  static const int kSampleFactorFieldNumber = 18;
  ::google::protobuf::int32 sample_factor() const;
  void set_sample_factor(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:config.Edge)
 private:
  void set_has_source();
  void clear_has_source();
  void set_has_dest();
  void clear_has_dest();
  void set_has_edge_type();
  void clear_has_edge_type();
  void set_has_kernel_size();
  void clear_has_kernel_size();
  void set_has_stride();
  void clear_has_stride();
  void set_has_padding();
  void clear_has_padding();
  void set_has_initialization();
  void clear_has_initialization();
  void set_has_init_wt();
  void clear_has_init_wt();
  void set_has_init_bias();
  void clear_has_init_bias();
  void set_has_weight_optimizer();
  void clear_has_weight_optimizer();
  void set_has_bias_optimizer();
  void clear_has_bias_optimizer();
  void set_has_shared_bias();
  void clear_has_shared_bias();
  void set_has_block_backprop();
  void clear_has_block_backprop();
  void set_has_tied_to();
  void clear_has_tied_to();
  void set_has_has_no_bias();
  void clear_has_has_no_bias();
  void set_has_scale_gradients();
  void clear_has_scale_gradients();
  void set_has_partial_sum();
  void clear_has_partial_sum();
  void set_has_sample_factor();
  void clear_has_sample_factor();
  void set_has_response_norm_in_blocks();
  void clear_has_response_norm_in_blocks();
  void set_has_add_scale();
  void clear_has_add_scale();
  void set_has_pow_scale();
  void clear_has_pow_scale();
  void set_has_frac_of_filters_response_norm();
  void clear_has_frac_of_filters_response_norm();
  void set_has_polyak_queue_size();
  void clear_has_polyak_queue_size();
  void set_has_gpu_id();
  void clear_has_gpu_id();
  void set_has_pretrained_model();
  void clear_has_pretrained_model();
  void set_has_pretrained_edge_name();
  void clear_has_pretrained_edge_name();
  void set_has_display();
  void clear_has_display();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr source_;
  ::google::protobuf::internal::ArenaStringPtr dest_;
  ::google::protobuf::internal::ArenaStringPtr tied_to_;
  ::google::protobuf::internal::ArenaStringPtr pretrained_model_;
  ::google::protobuf::internal::ArenaStringPtr pretrained_edge_name_;
  ::config::Optimizer* weight_optimizer_;
  ::config::Optimizer* bias_optimizer_;
  int edge_type_;
  ::google::protobuf::int32 padding_;
  float init_bias_;
  bool shared_bias_;
  bool block_backprop_;
  bool has_no_bias_;
  bool response_norm_in_blocks_;
  ::google::protobuf::int32 partial_sum_;
  float add_scale_;
  float pow_scale_;
  float frac_of_filters_response_norm_;
  ::google::protobuf::int32 polyak_queue_size_;
  ::google::protobuf::int32 gpu_id_;
  bool display_;
  ::google::protobuf::int32 kernel_size_;
  ::google::protobuf::int32 stride_;
  int initialization_;
  float init_wt_;
  float scale_gradients_;
  ::google::protobuf::int32 sample_factor_;
  friend struct protobuf_convnet_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Subnet_MergeLayer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:config.Subnet.MergeLayer) */ {
 public:
  Subnet_MergeLayer();
  virtual ~Subnet_MergeLayer();

  Subnet_MergeLayer(const Subnet_MergeLayer& from);

  inline Subnet_MergeLayer& operator=(const Subnet_MergeLayer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Subnet_MergeLayer& default_instance();

  static inline const Subnet_MergeLayer* internal_default_instance() {
    return reinterpret_cast<const Subnet_MergeLayer*>(
               &_Subnet_MergeLayer_default_instance_);
  }

  void Swap(Subnet_MergeLayer* other);

  // implements Message ----------------------------------------------

  inline Subnet_MergeLayer* New() const PROTOBUF_FINAL { return New(NULL); }

  Subnet_MergeLayer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Subnet_MergeLayer& from);
  void MergeFrom(const Subnet_MergeLayer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Subnet_MergeLayer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string subnet_layer = 1;
  bool has_subnet_layer() const;
  void clear_subnet_layer();
  static const int kSubnetLayerFieldNumber = 1;
  const ::std::string& subnet_layer() const;
  void set_subnet_layer(const ::std::string& value);
  #if LANG_CXX11
  void set_subnet_layer(::std::string&& value);
  #endif
  void set_subnet_layer(const char* value);
  void set_subnet_layer(const char* value, size_t size);
  ::std::string* mutable_subnet_layer();
  ::std::string* release_subnet_layer();
  void set_allocated_subnet_layer(::std::string* subnet_layer);

  // required string net_layer = 2;
  bool has_net_layer() const;
  void clear_net_layer();
  static const int kNetLayerFieldNumber = 2;
  const ::std::string& net_layer() const;
  void set_net_layer(const ::std::string& value);
  #if LANG_CXX11
  void set_net_layer(::std::string&& value);
  #endif
  void set_net_layer(const char* value);
  void set_net_layer(const char* value, size_t size);
  ::std::string* mutable_net_layer();
  ::std::string* release_net_layer();
  void set_allocated_net_layer(::std::string* net_layer);

  // @@protoc_insertion_point(class_scope:config.Subnet.MergeLayer)
 private:
  void set_has_subnet_layer();
  void clear_has_subnet_layer();
  void set_has_net_layer();
  void clear_has_net_layer();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr subnet_layer_;
  ::google::protobuf::internal::ArenaStringPtr net_layer_;
  friend struct protobuf_convnet_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Subnet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:config.Subnet) */ {
 public:
  Subnet();
  virtual ~Subnet();

  Subnet(const Subnet& from);

  inline Subnet& operator=(const Subnet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Subnet& default_instance();

  static inline const Subnet* internal_default_instance() {
    return reinterpret_cast<const Subnet*>(
               &_Subnet_default_instance_);
  }

  void Swap(Subnet* other);

  // implements Message ----------------------------------------------

  inline Subnet* New() const PROTOBUF_FINAL { return New(NULL); }

  Subnet* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Subnet& from);
  void MergeFrom(const Subnet& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Subnet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Subnet_MergeLayer MergeLayer;

  // accessors -------------------------------------------------------

  // repeated .config.Subnet.MergeLayer merge_layer = 4;
  int merge_layer_size() const;
  void clear_merge_layer();
  static const int kMergeLayerFieldNumber = 4;
  const ::config::Subnet_MergeLayer& merge_layer(int index) const;
  ::config::Subnet_MergeLayer* mutable_merge_layer(int index);
  ::config::Subnet_MergeLayer* add_merge_layer();
  ::google::protobuf::RepeatedPtrField< ::config::Subnet_MergeLayer >*
      mutable_merge_layer();
  const ::google::protobuf::RepeatedPtrField< ::config::Subnet_MergeLayer >&
      merge_layer() const;

  // repeated string remove_layer = 9;
  int remove_layer_size() const;
  void clear_remove_layer();
  static const int kRemoveLayerFieldNumber = 9;
  const ::std::string& remove_layer(int index) const;
  ::std::string* mutable_remove_layer(int index);
  void set_remove_layer(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_remove_layer(int index, ::std::string&& value);
  #endif
  void set_remove_layer(int index, const char* value);
  void set_remove_layer(int index, const char* value, size_t size);
  ::std::string* add_remove_layer();
  void add_remove_layer(const ::std::string& value);
  #if LANG_CXX11
  void add_remove_layer(::std::string&& value);
  #endif
  void add_remove_layer(const char* value);
  void add_remove_layer(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& remove_layer() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_remove_layer();

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required string model_file = 2;
  bool has_model_file() const;
  void clear_model_file();
  static const int kModelFileFieldNumber = 2;
  const ::std::string& model_file() const;
  void set_model_file(const ::std::string& value);
  #if LANG_CXX11
  void set_model_file(::std::string&& value);
  #endif
  void set_model_file(const char* value);
  void set_model_file(const char* value, size_t size);
  ::std::string* mutable_model_file();
  ::std::string* release_model_file();
  void set_allocated_model_file(::std::string* model_file);

  // optional string parameters_file = 3;
  bool has_parameters_file() const;
  void clear_parameters_file();
  static const int kParametersFileFieldNumber = 3;
  const ::std::string& parameters_file() const;
  void set_parameters_file(const ::std::string& value);
  #if LANG_CXX11
  void set_parameters_file(::std::string&& value);
  #endif
  void set_parameters_file(const char* value);
  void set_parameters_file(const char* value, size_t size);
  ::std::string* mutable_parameters_file();
  ::std::string* release_parameters_file();
  void set_allocated_parameters_file(::std::string* parameters_file);

  // optional bool block_backprop = 5 [default = false];
  bool has_block_backprop() const;
  void clear_block_backprop();
  static const int kBlockBackpropFieldNumber = 5;
  bool block_backprop() const;
  void set_block_backprop(bool value);

  // optional int32 start_optimization_after = 6 [default = 0];
  bool has_start_optimization_after() const;
  void clear_start_optimization_after();
  static const int kStartOptimizationAfterFieldNumber = 6;
  ::google::protobuf::int32 start_optimization_after() const;
  void set_start_optimization_after(::google::protobuf::int32 value);

  // optional int32 gpu_id_offset = 7 [default = 0];
  bool has_gpu_id_offset() const;
  void clear_gpu_id_offset();
  static const int kGpuIdOffsetFieldNumber = 7;
  ::google::protobuf::int32 gpu_id_offset() const;
  void set_gpu_id_offset(::google::protobuf::int32 value);

  // optional int32 num_channels_multiplier = 8 [default = 1];
  bool has_num_channels_multiplier() const;
  void clear_num_channels_multiplier();
  static const int kNumChannelsMultiplierFieldNumber = 8;
  ::google::protobuf::int32 num_channels_multiplier() const;
  void set_num_channels_multiplier(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:config.Subnet)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_model_file();
  void clear_has_model_file();
  void set_has_parameters_file();
  void clear_has_parameters_file();
  void set_has_block_backprop();
  void clear_has_block_backprop();
  void set_has_start_optimization_after();
  void clear_has_start_optimization_after();
  void set_has_gpu_id_offset();
  void clear_has_gpu_id_offset();
  void set_has_num_channels_multiplier();
  void clear_has_num_channels_multiplier();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::config::Subnet_MergeLayer > merge_layer_;
  ::google::protobuf::RepeatedPtrField< ::std::string> remove_layer_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr model_file_;
  ::google::protobuf::internal::ArenaStringPtr parameters_file_;
  bool block_backprop_;
  ::google::protobuf::int32 start_optimization_after_;
  ::google::protobuf::int32 gpu_id_offset_;
  ::google::protobuf::int32 num_channels_multiplier_;
  friend struct protobuf_convnet_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Model : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:config.Model) */ {
 public:
  Model();
  virtual ~Model();

  Model(const Model& from);

  inline Model& operator=(const Model& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Model& default_instance();

  static inline const Model* internal_default_instance() {
    return reinterpret_cast<const Model*>(
               &_Model_default_instance_);
  }

  void Swap(Model* other);

  // implements Message ----------------------------------------------

  inline Model* New() const PROTOBUF_FINAL { return New(NULL); }

  Model* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Model& from);
  void MergeFrom(const Model& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Model* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .config.Layer layer = 2;
  int layer_size() const;
  void clear_layer();
  static const int kLayerFieldNumber = 2;
  const ::config::Layer& layer(int index) const;
  ::config::Layer* mutable_layer(int index);
  ::config::Layer* add_layer();
  ::google::protobuf::RepeatedPtrField< ::config::Layer >*
      mutable_layer();
  const ::google::protobuf::RepeatedPtrField< ::config::Layer >&
      layer() const;

  // repeated .config.Edge edge = 3;
  int edge_size() const;
  void clear_edge();
  static const int kEdgeFieldNumber = 3;
  const ::config::Edge& edge(int index) const;
  ::config::Edge* mutable_edge(int index);
  ::config::Edge* add_edge();
  ::google::protobuf::RepeatedPtrField< ::config::Edge >*
      mutable_edge();
  const ::google::protobuf::RepeatedPtrField< ::config::Edge >&
      edge() const;

  // repeated string timestamp = 15;
  int timestamp_size() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 15;
  const ::std::string& timestamp(int index) const;
  ::std::string* mutable_timestamp(int index);
  void set_timestamp(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_timestamp(int index, ::std::string&& value);
  #endif
  void set_timestamp(int index, const char* value);
  void set_timestamp(int index, const char* value, size_t size);
  ::std::string* add_timestamp();
  void add_timestamp(const ::std::string& value);
  #if LANG_CXX11
  void add_timestamp(::std::string&& value);
  #endif
  void add_timestamp(const char* value);
  void add_timestamp(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& timestamp() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_timestamp();

  // repeated .config.Subnet subnet = 26;
  int subnet_size() const;
  void clear_subnet();
  static const int kSubnetFieldNumber = 26;
  const ::config::Subnet& subnet(int index) const;
  ::config::Subnet* mutable_subnet(int index);
  ::config::Subnet* add_subnet();
  ::google::protobuf::RepeatedPtrField< ::config::Subnet >*
      mutable_subnet();
  const ::google::protobuf::RepeatedPtrField< ::config::Subnet >&
      subnet() const;

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string checkpoint_dir = 12;
  bool has_checkpoint_dir() const;
  void clear_checkpoint_dir();
  static const int kCheckpointDirFieldNumber = 12;
  const ::std::string& checkpoint_dir() const;
  void set_checkpoint_dir(const ::std::string& value);
  #if LANG_CXX11
  void set_checkpoint_dir(::std::string&& value);
  #endif
  void set_checkpoint_dir(const char* value);
  void set_checkpoint_dir(const char* value, size_t size);
  ::std::string* mutable_checkpoint_dir();
  ::std::string* release_checkpoint_dir();
  void set_allocated_checkpoint_dir(::std::string* checkpoint_dir);

  // required int32 seed = 4;
  bool has_seed() const;
  void clear_seed();
  static const int kSeedFieldNumber = 4;
  ::google::protobuf::int32 seed() const;
  void set_seed(::google::protobuf::int32 value);

  // optional int32 image_size = 8 [default = 0];
  bool has_image_size() const;
  void clear_image_size();
  static const int kImageSizeFieldNumber = 8;
  ::google::protobuf::int32 image_size() const;
  void set_image_size(::google::protobuf::int32 value);

  // optional int32 patch_size = 9 [default = 0];
  bool has_patch_size() const;
  void clear_patch_size();
  static const int kPatchSizeFieldNumber = 9;
  ::google::protobuf::int32 patch_size() const;
  void set_patch_size(::google::protobuf::int32 value);

  // optional bool localizer = 11 [default = false];
  bool has_localizer() const;
  void clear_localizer();
  static const int kLocalizerFieldNumber = 11;
  bool localizer() const;
  void set_localizer(bool value);

  // optional bool print_weights = 13 [default = false];
  bool has_print_weights() const;
  void clear_print_weights();
  static const int kPrintWeightsFieldNumber = 13;
  bool print_weights() const;
  void set_print_weights(bool value);

  // optional bool display = 17 [default = false];
  bool has_display() const;
  void clear_display();
  static const int kDisplayFieldNumber = 17;
  bool display() const;
  void set_display(bool value);

  // optional bool smaller_is_better = 23 [default = false];
  bool has_smaller_is_better() const;
  void clear_smaller_is_better();
  static const int kSmallerIsBetterFieldNumber = 23;
  bool smaller_is_better() const;
  void set_smaller_is_better(bool value);

  // optional float reduce_lr_threshold = 20 [default = 0];
  bool has_reduce_lr_threshold() const;
  void clear_reduce_lr_threshold();
  static const int kReduceLrThresholdFieldNumber = 20;
  float reduce_lr_threshold() const;
  void set_reduce_lr_threshold(float value);

  // optional int32 reduce_lr_num_steps = 21 [default = 0];
  bool has_reduce_lr_num_steps() const;
  void clear_reduce_lr_num_steps();
  static const int kReduceLrNumStepsFieldNumber = 21;
  ::google::protobuf::int32 reduce_lr_num_steps() const;
  void set_reduce_lr_num_steps(::google::protobuf::int32 value);

  // optional int32 reduce_lr_max = 22 [default = 0];
  bool has_reduce_lr_max() const;
  void clear_reduce_lr_max();
  static const int kReduceLrMaxFieldNumber = 22;
  ::google::protobuf::int32 reduce_lr_max() const;
  void set_reduce_lr_max(::google::protobuf::int32 value);

  // optional int32 polyak_after = 24 [default = 0];
  bool has_polyak_after() const;
  void clear_polyak_after();
  static const int kPolyakAfterFieldNumber = 24;
  ::google::protobuf::int32 polyak_after() const;
  void set_polyak_after(::google::protobuf::int32 value);

  // optional int32 polyak_queue_size = 25 [default = 0];
  bool has_polyak_queue_size() const;
  void clear_polyak_queue_size();
  static const int kPolyakQueueSizeFieldNumber = 25;
  ::google::protobuf::int32 polyak_queue_size() const;
  void set_polyak_queue_size(::google::protobuf::int32 value);

  // optional int32 max_iter = 5 [default = -1];
  bool has_max_iter() const;
  void clear_max_iter();
  static const int kMaxIterFieldNumber = 5;
  ::google::protobuf::int32 max_iter() const;
  void set_max_iter(::google::protobuf::int32 value);

  // optional int32 display_after = 6 [default = -1];
  bool has_display_after() const;
  void clear_display_after();
  static const int kDisplayAfterFieldNumber = 6;
  ::google::protobuf::int32 display_after() const;
  void set_display_after(::google::protobuf::int32 value);

  // optional int32 save_after = 7 [default = -1];
  bool has_save_after() const;
  void clear_save_after();
  static const int kSaveAfterFieldNumber = 7;
  ::google::protobuf::int32 save_after() const;
  void set_save_after(::google::protobuf::int32 value);

  // optional int32 print_after = 10 [default = -1];
  bool has_print_after() const;
  void clear_print_after();
  static const int kPrintAfterFieldNumber = 10;
  ::google::protobuf::int32 print_after() const;
  void set_print_after(::google::protobuf::int32 value);

  // optional int32 validate_after = 18 [default = -1];
  bool has_validate_after() const;
  void clear_validate_after();
  static const int kValidateAfterFieldNumber = 18;
  ::google::protobuf::int32 validate_after() const;
  void set_validate_after(::google::protobuf::int32 value);

  // optional float reduce_lr_factor = 19 [default = 1];
  bool has_reduce_lr_factor() const;
  void clear_reduce_lr_factor();
  static const int kReduceLrFactorFieldNumber = 19;
  float reduce_lr_factor() const;
  void set_reduce_lr_factor(float value);

  // @@protoc_insertion_point(class_scope:config.Model)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_seed();
  void clear_has_seed();
  void set_has_max_iter();
  void clear_has_max_iter();
  void set_has_display_after();
  void clear_has_display_after();
  void set_has_save_after();
  void clear_has_save_after();
  void set_has_image_size();
  void clear_has_image_size();
  void set_has_patch_size();
  void clear_has_patch_size();
  void set_has_print_after();
  void clear_has_print_after();
  void set_has_localizer();
  void clear_has_localizer();
  void set_has_checkpoint_dir();
  void clear_has_checkpoint_dir();
  void set_has_print_weights();
  void clear_has_print_weights();
  void set_has_display();
  void clear_has_display();
  void set_has_validate_after();
  void clear_has_validate_after();
  void set_has_reduce_lr_factor();
  void clear_has_reduce_lr_factor();
  void set_has_reduce_lr_threshold();
  void clear_has_reduce_lr_threshold();
  void set_has_reduce_lr_num_steps();
  void clear_has_reduce_lr_num_steps();
  void set_has_reduce_lr_max();
  void clear_has_reduce_lr_max();
  void set_has_smaller_is_better();
  void clear_has_smaller_is_better();
  void set_has_polyak_after();
  void clear_has_polyak_after();
  void set_has_polyak_queue_size();
  void clear_has_polyak_queue_size();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::config::Layer > layer_;
  ::google::protobuf::RepeatedPtrField< ::config::Edge > edge_;
  ::google::protobuf::RepeatedPtrField< ::std::string> timestamp_;
  ::google::protobuf::RepeatedPtrField< ::config::Subnet > subnet_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr checkpoint_dir_;
  ::google::protobuf::int32 seed_;
  ::google::protobuf::int32 image_size_;
  ::google::protobuf::int32 patch_size_;
  bool localizer_;
  bool print_weights_;
  bool display_;
  bool smaller_is_better_;
  float reduce_lr_threshold_;
  ::google::protobuf::int32 reduce_lr_num_steps_;
  ::google::protobuf::int32 reduce_lr_max_;
  ::google::protobuf::int32 polyak_after_;
  ::google::protobuf::int32 polyak_queue_size_;
  ::google::protobuf::int32 max_iter_;
  ::google::protobuf::int32 display_after_;
  ::google::protobuf::int32 save_after_;
  ::google::protobuf::int32 print_after_;
  ::google::protobuf::int32 validate_after_;
  float reduce_lr_factor_;
  friend struct protobuf_convnet_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DataStreamConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:config.DataStreamConfig) */ {
 public:
  DataStreamConfig();
  virtual ~DataStreamConfig();

  DataStreamConfig(const DataStreamConfig& from);

  inline DataStreamConfig& operator=(const DataStreamConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataStreamConfig& default_instance();

  static inline const DataStreamConfig* internal_default_instance() {
    return reinterpret_cast<const DataStreamConfig*>(
               &_DataStreamConfig_default_instance_);
  }

  void Swap(DataStreamConfig* other);

  // implements Message ----------------------------------------------

  inline DataStreamConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  DataStreamConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DataStreamConfig& from);
  void MergeFrom(const DataStreamConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DataStreamConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef DataStreamConfig_DataType DataType;
  static const DataType DUMMY =
    DataStreamConfig_DataType_DUMMY;
  static const DataType HDF5 =
    DataStreamConfig_DataType_HDF5;
  static const DataType IMAGE_RAW =
    DataStreamConfig_DataType_IMAGE_RAW;
  static const DataType SLIDING_WINDOW =
    DataStreamConfig_DataType_SLIDING_WINDOW;
  static const DataType TXT =
    DataStreamConfig_DataType_TXT;
  static const DataType BOUNDING_BOX =
    DataStreamConfig_DataType_BOUNDING_BOX;
  static const DataType CROPS =
    DataStreamConfig_DataType_CROPS;
  static inline bool DataType_IsValid(int value) {
    return DataStreamConfig_DataType_IsValid(value);
  }
  static const DataType DataType_MIN =
    DataStreamConfig_DataType_DataType_MIN;
  static const DataType DataType_MAX =
    DataStreamConfig_DataType_DataType_MAX;
  static const int DataType_ARRAYSIZE =
    DataStreamConfig_DataType_DataType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DataType_descriptor() {
    return DataStreamConfig_DataType_descriptor();
  }
  static inline const ::std::string& DataType_Name(DataType value) {
    return DataStreamConfig_DataType_Name(value);
  }
  static inline bool DataType_Parse(const ::std::string& name,
      DataType* value) {
    return DataStreamConfig_DataType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string file_pattern = 1;
  bool has_file_pattern() const;
  void clear_file_pattern();
  static const int kFilePatternFieldNumber = 1;
  const ::std::string& file_pattern() const;
  void set_file_pattern(const ::std::string& value);
  #if LANG_CXX11
  void set_file_pattern(::std::string&& value);
  #endif
  void set_file_pattern(const char* value);
  void set_file_pattern(const char* value, size_t size);
  ::std::string* mutable_file_pattern();
  ::std::string* release_file_pattern();
  void set_allocated_file_pattern(::std::string* file_pattern);

  // required string layer_name = 2;
  bool has_layer_name() const;
  void clear_layer_name();
  static const int kLayerNameFieldNumber = 2;
  const ::std::string& layer_name() const;
  void set_layer_name(const ::std::string& value);
  #if LANG_CXX11
  void set_layer_name(::std::string&& value);
  #endif
  void set_layer_name(const char* value);
  void set_layer_name(const char* value, size_t size);
  ::std::string* mutable_layer_name();
  ::std::string* release_layer_name();
  void set_allocated_layer_name(::std::string* layer_name);

  // optional string dataset_name = 3;
  bool has_dataset_name() const;
  void clear_dataset_name();
  static const int kDatasetNameFieldNumber = 3;
  const ::std::string& dataset_name() const;
  void set_dataset_name(const ::std::string& value);
  #if LANG_CXX11
  void set_dataset_name(::std::string&& value);
  #endif
  void set_dataset_name(const char* value);
  void set_dataset_name(const char* value, size_t size);
  ::std::string* mutable_dataset_name();
  ::std::string* release_dataset_name();
  void set_allocated_dataset_name(::std::string* dataset_name);

  // optional string mean_file = 14;
  bool has_mean_file() const;
  void clear_mean_file();
  static const int kMeanFileFieldNumber = 14;
  const ::std::string& mean_file() const;
  void set_mean_file(const ::std::string& value);
  #if LANG_CXX11
  void set_mean_file(::std::string&& value);
  #endif
  void set_mean_file(const char* value);
  void set_mean_file(const char* value, size_t size);
  ::std::string* mutable_mean_file();
  ::std::string* release_mean_file();
  void set_allocated_mean_file(::std::string* mean_file);

  // optional string noise_layer_name = 20;
  bool has_noise_layer_name() const;
  void clear_noise_layer_name();
  static const int kNoiseLayerNameFieldNumber = 20;
  const ::std::string& noise_layer_name() const;
  void set_noise_layer_name(const ::std::string& value);
  #if LANG_CXX11
  void set_noise_layer_name(::std::string&& value);
  #endif
  void set_noise_layer_name(const char* value);
  void set_noise_layer_name(const char* value, size_t size);
  ::std::string* mutable_noise_layer_name();
  ::std::string* release_noise_layer_name();
  void set_allocated_noise_layer_name(::std::string* noise_layer_name);

  // optional string bbox_file = 22;
  bool has_bbox_file() const;
  void clear_bbox_file();
  static const int kBboxFileFieldNumber = 22;
  const ::std::string& bbox_file() const;
  void set_bbox_file(const ::std::string& value);
  #if LANG_CXX11
  void set_bbox_file(::std::string&& value);
  #endif
  void set_bbox_file(const char* value);
  void set_bbox_file(const char* value, size_t size);
  ::std::string* mutable_bbox_file();
  ::std::string* release_bbox_file();
  void set_allocated_bbox_file(::std::string* bbox_file);

  // optional int32 raw_image_size = 5 [default = 0];
  bool has_raw_image_size() const;
  void clear_raw_image_size();
  static const int kRawImageSizeFieldNumber = 5;
  ::google::protobuf::int32 raw_image_size() const;
  void set_raw_image_size(::google::protobuf::int32 value);

  // optional int32 image_size = 6;
  bool has_image_size() const;
  void clear_image_size();
  static const int kImageSizeFieldNumber = 6;
  ::google::protobuf::int32 image_size() const;
  void set_image_size(::google::protobuf::int32 value);

  // optional bool can_translate = 7 [default = false];
  bool has_can_translate() const;
  void clear_can_translate();
  static const int kCanTranslateFieldNumber = 7;
  bool can_translate() const;
  void set_can_translate(bool value);

  // optional bool can_flip = 8 [default = false];
  bool has_can_flip() const;
  void clear_can_flip();
  static const int kCanFlipFieldNumber = 8;
  bool can_flip() const;
  void set_can_flip(bool value);

  // optional bool pixelwise_normalize = 9 [default = false];
  bool has_pixelwise_normalize() const;
  void clear_pixelwise_normalize();
  static const int kPixelwiseNormalizeFieldNumber = 9;
  bool pixelwise_normalize() const;
  void set_pixelwise_normalize(bool value);

  // optional bool normalize = 11;
  bool has_normalize() const;
  void clear_normalize();
  static const int kNormalizeFieldNumber = 11;
  bool normalize() const;
  void set_normalize(bool value);

  // optional float pca_noise_stddev = 10 [default = 0];
  bool has_pca_noise_stddev() const;
  void clear_pca_noise_stddev();
  static const int kPcaNoiseStddevFieldNumber = 10;
  float pca_noise_stddev() const;
  void set_pca_noise_stddev(float value);

  // optional int32 gpu_id = 12 [default = 0];
  bool has_gpu_id() const;
  void clear_gpu_id();
  static const int kGpuIdFieldNumber = 12;
  ::google::protobuf::int32 gpu_id() const;
  void set_gpu_id(::google::protobuf::int32 value);

  // optional float random_rotate_max_angle = 18 [default = 0];
  bool has_random_rotate_max_angle() const;
  void clear_random_rotate_max_angle();
  static const int kRandomRotateMaxAngleFieldNumber = 18;
  float random_rotate_max_angle() const;
  void set_random_rotate_max_angle(float value);

  // optional float min_scale = 19 [default = 0];
  bool has_min_scale() const;
  void clear_min_scale();
  static const int kMinScaleFieldNumber = 19;
  float min_scale() const;
  void set_min_scale(float value);

  // optional bool parallel_disk_access = 16 [default = false];
  bool has_parallel_disk_access() const;
  void clear_parallel_disk_access();
  static const int kParallelDiskAccessFieldNumber = 16;
  bool parallel_disk_access() const;
  void set_parallel_disk_access(bool value);

  // optional bool random_rotate_raw_image = 17 [default = false];
  bool has_random_rotate_raw_image() const;
  void clear_random_rotate_raw_image();
  static const int kRandomRotateRawImageFieldNumber = 17;
  bool random_rotate_raw_image() const;
  void set_random_rotate_raw_image(bool value);

  // optional bool avg10_full_image = 21;
  bool has_avg10_full_image() const;
  void clear_avg10_full_image();
  static const int kAvg10FullImageFieldNumber = 21;
  bool avg10_full_image() const;
  void set_avg10_full_image(bool value);

  // optional bool center_on_bbox = 24 [default = false];
  bool has_center_on_bbox() const;
  void clear_center_on_bbox();
  static const int kCenterOnBboxFieldNumber = 24;
  bool center_on_bbox() const;
  void set_center_on_bbox(bool value);

  // optional bool warp_bbox = 25 [default = false];
  bool has_warp_bbox() const;
  void clear_warp_bbox();
  static const int kWarpBboxFieldNumber = 25;
  bool warp_bbox() const;
  void set_warp_bbox(bool value);

  // optional .config.DataStreamConfig.DataType data_type = 4 [default = HDF5];
  bool has_data_type() const;
  void clear_data_type();
  static const int kDataTypeFieldNumber = 4;
  ::config::DataStreamConfig_DataType data_type() const;
  void set_data_type(::config::DataStreamConfig_DataType value);

  // optional int32 stride = 13 [default = 1];
  bool has_stride() const;
  void clear_stride();
  static const int kStrideFieldNumber = 13;
  ::google::protobuf::int32 stride() const;
  void set_stride(::google::protobuf::int32 value);

  // optional int32 num_colors = 15 [default = 3];
  bool has_num_colors() const;
  void clear_num_colors();
  static const int kNumColorsFieldNumber = 15;
  ::google::protobuf::int32 num_colors() const;
  void set_num_colors(::google::protobuf::int32 value);

  // optional float context_factor = 23 [default = 1];
  bool has_context_factor() const;
  void clear_context_factor();
  static const int kContextFactorFieldNumber = 23;
  float context_factor() const;
  void set_context_factor(float value);

  // @@protoc_insertion_point(class_scope:config.DataStreamConfig)
 private:
  void set_has_file_pattern();
  void clear_has_file_pattern();
  void set_has_layer_name();
  void clear_has_layer_name();
  void set_has_dataset_name();
  void clear_has_dataset_name();
  void set_has_data_type();
  void clear_has_data_type();
  void set_has_raw_image_size();
  void clear_has_raw_image_size();
  void set_has_image_size();
  void clear_has_image_size();
  void set_has_can_translate();
  void clear_has_can_translate();
  void set_has_can_flip();
  void clear_has_can_flip();
  void set_has_pixelwise_normalize();
  void clear_has_pixelwise_normalize();
  void set_has_pca_noise_stddev();
  void clear_has_pca_noise_stddev();
  void set_has_normalize();
  void clear_has_normalize();
  void set_has_gpu_id();
  void clear_has_gpu_id();
  void set_has_stride();
  void clear_has_stride();
  void set_has_mean_file();
  void clear_has_mean_file();
  void set_has_num_colors();
  void clear_has_num_colors();
  void set_has_parallel_disk_access();
  void clear_has_parallel_disk_access();
  void set_has_random_rotate_raw_image();
  void clear_has_random_rotate_raw_image();
  void set_has_random_rotate_max_angle();
  void clear_has_random_rotate_max_angle();
  void set_has_min_scale();
  void clear_has_min_scale();
  void set_has_noise_layer_name();
  void clear_has_noise_layer_name();
  void set_has_avg10_full_image();
  void clear_has_avg10_full_image();
  void set_has_bbox_file();
  void clear_has_bbox_file();
  void set_has_context_factor();
  void clear_has_context_factor();
  void set_has_center_on_bbox();
  void clear_has_center_on_bbox();
  void set_has_warp_bbox();
  void clear_has_warp_bbox();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr file_pattern_;
  ::google::protobuf::internal::ArenaStringPtr layer_name_;
  ::google::protobuf::internal::ArenaStringPtr dataset_name_;
  ::google::protobuf::internal::ArenaStringPtr mean_file_;
  ::google::protobuf::internal::ArenaStringPtr noise_layer_name_;
  ::google::protobuf::internal::ArenaStringPtr bbox_file_;
  ::google::protobuf::int32 raw_image_size_;
  ::google::protobuf::int32 image_size_;
  bool can_translate_;
  bool can_flip_;
  bool pixelwise_normalize_;
  bool normalize_;
  float pca_noise_stddev_;
  ::google::protobuf::int32 gpu_id_;
  float random_rotate_max_angle_;
  float min_scale_;
  bool parallel_disk_access_;
  bool random_rotate_raw_image_;
  bool avg10_full_image_;
  bool center_on_bbox_;
  bool warp_bbox_;
  int data_type_;
  ::google::protobuf::int32 stride_;
  ::google::protobuf::int32 num_colors_;
  float context_factor_;
  friend struct protobuf_convnet_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DatasetConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:config.DatasetConfig) */ {
 public:
  DatasetConfig();
  virtual ~DatasetConfig();

  DatasetConfig(const DatasetConfig& from);

  inline DatasetConfig& operator=(const DatasetConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DatasetConfig& default_instance();

  static inline const DatasetConfig* internal_default_instance() {
    return reinterpret_cast<const DatasetConfig*>(
               &_DatasetConfig_default_instance_);
  }

  void Swap(DatasetConfig* other);

  // implements Message ----------------------------------------------

  inline DatasetConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  DatasetConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DatasetConfig& from);
  void MergeFrom(const DatasetConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DatasetConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .config.DataStreamConfig data_config = 1;
  int data_config_size() const;
  void clear_data_config();
  static const int kDataConfigFieldNumber = 1;
  const ::config::DataStreamConfig& data_config(int index) const;
  ::config::DataStreamConfig* mutable_data_config(int index);
  ::config::DataStreamConfig* add_data_config();
  ::google::protobuf::RepeatedPtrField< ::config::DataStreamConfig >*
      mutable_data_config();
  const ::google::protobuf::RepeatedPtrField< ::config::DataStreamConfig >&
      data_config() const;

  // optional int32 chunk_size = 3 [default = 0];
  bool has_chunk_size() const;
  void clear_chunk_size();
  static const int kChunkSizeFieldNumber = 3;
  ::google::protobuf::int32 chunk_size() const;
  void set_chunk_size(::google::protobuf::int32 value);

  // optional int32 max_reuse_count = 4 [default = 0];
  bool has_max_reuse_count() const;
  void clear_max_reuse_count();
  static const int kMaxReuseCountFieldNumber = 4;
  ::google::protobuf::int32 max_reuse_count() const;
  void set_max_reuse_count(::google::protobuf::int32 value);

  // optional bool pipeline_loads = 5 [default = false];
  bool has_pipeline_loads() const;
  void clear_pipeline_loads();
  static const int kPipelineLoadsFieldNumber = 5;
  bool pipeline_loads() const;
  void set_pipeline_loads(bool value);

  // optional bool randomize_cpu = 6 [default = false];
  bool has_randomize_cpu() const;
  void clear_randomize_cpu();
  static const int kRandomizeCpuFieldNumber = 6;
  bool randomize_cpu() const;
  void set_randomize_cpu(bool value);

  // optional bool randomize_gpu = 7 [default = false];
  bool has_randomize_gpu() const;
  void clear_randomize_gpu();
  static const int kRandomizeGpuFieldNumber = 7;
  bool randomize_gpu() const;
  void set_randomize_gpu(bool value);

  // optional int32 max_dataset_size = 9 [default = 0];
  bool has_max_dataset_size() const;
  void clear_max_dataset_size();
  static const int kMaxDatasetSizeFieldNumber = 9;
  ::google::protobuf::int32 max_dataset_size() const;
  void set_max_dataset_size(::google::protobuf::int32 value);

  // optional int32 multiplicity = 10 [default = 1];
  bool has_multiplicity() const;
  void clear_multiplicity();
  static const int kMultiplicityFieldNumber = 10;
  ::google::protobuf::int32 multiplicity() const;
  void set_multiplicity(::google::protobuf::int32 value);

  // optional int32 batch_size = 2 [default = 1];
  bool has_batch_size() const;
  void clear_batch_size();
  static const int kBatchSizeFieldNumber = 2;
  ::google::protobuf::int32 batch_size() const;
  void set_batch_size(::google::protobuf::int32 value);

  // optional int32 random_access_chunk_size = 8 [default = 1];
  bool has_random_access_chunk_size() const;
  void clear_random_access_chunk_size();
  static const int kRandomAccessChunkSizeFieldNumber = 8;
  ::google::protobuf::int32 random_access_chunk_size() const;
  void set_random_access_chunk_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:config.DatasetConfig)
 private:
  void set_has_batch_size();
  void clear_has_batch_size();
  void set_has_chunk_size();
  void clear_has_chunk_size();
  void set_has_max_reuse_count();
  void clear_has_max_reuse_count();
  void set_has_pipeline_loads();
  void clear_has_pipeline_loads();
  void set_has_randomize_cpu();
  void clear_has_randomize_cpu();
  void set_has_randomize_gpu();
  void clear_has_randomize_gpu();
  void set_has_random_access_chunk_size();
  void clear_has_random_access_chunk_size();
  void set_has_max_dataset_size();
  void clear_has_max_dataset_size();
  void set_has_multiplicity();
  void clear_has_multiplicity();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::config::DataStreamConfig > data_config_;
  ::google::protobuf::int32 chunk_size_;
  ::google::protobuf::int32 max_reuse_count_;
  bool pipeline_loads_;
  bool randomize_cpu_;
  bool randomize_gpu_;
  ::google::protobuf::int32 max_dataset_size_;
  ::google::protobuf::int32 multiplicity_;
  ::google::protobuf::int32 batch_size_;
  ::google::protobuf::int32 random_access_chunk_size_;
  friend struct protobuf_convnet_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FeatureStreamConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:config.FeatureStreamConfig) */ {
 public:
  FeatureStreamConfig();
  virtual ~FeatureStreamConfig();

  FeatureStreamConfig(const FeatureStreamConfig& from);

  inline FeatureStreamConfig& operator=(const FeatureStreamConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FeatureStreamConfig& default_instance();

  static inline const FeatureStreamConfig* internal_default_instance() {
    return reinterpret_cast<const FeatureStreamConfig*>(
               &_FeatureStreamConfig_default_instance_);
  }

  void Swap(FeatureStreamConfig* other);

  // implements Message ----------------------------------------------

  inline FeatureStreamConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  FeatureStreamConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FeatureStreamConfig& from);
  void MergeFrom(const FeatureStreamConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FeatureStreamConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string layer = 1;
  bool has_layer() const;
  void clear_layer();
  static const int kLayerFieldNumber = 1;
  const ::std::string& layer() const;
  void set_layer(const ::std::string& value);
  #if LANG_CXX11
  void set_layer(::std::string&& value);
  #endif
  void set_layer(const char* value);
  void set_layer(const char* value, size_t size);
  ::std::string* mutable_layer();
  ::std::string* release_layer();
  void set_allocated_layer(::std::string* layer);

  // optional int32 average_batches = 2 [default = 1];
  bool has_average_batches() const;
  void clear_average_batches();
  static const int kAverageBatchesFieldNumber = 2;
  ::google::protobuf::int32 average_batches() const;
  void set_average_batches(::google::protobuf::int32 value);

  // optional int32 average_online = 3 [default = 1];
  bool has_average_online() const;
  void clear_average_online();
  static const int kAverageOnlineFieldNumber = 3;
  ::google::protobuf::int32 average_online() const;
  void set_average_online(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:config.FeatureStreamConfig)
 private:
  void set_has_layer();
  void clear_has_layer();
  void set_has_average_batches();
  void clear_has_average_batches();
  void set_has_average_online();
  void clear_has_average_online();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr layer_;
  ::google::protobuf::int32 average_batches_;
  ::google::protobuf::int32 average_online_;
  friend struct protobuf_convnet_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FeatureExtractorConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:config.FeatureExtractorConfig) */ {
 public:
  FeatureExtractorConfig();
  virtual ~FeatureExtractorConfig();

  FeatureExtractorConfig(const FeatureExtractorConfig& from);

  inline FeatureExtractorConfig& operator=(const FeatureExtractorConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FeatureExtractorConfig& default_instance();

  static inline const FeatureExtractorConfig* internal_default_instance() {
    return reinterpret_cast<const FeatureExtractorConfig*>(
               &_FeatureExtractorConfig_default_instance_);
  }

  void Swap(FeatureExtractorConfig* other);

  // implements Message ----------------------------------------------

  inline FeatureExtractorConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  FeatureExtractorConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FeatureExtractorConfig& from);
  void MergeFrom(const FeatureExtractorConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FeatureExtractorConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .config.FeatureStreamConfig feature = 2;
  int feature_size() const;
  void clear_feature();
  static const int kFeatureFieldNumber = 2;
  const ::config::FeatureStreamConfig& feature(int index) const;
  ::config::FeatureStreamConfig* mutable_feature(int index);
  ::config::FeatureStreamConfig* add_feature();
  ::google::protobuf::RepeatedPtrField< ::config::FeatureStreamConfig >*
      mutable_feature();
  const ::google::protobuf::RepeatedPtrField< ::config::FeatureStreamConfig >&
      feature() const;

  // required string output_file = 1;
  bool has_output_file() const;
  void clear_output_file();
  static const int kOutputFileFieldNumber = 1;
  const ::std::string& output_file() const;
  void set_output_file(const ::std::string& value);
  #if LANG_CXX11
  void set_output_file(::std::string&& value);
  #endif
  void set_output_file(const char* value);
  void set_output_file(const char* value, size_t size);
  ::std::string* mutable_output_file();
  ::std::string* release_output_file();
  void set_allocated_output_file(::std::string* output_file);

  // required .config.DatasetConfig input = 3;
  bool has_input() const;
  void clear_input();
  static const int kInputFieldNumber = 3;
  const ::config::DatasetConfig& input() const;
  ::config::DatasetConfig* mutable_input();
  ::config::DatasetConfig* release_input();
  void set_allocated_input(::config::DatasetConfig* input);

  // @@protoc_insertion_point(class_scope:config.FeatureExtractorConfig)
 private:
  void set_has_output_file();
  void clear_has_output_file();
  void set_has_input();
  void clear_has_input();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::config::FeatureStreamConfig > feature_;
  ::google::protobuf::internal::ArenaStringPtr output_file_;
  ::config::DatasetConfig* input_;
  friend struct protobuf_convnet_5fconfig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Layer

// required string name = 1;
inline bool Layer::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Layer::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Layer::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Layer::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Layer::name() const {
  // @@protoc_insertion_point(field_get:config.Layer.name)
  return name_.GetNoArena();
}
inline void Layer::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.Layer.name)
}
#if LANG_CXX11
inline void Layer::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.Layer.name)
}
#endif
inline void Layer::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.Layer.name)
}
inline void Layer::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.Layer.name)
}
inline ::std::string* Layer::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:config.Layer.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Layer::release_name() {
  // @@protoc_insertion_point(field_release:config.Layer.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Layer::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:config.Layer.name)
}

// optional int32 num_channels = 2;
inline bool Layer::has_num_channels() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Layer::set_has_num_channels() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Layer::clear_has_num_channels() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Layer::clear_num_channels() {
  num_channels_ = 0;
  clear_has_num_channels();
}
inline ::google::protobuf::int32 Layer::num_channels() const {
  // @@protoc_insertion_point(field_get:config.Layer.num_channels)
  return num_channels_;
}
inline void Layer::set_num_channels(::google::protobuf::int32 value) {
  set_has_num_channels();
  num_channels_ = value;
  // @@protoc_insertion_point(field_set:config.Layer.num_channels)
}

// optional int32 size = 3 [default = -1];
inline bool Layer::has_size() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Layer::set_has_size() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Layer::clear_has_size() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Layer::clear_size() {
  size_ = -1;
  clear_has_size();
}
inline ::google::protobuf::int32 Layer::size() const {
  // @@protoc_insertion_point(field_get:config.Layer.size)
  return size_;
}
inline void Layer::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:config.Layer.size)
}

// optional float dropprob = 4 [default = 0];
inline bool Layer::has_dropprob() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Layer::set_has_dropprob() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Layer::clear_has_dropprob() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Layer::clear_dropprob() {
  dropprob_ = 0;
  clear_has_dropprob();
}
inline float Layer::dropprob() const {
  // @@protoc_insertion_point(field_get:config.Layer.dropprob)
  return dropprob_;
}
inline void Layer::set_dropprob(float value) {
  set_has_dropprob();
  dropprob_ = value;
  // @@protoc_insertion_point(field_set:config.Layer.dropprob)
}

// optional bool is_input = 5 [default = false];
inline bool Layer::has_is_input() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Layer::set_has_is_input() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Layer::clear_has_is_input() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Layer::clear_is_input() {
  is_input_ = false;
  clear_has_is_input();
}
inline bool Layer::is_input() const {
  // @@protoc_insertion_point(field_get:config.Layer.is_input)
  return is_input_;
}
inline void Layer::set_is_input(bool value) {
  set_has_is_input();
  is_input_ = value;
  // @@protoc_insertion_point(field_set:config.Layer.is_input)
}

// optional .config.Layer.Activation activation = 6 [default = LINEAR];
inline bool Layer::has_activation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Layer::set_has_activation() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Layer::clear_has_activation() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Layer::clear_activation() {
  activation_ = 0;
  clear_has_activation();
}
inline ::config::Layer_Activation Layer::activation() const {
  // @@protoc_insertion_point(field_get:config.Layer.activation)
  return static_cast< ::config::Layer_Activation >(activation_);
}
inline void Layer::set_activation(::config::Layer_Activation value) {
  assert(::config::Layer_Activation_IsValid(value));
  set_has_activation();
  activation_ = value;
  // @@protoc_insertion_point(field_set:config.Layer.activation)
}

// optional bool is_spatial_output = 7 [default = false];
inline bool Layer::has_is_spatial_output() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Layer::set_has_is_spatial_output() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Layer::clear_has_is_spatial_output() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Layer::clear_is_spatial_output() {
  is_spatial_output_ = false;
  clear_has_is_spatial_output();
}
inline bool Layer::is_spatial_output() const {
  // @@protoc_insertion_point(field_get:config.Layer.is_spatial_output)
  return is_spatial_output_;
}
inline void Layer::set_is_spatial_output(bool value) {
  set_has_is_spatial_output();
  is_spatial_output_ = value;
  // @@protoc_insertion_point(field_set:config.Layer.is_spatial_output)
}

// optional bool is_classifier_output = 8 [default = false];
inline bool Layer::has_is_classifier_output() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Layer::set_has_is_classifier_output() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Layer::clear_has_is_classifier_output() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Layer::clear_is_classifier_output() {
  is_classifier_output_ = false;
  clear_has_is_classifier_output();
}
inline bool Layer::is_classifier_output() const {
  // @@protoc_insertion_point(field_get:config.Layer.is_classifier_output)
  return is_classifier_output_;
}
inline void Layer::set_is_classifier_output(bool value) {
  set_has_is_classifier_output();
  is_classifier_output_ = value;
  // @@protoc_insertion_point(field_set:config.Layer.is_classifier_output)
}

// optional bool display = 9 [default = false];
inline bool Layer::has_display() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Layer::set_has_display() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Layer::clear_has_display() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Layer::clear_display() {
  display_ = false;
  clear_has_display();
}
inline bool Layer::display() const {
  // @@protoc_insertion_point(field_get:config.Layer.display)
  return display_;
}
inline void Layer::set_display(bool value) {
  set_has_display();
  display_ = value;
  // @@protoc_insertion_point(field_set:config.Layer.display)
}

// optional bool is_output = 10 [default = false];
inline bool Layer::has_is_output() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Layer::set_has_is_output() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Layer::clear_has_is_output() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Layer::clear_is_output() {
  is_output_ = false;
  clear_has_is_output();
}
inline bool Layer::is_output() const {
  // @@protoc_insertion_point(field_get:config.Layer.is_output)
  return is_output_;
}
inline void Layer::set_is_output(bool value) {
  set_has_is_output();
  is_output_ = value;
  // @@protoc_insertion_point(field_set:config.Layer.is_output)
}

// optional bool gaussian_dropout = 11 [default = false];
inline bool Layer::has_gaussian_dropout() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Layer::set_has_gaussian_dropout() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Layer::clear_has_gaussian_dropout() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Layer::clear_gaussian_dropout() {
  gaussian_dropout_ = false;
  clear_has_gaussian_dropout();
}
inline bool Layer::gaussian_dropout() const {
  // @@protoc_insertion_point(field_get:config.Layer.gaussian_dropout)
  return gaussian_dropout_;
}
inline void Layer::set_gaussian_dropout(bool value) {
  set_has_gaussian_dropout();
  gaussian_dropout_ = value;
  // @@protoc_insertion_point(field_set:config.Layer.gaussian_dropout)
}

// optional float max_act_gaussian_dropout = 12 [default = -1];
inline bool Layer::has_max_act_gaussian_dropout() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Layer::set_has_max_act_gaussian_dropout() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Layer::clear_has_max_act_gaussian_dropout() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Layer::clear_max_act_gaussian_dropout() {
  max_act_gaussian_dropout_ = -1;
  clear_has_max_act_gaussian_dropout();
}
inline float Layer::max_act_gaussian_dropout() const {
  // @@protoc_insertion_point(field_get:config.Layer.max_act_gaussian_dropout)
  return max_act_gaussian_dropout_;
}
inline void Layer::set_max_act_gaussian_dropout(float value) {
  set_has_max_act_gaussian_dropout();
  max_act_gaussian_dropout_ = value;
  // @@protoc_insertion_point(field_set:config.Layer.max_act_gaussian_dropout)
}

// optional int32 gpu_id = 13 [default = 0];
inline bool Layer::has_gpu_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Layer::set_has_gpu_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Layer::clear_has_gpu_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Layer::clear_gpu_id() {
  gpu_id_ = 0;
  clear_has_gpu_id();
}
inline ::google::protobuf::int32 Layer::gpu_id() const {
  // @@protoc_insertion_point(field_get:config.Layer.gpu_id)
  return gpu_id_;
}
inline void Layer::set_gpu_id(::google::protobuf::int32 value) {
  set_has_gpu_id();
  gpu_id_ = value;
  // @@protoc_insertion_point(field_set:config.Layer.gpu_id)
}

// optional float hinge_margin = 14 [default = 0];
inline bool Layer::has_hinge_margin() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Layer::set_has_hinge_margin() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Layer::clear_has_hinge_margin() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Layer::clear_hinge_margin() {
  hinge_margin_ = 0;
  clear_has_hinge_margin();
}
inline float Layer::hinge_margin() const {
  // @@protoc_insertion_point(field_get:config.Layer.hinge_margin)
  return hinge_margin_;
}
inline void Layer::set_hinge_margin(float value) {
  set_has_hinge_margin();
  hinge_margin_ = value;
  // @@protoc_insertion_point(field_set:config.Layer.hinge_margin)
}

// -------------------------------------------------------------------

// Optimizer

// optional .config.Optimizer.OptimizerType optimizer_type = 1 [default = STOCHASTIC_GRADIENT_DESCENT];
inline bool Optimizer::has_optimizer_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Optimizer::set_has_optimizer_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Optimizer::clear_has_optimizer_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Optimizer::clear_optimizer_type() {
  optimizer_type_ = 0;
  clear_has_optimizer_type();
}
inline ::config::Optimizer_OptimizerType Optimizer::optimizer_type() const {
  // @@protoc_insertion_point(field_get:config.Optimizer.optimizer_type)
  return static_cast< ::config::Optimizer_OptimizerType >(optimizer_type_);
}
inline void Optimizer::set_optimizer_type(::config::Optimizer_OptimizerType value) {
  assert(::config::Optimizer_OptimizerType_IsValid(value));
  set_has_optimizer_type();
  optimizer_type_ = value;
  // @@protoc_insertion_point(field_set:config.Optimizer.optimizer_type)
}

// optional float epsilon = 2 [default = 0];
inline bool Optimizer::has_epsilon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Optimizer::set_has_epsilon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Optimizer::clear_has_epsilon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Optimizer::clear_epsilon() {
  epsilon_ = 0;
  clear_has_epsilon();
}
inline float Optimizer::epsilon() const {
  // @@protoc_insertion_point(field_get:config.Optimizer.epsilon)
  return epsilon_;
}
inline void Optimizer::set_epsilon(float value) {
  set_has_epsilon();
  epsilon_ = value;
  // @@protoc_insertion_point(field_set:config.Optimizer.epsilon)
}

// optional int32 epsilon_decay_timescale = 3 [default = 0];
inline bool Optimizer::has_epsilon_decay_timescale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Optimizer::set_has_epsilon_decay_timescale() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Optimizer::clear_has_epsilon_decay_timescale() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Optimizer::clear_epsilon_decay_timescale() {
  epsilon_decay_timescale_ = 0;
  clear_has_epsilon_decay_timescale();
}
inline ::google::protobuf::int32 Optimizer::epsilon_decay_timescale() const {
  // @@protoc_insertion_point(field_get:config.Optimizer.epsilon_decay_timescale)
  return epsilon_decay_timescale_;
}
inline void Optimizer::set_epsilon_decay_timescale(::google::protobuf::int32 value) {
  set_has_epsilon_decay_timescale();
  epsilon_decay_timescale_ = value;
  // @@protoc_insertion_point(field_set:config.Optimizer.epsilon_decay_timescale)
}

// optional float initial_momentum = 4 [default = 0];
inline bool Optimizer::has_initial_momentum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Optimizer::set_has_initial_momentum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Optimizer::clear_has_initial_momentum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Optimizer::clear_initial_momentum() {
  initial_momentum_ = 0;
  clear_has_initial_momentum();
}
inline float Optimizer::initial_momentum() const {
  // @@protoc_insertion_point(field_get:config.Optimizer.initial_momentum)
  return initial_momentum_;
}
inline void Optimizer::set_initial_momentum(float value) {
  set_has_initial_momentum();
  initial_momentum_ = value;
  // @@protoc_insertion_point(field_set:config.Optimizer.initial_momentum)
}

// optional float final_momentum = 5 [default = 0];
inline bool Optimizer::has_final_momentum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Optimizer::set_has_final_momentum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Optimizer::clear_has_final_momentum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Optimizer::clear_final_momentum() {
  final_momentum_ = 0;
  clear_has_final_momentum();
}
inline float Optimizer::final_momentum() const {
  // @@protoc_insertion_point(field_get:config.Optimizer.final_momentum)
  return final_momentum_;
}
inline void Optimizer::set_final_momentum(float value) {
  set_has_final_momentum();
  final_momentum_ = value;
  // @@protoc_insertion_point(field_set:config.Optimizer.final_momentum)
}

// optional int32 momentum_transition_timescale = 6 [default = 0];
inline bool Optimizer::has_momentum_transition_timescale() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Optimizer::set_has_momentum_transition_timescale() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Optimizer::clear_has_momentum_transition_timescale() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Optimizer::clear_momentum_transition_timescale() {
  momentum_transition_timescale_ = 0;
  clear_has_momentum_transition_timescale();
}
inline ::google::protobuf::int32 Optimizer::momentum_transition_timescale() const {
  // @@protoc_insertion_point(field_get:config.Optimizer.momentum_transition_timescale)
  return momentum_transition_timescale_;
}
inline void Optimizer::set_momentum_transition_timescale(::google::protobuf::int32 value) {
  set_has_momentum_transition_timescale();
  momentum_transition_timescale_ = value;
  // @@protoc_insertion_point(field_set:config.Optimizer.momentum_transition_timescale)
}

// optional float l2_decay = 7 [default = 0];
inline bool Optimizer::has_l2_decay() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Optimizer::set_has_l2_decay() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Optimizer::clear_has_l2_decay() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Optimizer::clear_l2_decay() {
  l2_decay_ = 0;
  clear_has_l2_decay();
}
inline float Optimizer::l2_decay() const {
  // @@protoc_insertion_point(field_get:config.Optimizer.l2_decay)
  return l2_decay_;
}
inline void Optimizer::set_l2_decay(float value) {
  set_has_l2_decay();
  l2_decay_ = value;
  // @@protoc_insertion_point(field_set:config.Optimizer.l2_decay)
}

// optional float weight_norm_limit = 8 [default = 0];
inline bool Optimizer::has_weight_norm_limit() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Optimizer::set_has_weight_norm_limit() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Optimizer::clear_has_weight_norm_limit() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Optimizer::clear_weight_norm_limit() {
  weight_norm_limit_ = 0;
  clear_has_weight_norm_limit();
}
inline float Optimizer::weight_norm_limit() const {
  // @@protoc_insertion_point(field_get:config.Optimizer.weight_norm_limit)
  return weight_norm_limit_;
}
inline void Optimizer::set_weight_norm_limit(float value) {
  set_has_weight_norm_limit();
  weight_norm_limit_ = value;
  // @@protoc_insertion_point(field_set:config.Optimizer.weight_norm_limit)
}

// optional float weight_norm_constraint = 9 [default = 0];
inline bool Optimizer::has_weight_norm_constraint() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Optimizer::set_has_weight_norm_constraint() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Optimizer::clear_has_weight_norm_constraint() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Optimizer::clear_weight_norm_constraint() {
  weight_norm_constraint_ = 0;
  clear_has_weight_norm_constraint();
}
inline float Optimizer::weight_norm_constraint() const {
  // @@protoc_insertion_point(field_get:config.Optimizer.weight_norm_constraint)
  return weight_norm_constraint_;
}
inline void Optimizer::set_weight_norm_constraint(float value) {
  set_has_weight_norm_constraint();
  weight_norm_constraint_ = value;
  // @@protoc_insertion_point(field_set:config.Optimizer.weight_norm_constraint)
}

// optional .config.Optimizer.Decay epsilon_decay = 10 [default = NONE];
inline bool Optimizer::has_epsilon_decay() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Optimizer::set_has_epsilon_decay() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Optimizer::clear_has_epsilon_decay() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Optimizer::clear_epsilon_decay() {
  epsilon_decay_ = 0;
  clear_has_epsilon_decay();
}
inline ::config::Optimizer_Decay Optimizer::epsilon_decay() const {
  // @@protoc_insertion_point(field_get:config.Optimizer.epsilon_decay)
  return static_cast< ::config::Optimizer_Decay >(epsilon_decay_);
}
inline void Optimizer::set_epsilon_decay(::config::Optimizer_Decay value) {
  assert(::config::Optimizer_Decay_IsValid(value));
  set_has_epsilon_decay();
  epsilon_decay_ = value;
  // @@protoc_insertion_point(field_set:config.Optimizer.epsilon_decay)
}

// optional float minimum_epsilon = 11 [default = 0];
inline bool Optimizer::has_minimum_epsilon() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Optimizer::set_has_minimum_epsilon() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Optimizer::clear_has_minimum_epsilon() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Optimizer::clear_minimum_epsilon() {
  minimum_epsilon_ = 0;
  clear_has_minimum_epsilon();
}
inline float Optimizer::minimum_epsilon() const {
  // @@protoc_insertion_point(field_get:config.Optimizer.minimum_epsilon)
  return minimum_epsilon_;
}
inline void Optimizer::set_minimum_epsilon(float value) {
  set_has_minimum_epsilon();
  minimum_epsilon_ = value;
  // @@protoc_insertion_point(field_set:config.Optimizer.minimum_epsilon)
}

// optional float gradient_clip = 12 [default = -1];
inline bool Optimizer::has_gradient_clip() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Optimizer::set_has_gradient_clip() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Optimizer::clear_has_gradient_clip() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Optimizer::clear_gradient_clip() {
  gradient_clip_ = -1;
  clear_has_gradient_clip();
}
inline float Optimizer::gradient_clip() const {
  // @@protoc_insertion_point(field_get:config.Optimizer.gradient_clip)
  return gradient_clip_;
}
inline void Optimizer::set_gradient_clip(float value) {
  set_has_gradient_clip();
  gradient_clip_ = value;
  // @@protoc_insertion_point(field_set:config.Optimizer.gradient_clip)
}

// optional int32 lbfgs_memory = 13 [default = 0];
inline bool Optimizer::has_lbfgs_memory() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Optimizer::set_has_lbfgs_memory() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Optimizer::clear_has_lbfgs_memory() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Optimizer::clear_lbfgs_memory() {
  lbfgs_memory_ = 0;
  clear_has_lbfgs_memory();
}
inline ::google::protobuf::int32 Optimizer::lbfgs_memory() const {
  // @@protoc_insertion_point(field_get:config.Optimizer.lbfgs_memory)
  return lbfgs_memory_;
}
inline void Optimizer::set_lbfgs_memory(::google::protobuf::int32 value) {
  set_has_lbfgs_memory();
  lbfgs_memory_ = value;
  // @@protoc_insertion_point(field_set:config.Optimizer.lbfgs_memory)
}

// optional int32 start_optimization_after = 14 [default = 0];
inline bool Optimizer::has_start_optimization_after() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Optimizer::set_has_start_optimization_after() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Optimizer::clear_has_start_optimization_after() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Optimizer::clear_start_optimization_after() {
  start_optimization_after_ = 0;
  clear_has_start_optimization_after();
}
inline ::google::protobuf::int32 Optimizer::start_optimization_after() const {
  // @@protoc_insertion_point(field_get:config.Optimizer.start_optimization_after)
  return start_optimization_after_;
}
inline void Optimizer::set_start_optimization_after(::google::protobuf::int32 value) {
  set_has_start_optimization_after();
  start_optimization_after_ = value;
  // @@protoc_insertion_point(field_set:config.Optimizer.start_optimization_after)
}

// -------------------------------------------------------------------

// Edge

// required string source = 1;
inline bool Edge::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Edge::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Edge::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Edge::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
inline const ::std::string& Edge::source() const {
  // @@protoc_insertion_point(field_get:config.Edge.source)
  return source_.GetNoArena();
}
inline void Edge::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.Edge.source)
}
#if LANG_CXX11
inline void Edge::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.Edge.source)
}
#endif
inline void Edge::set_source(const char* value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.Edge.source)
}
inline void Edge::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.Edge.source)
}
inline ::std::string* Edge::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:config.Edge.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Edge::release_source() {
  // @@protoc_insertion_point(field_release:config.Edge.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Edge::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:config.Edge.source)
}

// required string dest = 2;
inline bool Edge::has_dest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Edge::set_has_dest() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Edge::clear_has_dest() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Edge::clear_dest() {
  dest_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dest();
}
inline const ::std::string& Edge::dest() const {
  // @@protoc_insertion_point(field_get:config.Edge.dest)
  return dest_.GetNoArena();
}
inline void Edge::set_dest(const ::std::string& value) {
  set_has_dest();
  dest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.Edge.dest)
}
#if LANG_CXX11
inline void Edge::set_dest(::std::string&& value) {
  set_has_dest();
  dest_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.Edge.dest)
}
#endif
inline void Edge::set_dest(const char* value) {
  set_has_dest();
  dest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.Edge.dest)
}
inline void Edge::set_dest(const char* value, size_t size) {
  set_has_dest();
  dest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.Edge.dest)
}
inline ::std::string* Edge::mutable_dest() {
  set_has_dest();
  // @@protoc_insertion_point(field_mutable:config.Edge.dest)
  return dest_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Edge::release_dest() {
  // @@protoc_insertion_point(field_release:config.Edge.dest)
  clear_has_dest();
  return dest_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Edge::set_allocated_dest(::std::string* dest) {
  if (dest != NULL) {
    set_has_dest();
  } else {
    clear_has_dest();
  }
  dest_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dest);
  // @@protoc_insertion_point(field_set_allocated:config.Edge.dest)
}

// optional .config.Edge.EdgeType edge_type = 3 [default = FC];
inline bool Edge::has_edge_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Edge::set_has_edge_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Edge::clear_has_edge_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Edge::clear_edge_type() {
  edge_type_ = 0;
  clear_has_edge_type();
}
inline ::config::Edge_EdgeType Edge::edge_type() const {
  // @@protoc_insertion_point(field_get:config.Edge.edge_type)
  return static_cast< ::config::Edge_EdgeType >(edge_type_);
}
inline void Edge::set_edge_type(::config::Edge_EdgeType value) {
  assert(::config::Edge_EdgeType_IsValid(value));
  set_has_edge_type();
  edge_type_ = value;
  // @@protoc_insertion_point(field_set:config.Edge.edge_type)
}

// optional int32 kernel_size = 4 [default = -1];
inline bool Edge::has_kernel_size() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Edge::set_has_kernel_size() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Edge::clear_has_kernel_size() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Edge::clear_kernel_size() {
  kernel_size_ = -1;
  clear_has_kernel_size();
}
inline ::google::protobuf::int32 Edge::kernel_size() const {
  // @@protoc_insertion_point(field_get:config.Edge.kernel_size)
  return kernel_size_;
}
inline void Edge::set_kernel_size(::google::protobuf::int32 value) {
  set_has_kernel_size();
  kernel_size_ = value;
  // @@protoc_insertion_point(field_set:config.Edge.kernel_size)
}

// optional int32 stride = 5 [default = 1];
inline bool Edge::has_stride() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Edge::set_has_stride() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Edge::clear_has_stride() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Edge::clear_stride() {
  stride_ = 1;
  clear_has_stride();
}
inline ::google::protobuf::int32 Edge::stride() const {
  // @@protoc_insertion_point(field_get:config.Edge.stride)
  return stride_;
}
inline void Edge::set_stride(::google::protobuf::int32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:config.Edge.stride)
}

// optional int32 padding = 6 [default = 0];
inline bool Edge::has_padding() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Edge::set_has_padding() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Edge::clear_has_padding() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Edge::clear_padding() {
  padding_ = 0;
  clear_has_padding();
}
inline ::google::protobuf::int32 Edge::padding() const {
  // @@protoc_insertion_point(field_get:config.Edge.padding)
  return padding_;
}
inline void Edge::set_padding(::google::protobuf::int32 value) {
  set_has_padding();
  padding_ = value;
  // @@protoc_insertion_point(field_set:config.Edge.padding)
}

// optional .config.Edge.Initialization initialization = 7 [default = DENSE_GAUSSIAN_SQRT_FAN_IN];
inline bool Edge::has_initialization() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Edge::set_has_initialization() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Edge::clear_has_initialization() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Edge::clear_initialization() {
  initialization_ = 3;
  clear_has_initialization();
}
inline ::config::Edge_Initialization Edge::initialization() const {
  // @@protoc_insertion_point(field_get:config.Edge.initialization)
  return static_cast< ::config::Edge_Initialization >(initialization_);
}
inline void Edge::set_initialization(::config::Edge_Initialization value) {
  assert(::config::Edge_Initialization_IsValid(value));
  set_has_initialization();
  initialization_ = value;
  // @@protoc_insertion_point(field_set:config.Edge.initialization)
}

// optional float init_wt = 8 [default = 1];
inline bool Edge::has_init_wt() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Edge::set_has_init_wt() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Edge::clear_has_init_wt() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Edge::clear_init_wt() {
  init_wt_ = 1;
  clear_has_init_wt();
}
inline float Edge::init_wt() const {
  // @@protoc_insertion_point(field_get:config.Edge.init_wt)
  return init_wt_;
}
inline void Edge::set_init_wt(float value) {
  set_has_init_wt();
  init_wt_ = value;
  // @@protoc_insertion_point(field_set:config.Edge.init_wt)
}

// optional float init_bias = 9 [default = 0];
inline bool Edge::has_init_bias() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Edge::set_has_init_bias() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Edge::clear_has_init_bias() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Edge::clear_init_bias() {
  init_bias_ = 0;
  clear_has_init_bias();
}
inline float Edge::init_bias() const {
  // @@protoc_insertion_point(field_get:config.Edge.init_bias)
  return init_bias_;
}
inline void Edge::set_init_bias(float value) {
  set_has_init_bias();
  init_bias_ = value;
  // @@protoc_insertion_point(field_set:config.Edge.init_bias)
}

// optional .config.Optimizer weight_optimizer = 10;
inline bool Edge::has_weight_optimizer() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Edge::set_has_weight_optimizer() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Edge::clear_has_weight_optimizer() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Edge::clear_weight_optimizer() {
  if (weight_optimizer_ != NULL) weight_optimizer_->::config::Optimizer::Clear();
  clear_has_weight_optimizer();
}
inline const ::config::Optimizer& Edge::weight_optimizer() const {
  // @@protoc_insertion_point(field_get:config.Edge.weight_optimizer)
  return weight_optimizer_ != NULL ? *weight_optimizer_
                         : *::config::Optimizer::internal_default_instance();
}
inline ::config::Optimizer* Edge::mutable_weight_optimizer() {
  set_has_weight_optimizer();
  if (weight_optimizer_ == NULL) {
    weight_optimizer_ = new ::config::Optimizer;
  }
  // @@protoc_insertion_point(field_mutable:config.Edge.weight_optimizer)
  return weight_optimizer_;
}
inline ::config::Optimizer* Edge::release_weight_optimizer() {
  // @@protoc_insertion_point(field_release:config.Edge.weight_optimizer)
  clear_has_weight_optimizer();
  ::config::Optimizer* temp = weight_optimizer_;
  weight_optimizer_ = NULL;
  return temp;
}
inline void Edge::set_allocated_weight_optimizer(::config::Optimizer* weight_optimizer) {
  delete weight_optimizer_;
  weight_optimizer_ = weight_optimizer;
  if (weight_optimizer) {
    set_has_weight_optimizer();
  } else {
    clear_has_weight_optimizer();
  }
  // @@protoc_insertion_point(field_set_allocated:config.Edge.weight_optimizer)
}

// optional .config.Optimizer bias_optimizer = 11;
inline bool Edge::has_bias_optimizer() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Edge::set_has_bias_optimizer() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Edge::clear_has_bias_optimizer() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Edge::clear_bias_optimizer() {
  if (bias_optimizer_ != NULL) bias_optimizer_->::config::Optimizer::Clear();
  clear_has_bias_optimizer();
}
inline const ::config::Optimizer& Edge::bias_optimizer() const {
  // @@protoc_insertion_point(field_get:config.Edge.bias_optimizer)
  return bias_optimizer_ != NULL ? *bias_optimizer_
                         : *::config::Optimizer::internal_default_instance();
}
inline ::config::Optimizer* Edge::mutable_bias_optimizer() {
  set_has_bias_optimizer();
  if (bias_optimizer_ == NULL) {
    bias_optimizer_ = new ::config::Optimizer;
  }
  // @@protoc_insertion_point(field_mutable:config.Edge.bias_optimizer)
  return bias_optimizer_;
}
inline ::config::Optimizer* Edge::release_bias_optimizer() {
  // @@protoc_insertion_point(field_release:config.Edge.bias_optimizer)
  clear_has_bias_optimizer();
  ::config::Optimizer* temp = bias_optimizer_;
  bias_optimizer_ = NULL;
  return temp;
}
inline void Edge::set_allocated_bias_optimizer(::config::Optimizer* bias_optimizer) {
  delete bias_optimizer_;
  bias_optimizer_ = bias_optimizer;
  if (bias_optimizer) {
    set_has_bias_optimizer();
  } else {
    clear_has_bias_optimizer();
  }
  // @@protoc_insertion_point(field_set_allocated:config.Edge.bias_optimizer)
}

// optional bool shared_bias = 12 [default = false];
inline bool Edge::has_shared_bias() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Edge::set_has_shared_bias() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Edge::clear_has_shared_bias() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Edge::clear_shared_bias() {
  shared_bias_ = false;
  clear_has_shared_bias();
}
inline bool Edge::shared_bias() const {
  // @@protoc_insertion_point(field_get:config.Edge.shared_bias)
  return shared_bias_;
}
inline void Edge::set_shared_bias(bool value) {
  set_has_shared_bias();
  shared_bias_ = value;
  // @@protoc_insertion_point(field_set:config.Edge.shared_bias)
}

// optional bool block_backprop = 13 [default = false];
inline bool Edge::has_block_backprop() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Edge::set_has_block_backprop() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Edge::clear_has_block_backprop() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Edge::clear_block_backprop() {
  block_backprop_ = false;
  clear_has_block_backprop();
}
inline bool Edge::block_backprop() const {
  // @@protoc_insertion_point(field_get:config.Edge.block_backprop)
  return block_backprop_;
}
inline void Edge::set_block_backprop(bool value) {
  set_has_block_backprop();
  block_backprop_ = value;
  // @@protoc_insertion_point(field_set:config.Edge.block_backprop)
}

// optional string tied_to = 14;
inline bool Edge::has_tied_to() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Edge::set_has_tied_to() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Edge::clear_has_tied_to() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Edge::clear_tied_to() {
  tied_to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tied_to();
}
inline const ::std::string& Edge::tied_to() const {
  // @@protoc_insertion_point(field_get:config.Edge.tied_to)
  return tied_to_.GetNoArena();
}
inline void Edge::set_tied_to(const ::std::string& value) {
  set_has_tied_to();
  tied_to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.Edge.tied_to)
}
#if LANG_CXX11
inline void Edge::set_tied_to(::std::string&& value) {
  set_has_tied_to();
  tied_to_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.Edge.tied_to)
}
#endif
inline void Edge::set_tied_to(const char* value) {
  set_has_tied_to();
  tied_to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.Edge.tied_to)
}
inline void Edge::set_tied_to(const char* value, size_t size) {
  set_has_tied_to();
  tied_to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.Edge.tied_to)
}
inline ::std::string* Edge::mutable_tied_to() {
  set_has_tied_to();
  // @@protoc_insertion_point(field_mutable:config.Edge.tied_to)
  return tied_to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Edge::release_tied_to() {
  // @@protoc_insertion_point(field_release:config.Edge.tied_to)
  clear_has_tied_to();
  return tied_to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Edge::set_allocated_tied_to(::std::string* tied_to) {
  if (tied_to != NULL) {
    set_has_tied_to();
  } else {
    clear_has_tied_to();
  }
  tied_to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tied_to);
  // @@protoc_insertion_point(field_set_allocated:config.Edge.tied_to)
}

// optional bool has_no_bias = 15 [default = false];
inline bool Edge::has_has_no_bias() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Edge::set_has_has_no_bias() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Edge::clear_has_has_no_bias() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Edge::clear_has_no_bias() {
  has_no_bias_ = false;
  clear_has_has_no_bias();
}
inline bool Edge::has_no_bias() const {
  // @@protoc_insertion_point(field_get:config.Edge.has_no_bias)
  return has_no_bias_;
}
inline void Edge::set_has_no_bias(bool value) {
  set_has_has_no_bias();
  has_no_bias_ = value;
  // @@protoc_insertion_point(field_set:config.Edge.has_no_bias)
}

// optional float scale_gradients = 16 [default = 1];
inline bool Edge::has_scale_gradients() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Edge::set_has_scale_gradients() {
  _has_bits_[0] |= 0x02000000u;
}
inline void Edge::clear_has_scale_gradients() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void Edge::clear_scale_gradients() {
  scale_gradients_ = 1;
  clear_has_scale_gradients();
}
inline float Edge::scale_gradients() const {
  // @@protoc_insertion_point(field_get:config.Edge.scale_gradients)
  return scale_gradients_;
}
inline void Edge::set_scale_gradients(float value) {
  set_has_scale_gradients();
  scale_gradients_ = value;
  // @@protoc_insertion_point(field_set:config.Edge.scale_gradients)
}

// optional int32 partial_sum = 17 [default = 0];
inline bool Edge::has_partial_sum() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Edge::set_has_partial_sum() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Edge::clear_has_partial_sum() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Edge::clear_partial_sum() {
  partial_sum_ = 0;
  clear_has_partial_sum();
}
inline ::google::protobuf::int32 Edge::partial_sum() const {
  // @@protoc_insertion_point(field_get:config.Edge.partial_sum)
  return partial_sum_;
}
inline void Edge::set_partial_sum(::google::protobuf::int32 value) {
  set_has_partial_sum();
  partial_sum_ = value;
  // @@protoc_insertion_point(field_set:config.Edge.partial_sum)
}

// optional int32 sample_factor = 18 [default = 1];
inline bool Edge::has_sample_factor() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void Edge::set_has_sample_factor() {
  _has_bits_[0] |= 0x04000000u;
}
inline void Edge::clear_has_sample_factor() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void Edge::clear_sample_factor() {
  sample_factor_ = 1;
  clear_has_sample_factor();
}
inline ::google::protobuf::int32 Edge::sample_factor() const {
  // @@protoc_insertion_point(field_get:config.Edge.sample_factor)
  return sample_factor_;
}
inline void Edge::set_sample_factor(::google::protobuf::int32 value) {
  set_has_sample_factor();
  sample_factor_ = value;
  // @@protoc_insertion_point(field_set:config.Edge.sample_factor)
}

// optional bool response_norm_in_blocks = 19 [default = false];
inline bool Edge::has_response_norm_in_blocks() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Edge::set_has_response_norm_in_blocks() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Edge::clear_has_response_norm_in_blocks() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Edge::clear_response_norm_in_blocks() {
  response_norm_in_blocks_ = false;
  clear_has_response_norm_in_blocks();
}
inline bool Edge::response_norm_in_blocks() const {
  // @@protoc_insertion_point(field_get:config.Edge.response_norm_in_blocks)
  return response_norm_in_blocks_;
}
inline void Edge::set_response_norm_in_blocks(bool value) {
  set_has_response_norm_in_blocks();
  response_norm_in_blocks_ = value;
  // @@protoc_insertion_point(field_set:config.Edge.response_norm_in_blocks)
}

// optional float add_scale = 20 [default = 0];
inline bool Edge::has_add_scale() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Edge::set_has_add_scale() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Edge::clear_has_add_scale() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Edge::clear_add_scale() {
  add_scale_ = 0;
  clear_has_add_scale();
}
inline float Edge::add_scale() const {
  // @@protoc_insertion_point(field_get:config.Edge.add_scale)
  return add_scale_;
}
inline void Edge::set_add_scale(float value) {
  set_has_add_scale();
  add_scale_ = value;
  // @@protoc_insertion_point(field_set:config.Edge.add_scale)
}

// optional float pow_scale = 21 [default = 0];
inline bool Edge::has_pow_scale() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Edge::set_has_pow_scale() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Edge::clear_has_pow_scale() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Edge::clear_pow_scale() {
  pow_scale_ = 0;
  clear_has_pow_scale();
}
inline float Edge::pow_scale() const {
  // @@protoc_insertion_point(field_get:config.Edge.pow_scale)
  return pow_scale_;
}
inline void Edge::set_pow_scale(float value) {
  set_has_pow_scale();
  pow_scale_ = value;
  // @@protoc_insertion_point(field_set:config.Edge.pow_scale)
}

// optional float frac_of_filters_response_norm = 22 [default = 0];
inline bool Edge::has_frac_of_filters_response_norm() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Edge::set_has_frac_of_filters_response_norm() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Edge::clear_has_frac_of_filters_response_norm() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Edge::clear_frac_of_filters_response_norm() {
  frac_of_filters_response_norm_ = 0;
  clear_has_frac_of_filters_response_norm();
}
inline float Edge::frac_of_filters_response_norm() const {
  // @@protoc_insertion_point(field_get:config.Edge.frac_of_filters_response_norm)
  return frac_of_filters_response_norm_;
}
inline void Edge::set_frac_of_filters_response_norm(float value) {
  set_has_frac_of_filters_response_norm();
  frac_of_filters_response_norm_ = value;
  // @@protoc_insertion_point(field_set:config.Edge.frac_of_filters_response_norm)
}

// optional int32 polyak_queue_size = 23 [default = 0];
inline bool Edge::has_polyak_queue_size() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Edge::set_has_polyak_queue_size() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Edge::clear_has_polyak_queue_size() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Edge::clear_polyak_queue_size() {
  polyak_queue_size_ = 0;
  clear_has_polyak_queue_size();
}
inline ::google::protobuf::int32 Edge::polyak_queue_size() const {
  // @@protoc_insertion_point(field_get:config.Edge.polyak_queue_size)
  return polyak_queue_size_;
}
inline void Edge::set_polyak_queue_size(::google::protobuf::int32 value) {
  set_has_polyak_queue_size();
  polyak_queue_size_ = value;
  // @@protoc_insertion_point(field_set:config.Edge.polyak_queue_size)
}

// optional int32 gpu_id = 24 [default = 0];
inline bool Edge::has_gpu_id() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Edge::set_has_gpu_id() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Edge::clear_has_gpu_id() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Edge::clear_gpu_id() {
  gpu_id_ = 0;
  clear_has_gpu_id();
}
inline ::google::protobuf::int32 Edge::gpu_id() const {
  // @@protoc_insertion_point(field_get:config.Edge.gpu_id)
  return gpu_id_;
}
inline void Edge::set_gpu_id(::google::protobuf::int32 value) {
  set_has_gpu_id();
  gpu_id_ = value;
  // @@protoc_insertion_point(field_set:config.Edge.gpu_id)
}

// optional string pretrained_model = 25;
inline bool Edge::has_pretrained_model() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Edge::set_has_pretrained_model() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Edge::clear_has_pretrained_model() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Edge::clear_pretrained_model() {
  pretrained_model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pretrained_model();
}
inline const ::std::string& Edge::pretrained_model() const {
  // @@protoc_insertion_point(field_get:config.Edge.pretrained_model)
  return pretrained_model_.GetNoArena();
}
inline void Edge::set_pretrained_model(const ::std::string& value) {
  set_has_pretrained_model();
  pretrained_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.Edge.pretrained_model)
}
#if LANG_CXX11
inline void Edge::set_pretrained_model(::std::string&& value) {
  set_has_pretrained_model();
  pretrained_model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.Edge.pretrained_model)
}
#endif
inline void Edge::set_pretrained_model(const char* value) {
  set_has_pretrained_model();
  pretrained_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.Edge.pretrained_model)
}
inline void Edge::set_pretrained_model(const char* value, size_t size) {
  set_has_pretrained_model();
  pretrained_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.Edge.pretrained_model)
}
inline ::std::string* Edge::mutable_pretrained_model() {
  set_has_pretrained_model();
  // @@protoc_insertion_point(field_mutable:config.Edge.pretrained_model)
  return pretrained_model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Edge::release_pretrained_model() {
  // @@protoc_insertion_point(field_release:config.Edge.pretrained_model)
  clear_has_pretrained_model();
  return pretrained_model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Edge::set_allocated_pretrained_model(::std::string* pretrained_model) {
  if (pretrained_model != NULL) {
    set_has_pretrained_model();
  } else {
    clear_has_pretrained_model();
  }
  pretrained_model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pretrained_model);
  // @@protoc_insertion_point(field_set_allocated:config.Edge.pretrained_model)
}

// optional string pretrained_edge_name = 26;
inline bool Edge::has_pretrained_edge_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Edge::set_has_pretrained_edge_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Edge::clear_has_pretrained_edge_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Edge::clear_pretrained_edge_name() {
  pretrained_edge_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pretrained_edge_name();
}
inline const ::std::string& Edge::pretrained_edge_name() const {
  // @@protoc_insertion_point(field_get:config.Edge.pretrained_edge_name)
  return pretrained_edge_name_.GetNoArena();
}
inline void Edge::set_pretrained_edge_name(const ::std::string& value) {
  set_has_pretrained_edge_name();
  pretrained_edge_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.Edge.pretrained_edge_name)
}
#if LANG_CXX11
inline void Edge::set_pretrained_edge_name(::std::string&& value) {
  set_has_pretrained_edge_name();
  pretrained_edge_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.Edge.pretrained_edge_name)
}
#endif
inline void Edge::set_pretrained_edge_name(const char* value) {
  set_has_pretrained_edge_name();
  pretrained_edge_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.Edge.pretrained_edge_name)
}
inline void Edge::set_pretrained_edge_name(const char* value, size_t size) {
  set_has_pretrained_edge_name();
  pretrained_edge_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.Edge.pretrained_edge_name)
}
inline ::std::string* Edge::mutable_pretrained_edge_name() {
  set_has_pretrained_edge_name();
  // @@protoc_insertion_point(field_mutable:config.Edge.pretrained_edge_name)
  return pretrained_edge_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Edge::release_pretrained_edge_name() {
  // @@protoc_insertion_point(field_release:config.Edge.pretrained_edge_name)
  clear_has_pretrained_edge_name();
  return pretrained_edge_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Edge::set_allocated_pretrained_edge_name(::std::string* pretrained_edge_name) {
  if (pretrained_edge_name != NULL) {
    set_has_pretrained_edge_name();
  } else {
    clear_has_pretrained_edge_name();
  }
  pretrained_edge_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pretrained_edge_name);
  // @@protoc_insertion_point(field_set_allocated:config.Edge.pretrained_edge_name)
}

// optional bool display = 27 [default = false];
inline bool Edge::has_display() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Edge::set_has_display() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Edge::clear_has_display() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Edge::clear_display() {
  display_ = false;
  clear_has_display();
}
inline bool Edge::display() const {
  // @@protoc_insertion_point(field_get:config.Edge.display)
  return display_;
}
inline void Edge::set_display(bool value) {
  set_has_display();
  display_ = value;
  // @@protoc_insertion_point(field_set:config.Edge.display)
}

// -------------------------------------------------------------------

// Subnet_MergeLayer

// required string subnet_layer = 1;
inline bool Subnet_MergeLayer::has_subnet_layer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Subnet_MergeLayer::set_has_subnet_layer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Subnet_MergeLayer::clear_has_subnet_layer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Subnet_MergeLayer::clear_subnet_layer() {
  subnet_layer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_subnet_layer();
}
inline const ::std::string& Subnet_MergeLayer::subnet_layer() const {
  // @@protoc_insertion_point(field_get:config.Subnet.MergeLayer.subnet_layer)
  return subnet_layer_.GetNoArena();
}
inline void Subnet_MergeLayer::set_subnet_layer(const ::std::string& value) {
  set_has_subnet_layer();
  subnet_layer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.Subnet.MergeLayer.subnet_layer)
}
#if LANG_CXX11
inline void Subnet_MergeLayer::set_subnet_layer(::std::string&& value) {
  set_has_subnet_layer();
  subnet_layer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.Subnet.MergeLayer.subnet_layer)
}
#endif
inline void Subnet_MergeLayer::set_subnet_layer(const char* value) {
  set_has_subnet_layer();
  subnet_layer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.Subnet.MergeLayer.subnet_layer)
}
inline void Subnet_MergeLayer::set_subnet_layer(const char* value, size_t size) {
  set_has_subnet_layer();
  subnet_layer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.Subnet.MergeLayer.subnet_layer)
}
inline ::std::string* Subnet_MergeLayer::mutable_subnet_layer() {
  set_has_subnet_layer();
  // @@protoc_insertion_point(field_mutable:config.Subnet.MergeLayer.subnet_layer)
  return subnet_layer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Subnet_MergeLayer::release_subnet_layer() {
  // @@protoc_insertion_point(field_release:config.Subnet.MergeLayer.subnet_layer)
  clear_has_subnet_layer();
  return subnet_layer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Subnet_MergeLayer::set_allocated_subnet_layer(::std::string* subnet_layer) {
  if (subnet_layer != NULL) {
    set_has_subnet_layer();
  } else {
    clear_has_subnet_layer();
  }
  subnet_layer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subnet_layer);
  // @@protoc_insertion_point(field_set_allocated:config.Subnet.MergeLayer.subnet_layer)
}

// required string net_layer = 2;
inline bool Subnet_MergeLayer::has_net_layer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Subnet_MergeLayer::set_has_net_layer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Subnet_MergeLayer::clear_has_net_layer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Subnet_MergeLayer::clear_net_layer() {
  net_layer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_net_layer();
}
inline const ::std::string& Subnet_MergeLayer::net_layer() const {
  // @@protoc_insertion_point(field_get:config.Subnet.MergeLayer.net_layer)
  return net_layer_.GetNoArena();
}
inline void Subnet_MergeLayer::set_net_layer(const ::std::string& value) {
  set_has_net_layer();
  net_layer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.Subnet.MergeLayer.net_layer)
}
#if LANG_CXX11
inline void Subnet_MergeLayer::set_net_layer(::std::string&& value) {
  set_has_net_layer();
  net_layer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.Subnet.MergeLayer.net_layer)
}
#endif
inline void Subnet_MergeLayer::set_net_layer(const char* value) {
  set_has_net_layer();
  net_layer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.Subnet.MergeLayer.net_layer)
}
inline void Subnet_MergeLayer::set_net_layer(const char* value, size_t size) {
  set_has_net_layer();
  net_layer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.Subnet.MergeLayer.net_layer)
}
inline ::std::string* Subnet_MergeLayer::mutable_net_layer() {
  set_has_net_layer();
  // @@protoc_insertion_point(field_mutable:config.Subnet.MergeLayer.net_layer)
  return net_layer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Subnet_MergeLayer::release_net_layer() {
  // @@protoc_insertion_point(field_release:config.Subnet.MergeLayer.net_layer)
  clear_has_net_layer();
  return net_layer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Subnet_MergeLayer::set_allocated_net_layer(::std::string* net_layer) {
  if (net_layer != NULL) {
    set_has_net_layer();
  } else {
    clear_has_net_layer();
  }
  net_layer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), net_layer);
  // @@protoc_insertion_point(field_set_allocated:config.Subnet.MergeLayer.net_layer)
}

// -------------------------------------------------------------------

// Subnet

// required string name = 1;
inline bool Subnet::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Subnet::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Subnet::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Subnet::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Subnet::name() const {
  // @@protoc_insertion_point(field_get:config.Subnet.name)
  return name_.GetNoArena();
}
inline void Subnet::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.Subnet.name)
}
#if LANG_CXX11
inline void Subnet::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.Subnet.name)
}
#endif
inline void Subnet::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.Subnet.name)
}
inline void Subnet::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.Subnet.name)
}
inline ::std::string* Subnet::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:config.Subnet.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Subnet::release_name() {
  // @@protoc_insertion_point(field_release:config.Subnet.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Subnet::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:config.Subnet.name)
}

// required string model_file = 2;
inline bool Subnet::has_model_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Subnet::set_has_model_file() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Subnet::clear_has_model_file() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Subnet::clear_model_file() {
  model_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_model_file();
}
inline const ::std::string& Subnet::model_file() const {
  // @@protoc_insertion_point(field_get:config.Subnet.model_file)
  return model_file_.GetNoArena();
}
inline void Subnet::set_model_file(const ::std::string& value) {
  set_has_model_file();
  model_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.Subnet.model_file)
}
#if LANG_CXX11
inline void Subnet::set_model_file(::std::string&& value) {
  set_has_model_file();
  model_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.Subnet.model_file)
}
#endif
inline void Subnet::set_model_file(const char* value) {
  set_has_model_file();
  model_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.Subnet.model_file)
}
inline void Subnet::set_model_file(const char* value, size_t size) {
  set_has_model_file();
  model_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.Subnet.model_file)
}
inline ::std::string* Subnet::mutable_model_file() {
  set_has_model_file();
  // @@protoc_insertion_point(field_mutable:config.Subnet.model_file)
  return model_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Subnet::release_model_file() {
  // @@protoc_insertion_point(field_release:config.Subnet.model_file)
  clear_has_model_file();
  return model_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Subnet::set_allocated_model_file(::std::string* model_file) {
  if (model_file != NULL) {
    set_has_model_file();
  } else {
    clear_has_model_file();
  }
  model_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_file);
  // @@protoc_insertion_point(field_set_allocated:config.Subnet.model_file)
}

// optional string parameters_file = 3;
inline bool Subnet::has_parameters_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Subnet::set_has_parameters_file() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Subnet::clear_has_parameters_file() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Subnet::clear_parameters_file() {
  parameters_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_parameters_file();
}
inline const ::std::string& Subnet::parameters_file() const {
  // @@protoc_insertion_point(field_get:config.Subnet.parameters_file)
  return parameters_file_.GetNoArena();
}
inline void Subnet::set_parameters_file(const ::std::string& value) {
  set_has_parameters_file();
  parameters_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.Subnet.parameters_file)
}
#if LANG_CXX11
inline void Subnet::set_parameters_file(::std::string&& value) {
  set_has_parameters_file();
  parameters_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.Subnet.parameters_file)
}
#endif
inline void Subnet::set_parameters_file(const char* value) {
  set_has_parameters_file();
  parameters_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.Subnet.parameters_file)
}
inline void Subnet::set_parameters_file(const char* value, size_t size) {
  set_has_parameters_file();
  parameters_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.Subnet.parameters_file)
}
inline ::std::string* Subnet::mutable_parameters_file() {
  set_has_parameters_file();
  // @@protoc_insertion_point(field_mutable:config.Subnet.parameters_file)
  return parameters_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Subnet::release_parameters_file() {
  // @@protoc_insertion_point(field_release:config.Subnet.parameters_file)
  clear_has_parameters_file();
  return parameters_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Subnet::set_allocated_parameters_file(::std::string* parameters_file) {
  if (parameters_file != NULL) {
    set_has_parameters_file();
  } else {
    clear_has_parameters_file();
  }
  parameters_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parameters_file);
  // @@protoc_insertion_point(field_set_allocated:config.Subnet.parameters_file)
}

// repeated .config.Subnet.MergeLayer merge_layer = 4;
inline int Subnet::merge_layer_size() const {
  return merge_layer_.size();
}
inline void Subnet::clear_merge_layer() {
  merge_layer_.Clear();
}
inline const ::config::Subnet_MergeLayer& Subnet::merge_layer(int index) const {
  // @@protoc_insertion_point(field_get:config.Subnet.merge_layer)
  return merge_layer_.Get(index);
}
inline ::config::Subnet_MergeLayer* Subnet::mutable_merge_layer(int index) {
  // @@protoc_insertion_point(field_mutable:config.Subnet.merge_layer)
  return merge_layer_.Mutable(index);
}
inline ::config::Subnet_MergeLayer* Subnet::add_merge_layer() {
  // @@protoc_insertion_point(field_add:config.Subnet.merge_layer)
  return merge_layer_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::config::Subnet_MergeLayer >*
Subnet::mutable_merge_layer() {
  // @@protoc_insertion_point(field_mutable_list:config.Subnet.merge_layer)
  return &merge_layer_;
}
inline const ::google::protobuf::RepeatedPtrField< ::config::Subnet_MergeLayer >&
Subnet::merge_layer() const {
  // @@protoc_insertion_point(field_list:config.Subnet.merge_layer)
  return merge_layer_;
}

// optional bool block_backprop = 5 [default = false];
inline bool Subnet::has_block_backprop() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Subnet::set_has_block_backprop() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Subnet::clear_has_block_backprop() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Subnet::clear_block_backprop() {
  block_backprop_ = false;
  clear_has_block_backprop();
}
inline bool Subnet::block_backprop() const {
  // @@protoc_insertion_point(field_get:config.Subnet.block_backprop)
  return block_backprop_;
}
inline void Subnet::set_block_backprop(bool value) {
  set_has_block_backprop();
  block_backprop_ = value;
  // @@protoc_insertion_point(field_set:config.Subnet.block_backprop)
}

// optional int32 start_optimization_after = 6 [default = 0];
inline bool Subnet::has_start_optimization_after() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Subnet::set_has_start_optimization_after() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Subnet::clear_has_start_optimization_after() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Subnet::clear_start_optimization_after() {
  start_optimization_after_ = 0;
  clear_has_start_optimization_after();
}
inline ::google::protobuf::int32 Subnet::start_optimization_after() const {
  // @@protoc_insertion_point(field_get:config.Subnet.start_optimization_after)
  return start_optimization_after_;
}
inline void Subnet::set_start_optimization_after(::google::protobuf::int32 value) {
  set_has_start_optimization_after();
  start_optimization_after_ = value;
  // @@protoc_insertion_point(field_set:config.Subnet.start_optimization_after)
}

// optional int32 gpu_id_offset = 7 [default = 0];
inline bool Subnet::has_gpu_id_offset() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Subnet::set_has_gpu_id_offset() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Subnet::clear_has_gpu_id_offset() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Subnet::clear_gpu_id_offset() {
  gpu_id_offset_ = 0;
  clear_has_gpu_id_offset();
}
inline ::google::protobuf::int32 Subnet::gpu_id_offset() const {
  // @@protoc_insertion_point(field_get:config.Subnet.gpu_id_offset)
  return gpu_id_offset_;
}
inline void Subnet::set_gpu_id_offset(::google::protobuf::int32 value) {
  set_has_gpu_id_offset();
  gpu_id_offset_ = value;
  // @@protoc_insertion_point(field_set:config.Subnet.gpu_id_offset)
}

// optional int32 num_channels_multiplier = 8 [default = 1];
inline bool Subnet::has_num_channels_multiplier() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Subnet::set_has_num_channels_multiplier() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Subnet::clear_has_num_channels_multiplier() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Subnet::clear_num_channels_multiplier() {
  num_channels_multiplier_ = 1;
  clear_has_num_channels_multiplier();
}
inline ::google::protobuf::int32 Subnet::num_channels_multiplier() const {
  // @@protoc_insertion_point(field_get:config.Subnet.num_channels_multiplier)
  return num_channels_multiplier_;
}
inline void Subnet::set_num_channels_multiplier(::google::protobuf::int32 value) {
  set_has_num_channels_multiplier();
  num_channels_multiplier_ = value;
  // @@protoc_insertion_point(field_set:config.Subnet.num_channels_multiplier)
}

// repeated string remove_layer = 9;
inline int Subnet::remove_layer_size() const {
  return remove_layer_.size();
}
inline void Subnet::clear_remove_layer() {
  remove_layer_.Clear();
}
inline const ::std::string& Subnet::remove_layer(int index) const {
  // @@protoc_insertion_point(field_get:config.Subnet.remove_layer)
  return remove_layer_.Get(index);
}
inline ::std::string* Subnet::mutable_remove_layer(int index) {
  // @@protoc_insertion_point(field_mutable:config.Subnet.remove_layer)
  return remove_layer_.Mutable(index);
}
inline void Subnet::set_remove_layer(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:config.Subnet.remove_layer)
  remove_layer_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Subnet::set_remove_layer(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:config.Subnet.remove_layer)
  remove_layer_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Subnet::set_remove_layer(int index, const char* value) {
  remove_layer_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:config.Subnet.remove_layer)
}
inline void Subnet::set_remove_layer(int index, const char* value, size_t size) {
  remove_layer_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:config.Subnet.remove_layer)
}
inline ::std::string* Subnet::add_remove_layer() {
  // @@protoc_insertion_point(field_add_mutable:config.Subnet.remove_layer)
  return remove_layer_.Add();
}
inline void Subnet::add_remove_layer(const ::std::string& value) {
  remove_layer_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:config.Subnet.remove_layer)
}
#if LANG_CXX11
inline void Subnet::add_remove_layer(::std::string&& value) {
  remove_layer_.Add()->assign(std::move(value));
  // @@protoc_insertion_point(field_add:config.Subnet.remove_layer)
}
#endif
inline void Subnet::add_remove_layer(const char* value) {
  remove_layer_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:config.Subnet.remove_layer)
}
inline void Subnet::add_remove_layer(const char* value, size_t size) {
  remove_layer_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:config.Subnet.remove_layer)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Subnet::remove_layer() const {
  // @@protoc_insertion_point(field_list:config.Subnet.remove_layer)
  return remove_layer_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Subnet::mutable_remove_layer() {
  // @@protoc_insertion_point(field_mutable_list:config.Subnet.remove_layer)
  return &remove_layer_;
}

// -------------------------------------------------------------------

// Model

// required string name = 1;
inline bool Model::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Model::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Model::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Model::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& Model::name() const {
  // @@protoc_insertion_point(field_get:config.Model.name)
  return name_.GetNoArena();
}
inline void Model::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.Model.name)
}
#if LANG_CXX11
inline void Model::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.Model.name)
}
#endif
inline void Model::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.Model.name)
}
inline void Model::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.Model.name)
}
inline ::std::string* Model::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:config.Model.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Model::release_name() {
  // @@protoc_insertion_point(field_release:config.Model.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Model::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:config.Model.name)
}

// repeated .config.Layer layer = 2;
inline int Model::layer_size() const {
  return layer_.size();
}
inline void Model::clear_layer() {
  layer_.Clear();
}
inline const ::config::Layer& Model::layer(int index) const {
  // @@protoc_insertion_point(field_get:config.Model.layer)
  return layer_.Get(index);
}
inline ::config::Layer* Model::mutable_layer(int index) {
  // @@protoc_insertion_point(field_mutable:config.Model.layer)
  return layer_.Mutable(index);
}
inline ::config::Layer* Model::add_layer() {
  // @@protoc_insertion_point(field_add:config.Model.layer)
  return layer_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::config::Layer >*
Model::mutable_layer() {
  // @@protoc_insertion_point(field_mutable_list:config.Model.layer)
  return &layer_;
}
inline const ::google::protobuf::RepeatedPtrField< ::config::Layer >&
Model::layer() const {
  // @@protoc_insertion_point(field_list:config.Model.layer)
  return layer_;
}

// repeated .config.Edge edge = 3;
inline int Model::edge_size() const {
  return edge_.size();
}
inline void Model::clear_edge() {
  edge_.Clear();
}
inline const ::config::Edge& Model::edge(int index) const {
  // @@protoc_insertion_point(field_get:config.Model.edge)
  return edge_.Get(index);
}
inline ::config::Edge* Model::mutable_edge(int index) {
  // @@protoc_insertion_point(field_mutable:config.Model.edge)
  return edge_.Mutable(index);
}
inline ::config::Edge* Model::add_edge() {
  // @@protoc_insertion_point(field_add:config.Model.edge)
  return edge_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::config::Edge >*
Model::mutable_edge() {
  // @@protoc_insertion_point(field_mutable_list:config.Model.edge)
  return &edge_;
}
inline const ::google::protobuf::RepeatedPtrField< ::config::Edge >&
Model::edge() const {
  // @@protoc_insertion_point(field_list:config.Model.edge)
  return edge_;
}

// required int32 seed = 4;
inline bool Model::has_seed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Model::set_has_seed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Model::clear_has_seed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Model::clear_seed() {
  seed_ = 0;
  clear_has_seed();
}
inline ::google::protobuf::int32 Model::seed() const {
  // @@protoc_insertion_point(field_get:config.Model.seed)
  return seed_;
}
inline void Model::set_seed(::google::protobuf::int32 value) {
  set_has_seed();
  seed_ = value;
  // @@protoc_insertion_point(field_set:config.Model.seed)
}

// optional int32 max_iter = 5 [default = -1];
inline bool Model::has_max_iter() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Model::set_has_max_iter() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Model::clear_has_max_iter() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Model::clear_max_iter() {
  max_iter_ = -1;
  clear_has_max_iter();
}
inline ::google::protobuf::int32 Model::max_iter() const {
  // @@protoc_insertion_point(field_get:config.Model.max_iter)
  return max_iter_;
}
inline void Model::set_max_iter(::google::protobuf::int32 value) {
  set_has_max_iter();
  max_iter_ = value;
  // @@protoc_insertion_point(field_set:config.Model.max_iter)
}

// optional int32 display_after = 6 [default = -1];
inline bool Model::has_display_after() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Model::set_has_display_after() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Model::clear_has_display_after() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Model::clear_display_after() {
  display_after_ = -1;
  clear_has_display_after();
}
inline ::google::protobuf::int32 Model::display_after() const {
  // @@protoc_insertion_point(field_get:config.Model.display_after)
  return display_after_;
}
inline void Model::set_display_after(::google::protobuf::int32 value) {
  set_has_display_after();
  display_after_ = value;
  // @@protoc_insertion_point(field_set:config.Model.display_after)
}

// optional int32 save_after = 7 [default = -1];
inline bool Model::has_save_after() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Model::set_has_save_after() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Model::clear_has_save_after() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Model::clear_save_after() {
  save_after_ = -1;
  clear_has_save_after();
}
inline ::google::protobuf::int32 Model::save_after() const {
  // @@protoc_insertion_point(field_get:config.Model.save_after)
  return save_after_;
}
inline void Model::set_save_after(::google::protobuf::int32 value) {
  set_has_save_after();
  save_after_ = value;
  // @@protoc_insertion_point(field_set:config.Model.save_after)
}

// optional int32 image_size = 8 [default = 0];
inline bool Model::has_image_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Model::set_has_image_size() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Model::clear_has_image_size() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Model::clear_image_size() {
  image_size_ = 0;
  clear_has_image_size();
}
inline ::google::protobuf::int32 Model::image_size() const {
  // @@protoc_insertion_point(field_get:config.Model.image_size)
  return image_size_;
}
inline void Model::set_image_size(::google::protobuf::int32 value) {
  set_has_image_size();
  image_size_ = value;
  // @@protoc_insertion_point(field_set:config.Model.image_size)
}

// optional int32 patch_size = 9 [default = 0];
inline bool Model::has_patch_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Model::set_has_patch_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Model::clear_has_patch_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Model::clear_patch_size() {
  patch_size_ = 0;
  clear_has_patch_size();
}
inline ::google::protobuf::int32 Model::patch_size() const {
  // @@protoc_insertion_point(field_get:config.Model.patch_size)
  return patch_size_;
}
inline void Model::set_patch_size(::google::protobuf::int32 value) {
  set_has_patch_size();
  patch_size_ = value;
  // @@protoc_insertion_point(field_set:config.Model.patch_size)
}

// optional int32 print_after = 10 [default = -1];
inline bool Model::has_print_after() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Model::set_has_print_after() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Model::clear_has_print_after() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Model::clear_print_after() {
  print_after_ = -1;
  clear_has_print_after();
}
inline ::google::protobuf::int32 Model::print_after() const {
  // @@protoc_insertion_point(field_get:config.Model.print_after)
  return print_after_;
}
inline void Model::set_print_after(::google::protobuf::int32 value) {
  set_has_print_after();
  print_after_ = value;
  // @@protoc_insertion_point(field_set:config.Model.print_after)
}

// optional bool localizer = 11 [default = false];
inline bool Model::has_localizer() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Model::set_has_localizer() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Model::clear_has_localizer() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Model::clear_localizer() {
  localizer_ = false;
  clear_has_localizer();
}
inline bool Model::localizer() const {
  // @@protoc_insertion_point(field_get:config.Model.localizer)
  return localizer_;
}
inline void Model::set_localizer(bool value) {
  set_has_localizer();
  localizer_ = value;
  // @@protoc_insertion_point(field_set:config.Model.localizer)
}

// optional string checkpoint_dir = 12;
inline bool Model::has_checkpoint_dir() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Model::set_has_checkpoint_dir() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Model::clear_has_checkpoint_dir() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Model::clear_checkpoint_dir() {
  checkpoint_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_checkpoint_dir();
}
inline const ::std::string& Model::checkpoint_dir() const {
  // @@protoc_insertion_point(field_get:config.Model.checkpoint_dir)
  return checkpoint_dir_.GetNoArena();
}
inline void Model::set_checkpoint_dir(const ::std::string& value) {
  set_has_checkpoint_dir();
  checkpoint_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.Model.checkpoint_dir)
}
#if LANG_CXX11
inline void Model::set_checkpoint_dir(::std::string&& value) {
  set_has_checkpoint_dir();
  checkpoint_dir_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.Model.checkpoint_dir)
}
#endif
inline void Model::set_checkpoint_dir(const char* value) {
  set_has_checkpoint_dir();
  checkpoint_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.Model.checkpoint_dir)
}
inline void Model::set_checkpoint_dir(const char* value, size_t size) {
  set_has_checkpoint_dir();
  checkpoint_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.Model.checkpoint_dir)
}
inline ::std::string* Model::mutable_checkpoint_dir() {
  set_has_checkpoint_dir();
  // @@protoc_insertion_point(field_mutable:config.Model.checkpoint_dir)
  return checkpoint_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Model::release_checkpoint_dir() {
  // @@protoc_insertion_point(field_release:config.Model.checkpoint_dir)
  clear_has_checkpoint_dir();
  return checkpoint_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Model::set_allocated_checkpoint_dir(::std::string* checkpoint_dir) {
  if (checkpoint_dir != NULL) {
    set_has_checkpoint_dir();
  } else {
    clear_has_checkpoint_dir();
  }
  checkpoint_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), checkpoint_dir);
  // @@protoc_insertion_point(field_set_allocated:config.Model.checkpoint_dir)
}

// optional bool print_weights = 13 [default = false];
inline bool Model::has_print_weights() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Model::set_has_print_weights() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Model::clear_has_print_weights() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Model::clear_print_weights() {
  print_weights_ = false;
  clear_has_print_weights();
}
inline bool Model::print_weights() const {
  // @@protoc_insertion_point(field_get:config.Model.print_weights)
  return print_weights_;
}
inline void Model::set_print_weights(bool value) {
  set_has_print_weights();
  print_weights_ = value;
  // @@protoc_insertion_point(field_set:config.Model.print_weights)
}

// repeated string timestamp = 15;
inline int Model::timestamp_size() const {
  return timestamp_.size();
}
inline void Model::clear_timestamp() {
  timestamp_.Clear();
}
inline const ::std::string& Model::timestamp(int index) const {
  // @@protoc_insertion_point(field_get:config.Model.timestamp)
  return timestamp_.Get(index);
}
inline ::std::string* Model::mutable_timestamp(int index) {
  // @@protoc_insertion_point(field_mutable:config.Model.timestamp)
  return timestamp_.Mutable(index);
}
inline void Model::set_timestamp(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:config.Model.timestamp)
  timestamp_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Model::set_timestamp(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:config.Model.timestamp)
  timestamp_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Model::set_timestamp(int index, const char* value) {
  timestamp_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:config.Model.timestamp)
}
inline void Model::set_timestamp(int index, const char* value, size_t size) {
  timestamp_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:config.Model.timestamp)
}
inline ::std::string* Model::add_timestamp() {
  // @@protoc_insertion_point(field_add_mutable:config.Model.timestamp)
  return timestamp_.Add();
}
inline void Model::add_timestamp(const ::std::string& value) {
  timestamp_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:config.Model.timestamp)
}
#if LANG_CXX11
inline void Model::add_timestamp(::std::string&& value) {
  timestamp_.Add()->assign(std::move(value));
  // @@protoc_insertion_point(field_add:config.Model.timestamp)
}
#endif
inline void Model::add_timestamp(const char* value) {
  timestamp_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:config.Model.timestamp)
}
inline void Model::add_timestamp(const char* value, size_t size) {
  timestamp_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:config.Model.timestamp)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Model::timestamp() const {
  // @@protoc_insertion_point(field_list:config.Model.timestamp)
  return timestamp_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Model::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable_list:config.Model.timestamp)
  return &timestamp_;
}

// optional bool display = 17 [default = false];
inline bool Model::has_display() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Model::set_has_display() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Model::clear_has_display() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Model::clear_display() {
  display_ = false;
  clear_has_display();
}
inline bool Model::display() const {
  // @@protoc_insertion_point(field_get:config.Model.display)
  return display_;
}
inline void Model::set_display(bool value) {
  set_has_display();
  display_ = value;
  // @@protoc_insertion_point(field_set:config.Model.display)
}

// optional int32 validate_after = 18 [default = -1];
inline bool Model::has_validate_after() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Model::set_has_validate_after() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Model::clear_has_validate_after() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Model::clear_validate_after() {
  validate_after_ = -1;
  clear_has_validate_after();
}
inline ::google::protobuf::int32 Model::validate_after() const {
  // @@protoc_insertion_point(field_get:config.Model.validate_after)
  return validate_after_;
}
inline void Model::set_validate_after(::google::protobuf::int32 value) {
  set_has_validate_after();
  validate_after_ = value;
  // @@protoc_insertion_point(field_set:config.Model.validate_after)
}

// optional float reduce_lr_factor = 19 [default = 1];
inline bool Model::has_reduce_lr_factor() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Model::set_has_reduce_lr_factor() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Model::clear_has_reduce_lr_factor() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Model::clear_reduce_lr_factor() {
  reduce_lr_factor_ = 1;
  clear_has_reduce_lr_factor();
}
inline float Model::reduce_lr_factor() const {
  // @@protoc_insertion_point(field_get:config.Model.reduce_lr_factor)
  return reduce_lr_factor_;
}
inline void Model::set_reduce_lr_factor(float value) {
  set_has_reduce_lr_factor();
  reduce_lr_factor_ = value;
  // @@protoc_insertion_point(field_set:config.Model.reduce_lr_factor)
}

// optional float reduce_lr_threshold = 20 [default = 0];
inline bool Model::has_reduce_lr_threshold() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Model::set_has_reduce_lr_threshold() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Model::clear_has_reduce_lr_threshold() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Model::clear_reduce_lr_threshold() {
  reduce_lr_threshold_ = 0;
  clear_has_reduce_lr_threshold();
}
inline float Model::reduce_lr_threshold() const {
  // @@protoc_insertion_point(field_get:config.Model.reduce_lr_threshold)
  return reduce_lr_threshold_;
}
inline void Model::set_reduce_lr_threshold(float value) {
  set_has_reduce_lr_threshold();
  reduce_lr_threshold_ = value;
  // @@protoc_insertion_point(field_set:config.Model.reduce_lr_threshold)
}

// optional int32 reduce_lr_num_steps = 21 [default = 0];
inline bool Model::has_reduce_lr_num_steps() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Model::set_has_reduce_lr_num_steps() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Model::clear_has_reduce_lr_num_steps() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Model::clear_reduce_lr_num_steps() {
  reduce_lr_num_steps_ = 0;
  clear_has_reduce_lr_num_steps();
}
inline ::google::protobuf::int32 Model::reduce_lr_num_steps() const {
  // @@protoc_insertion_point(field_get:config.Model.reduce_lr_num_steps)
  return reduce_lr_num_steps_;
}
inline void Model::set_reduce_lr_num_steps(::google::protobuf::int32 value) {
  set_has_reduce_lr_num_steps();
  reduce_lr_num_steps_ = value;
  // @@protoc_insertion_point(field_set:config.Model.reduce_lr_num_steps)
}

// optional int32 reduce_lr_max = 22 [default = 0];
inline bool Model::has_reduce_lr_max() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Model::set_has_reduce_lr_max() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Model::clear_has_reduce_lr_max() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Model::clear_reduce_lr_max() {
  reduce_lr_max_ = 0;
  clear_has_reduce_lr_max();
}
inline ::google::protobuf::int32 Model::reduce_lr_max() const {
  // @@protoc_insertion_point(field_get:config.Model.reduce_lr_max)
  return reduce_lr_max_;
}
inline void Model::set_reduce_lr_max(::google::protobuf::int32 value) {
  set_has_reduce_lr_max();
  reduce_lr_max_ = value;
  // @@protoc_insertion_point(field_set:config.Model.reduce_lr_max)
}

// optional bool smaller_is_better = 23 [default = false];
inline bool Model::has_smaller_is_better() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Model::set_has_smaller_is_better() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Model::clear_has_smaller_is_better() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Model::clear_smaller_is_better() {
  smaller_is_better_ = false;
  clear_has_smaller_is_better();
}
inline bool Model::smaller_is_better() const {
  // @@protoc_insertion_point(field_get:config.Model.smaller_is_better)
  return smaller_is_better_;
}
inline void Model::set_smaller_is_better(bool value) {
  set_has_smaller_is_better();
  smaller_is_better_ = value;
  // @@protoc_insertion_point(field_set:config.Model.smaller_is_better)
}

// optional int32 polyak_after = 24 [default = 0];
inline bool Model::has_polyak_after() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Model::set_has_polyak_after() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Model::clear_has_polyak_after() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Model::clear_polyak_after() {
  polyak_after_ = 0;
  clear_has_polyak_after();
}
inline ::google::protobuf::int32 Model::polyak_after() const {
  // @@protoc_insertion_point(field_get:config.Model.polyak_after)
  return polyak_after_;
}
inline void Model::set_polyak_after(::google::protobuf::int32 value) {
  set_has_polyak_after();
  polyak_after_ = value;
  // @@protoc_insertion_point(field_set:config.Model.polyak_after)
}

// optional int32 polyak_queue_size = 25 [default = 0];
inline bool Model::has_polyak_queue_size() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Model::set_has_polyak_queue_size() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Model::clear_has_polyak_queue_size() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Model::clear_polyak_queue_size() {
  polyak_queue_size_ = 0;
  clear_has_polyak_queue_size();
}
inline ::google::protobuf::int32 Model::polyak_queue_size() const {
  // @@protoc_insertion_point(field_get:config.Model.polyak_queue_size)
  return polyak_queue_size_;
}
inline void Model::set_polyak_queue_size(::google::protobuf::int32 value) {
  set_has_polyak_queue_size();
  polyak_queue_size_ = value;
  // @@protoc_insertion_point(field_set:config.Model.polyak_queue_size)
}

// repeated .config.Subnet subnet = 26;
inline int Model::subnet_size() const {
  return subnet_.size();
}
inline void Model::clear_subnet() {
  subnet_.Clear();
}
inline const ::config::Subnet& Model::subnet(int index) const {
  // @@protoc_insertion_point(field_get:config.Model.subnet)
  return subnet_.Get(index);
}
inline ::config::Subnet* Model::mutable_subnet(int index) {
  // @@protoc_insertion_point(field_mutable:config.Model.subnet)
  return subnet_.Mutable(index);
}
inline ::config::Subnet* Model::add_subnet() {
  // @@protoc_insertion_point(field_add:config.Model.subnet)
  return subnet_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::config::Subnet >*
Model::mutable_subnet() {
  // @@protoc_insertion_point(field_mutable_list:config.Model.subnet)
  return &subnet_;
}
inline const ::google::protobuf::RepeatedPtrField< ::config::Subnet >&
Model::subnet() const {
  // @@protoc_insertion_point(field_list:config.Model.subnet)
  return subnet_;
}

// -------------------------------------------------------------------

// DataStreamConfig

// required string file_pattern = 1;
inline bool DataStreamConfig::has_file_pattern() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataStreamConfig::set_has_file_pattern() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataStreamConfig::clear_has_file_pattern() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataStreamConfig::clear_file_pattern() {
  file_pattern_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_pattern();
}
inline const ::std::string& DataStreamConfig::file_pattern() const {
  // @@protoc_insertion_point(field_get:config.DataStreamConfig.file_pattern)
  return file_pattern_.GetNoArena();
}
inline void DataStreamConfig::set_file_pattern(const ::std::string& value) {
  set_has_file_pattern();
  file_pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.DataStreamConfig.file_pattern)
}
#if LANG_CXX11
inline void DataStreamConfig::set_file_pattern(::std::string&& value) {
  set_has_file_pattern();
  file_pattern_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.DataStreamConfig.file_pattern)
}
#endif
inline void DataStreamConfig::set_file_pattern(const char* value) {
  set_has_file_pattern();
  file_pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.DataStreamConfig.file_pattern)
}
inline void DataStreamConfig::set_file_pattern(const char* value, size_t size) {
  set_has_file_pattern();
  file_pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.DataStreamConfig.file_pattern)
}
inline ::std::string* DataStreamConfig::mutable_file_pattern() {
  set_has_file_pattern();
  // @@protoc_insertion_point(field_mutable:config.DataStreamConfig.file_pattern)
  return file_pattern_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataStreamConfig::release_file_pattern() {
  // @@protoc_insertion_point(field_release:config.DataStreamConfig.file_pattern)
  clear_has_file_pattern();
  return file_pattern_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataStreamConfig::set_allocated_file_pattern(::std::string* file_pattern) {
  if (file_pattern != NULL) {
    set_has_file_pattern();
  } else {
    clear_has_file_pattern();
  }
  file_pattern_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_pattern);
  // @@protoc_insertion_point(field_set_allocated:config.DataStreamConfig.file_pattern)
}

// required string layer_name = 2;
inline bool DataStreamConfig::has_layer_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataStreamConfig::set_has_layer_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataStreamConfig::clear_has_layer_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataStreamConfig::clear_layer_name() {
  layer_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_layer_name();
}
inline const ::std::string& DataStreamConfig::layer_name() const {
  // @@protoc_insertion_point(field_get:config.DataStreamConfig.layer_name)
  return layer_name_.GetNoArena();
}
inline void DataStreamConfig::set_layer_name(const ::std::string& value) {
  set_has_layer_name();
  layer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.DataStreamConfig.layer_name)
}
#if LANG_CXX11
inline void DataStreamConfig::set_layer_name(::std::string&& value) {
  set_has_layer_name();
  layer_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.DataStreamConfig.layer_name)
}
#endif
inline void DataStreamConfig::set_layer_name(const char* value) {
  set_has_layer_name();
  layer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.DataStreamConfig.layer_name)
}
inline void DataStreamConfig::set_layer_name(const char* value, size_t size) {
  set_has_layer_name();
  layer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.DataStreamConfig.layer_name)
}
inline ::std::string* DataStreamConfig::mutable_layer_name() {
  set_has_layer_name();
  // @@protoc_insertion_point(field_mutable:config.DataStreamConfig.layer_name)
  return layer_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataStreamConfig::release_layer_name() {
  // @@protoc_insertion_point(field_release:config.DataStreamConfig.layer_name)
  clear_has_layer_name();
  return layer_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataStreamConfig::set_allocated_layer_name(::std::string* layer_name) {
  if (layer_name != NULL) {
    set_has_layer_name();
  } else {
    clear_has_layer_name();
  }
  layer_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), layer_name);
  // @@protoc_insertion_point(field_set_allocated:config.DataStreamConfig.layer_name)
}

// optional string dataset_name = 3;
inline bool DataStreamConfig::has_dataset_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DataStreamConfig::set_has_dataset_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DataStreamConfig::clear_has_dataset_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DataStreamConfig::clear_dataset_name() {
  dataset_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dataset_name();
}
inline const ::std::string& DataStreamConfig::dataset_name() const {
  // @@protoc_insertion_point(field_get:config.DataStreamConfig.dataset_name)
  return dataset_name_.GetNoArena();
}
inline void DataStreamConfig::set_dataset_name(const ::std::string& value) {
  set_has_dataset_name();
  dataset_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.DataStreamConfig.dataset_name)
}
#if LANG_CXX11
inline void DataStreamConfig::set_dataset_name(::std::string&& value) {
  set_has_dataset_name();
  dataset_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.DataStreamConfig.dataset_name)
}
#endif
inline void DataStreamConfig::set_dataset_name(const char* value) {
  set_has_dataset_name();
  dataset_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.DataStreamConfig.dataset_name)
}
inline void DataStreamConfig::set_dataset_name(const char* value, size_t size) {
  set_has_dataset_name();
  dataset_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.DataStreamConfig.dataset_name)
}
inline ::std::string* DataStreamConfig::mutable_dataset_name() {
  set_has_dataset_name();
  // @@protoc_insertion_point(field_mutable:config.DataStreamConfig.dataset_name)
  return dataset_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataStreamConfig::release_dataset_name() {
  // @@protoc_insertion_point(field_release:config.DataStreamConfig.dataset_name)
  clear_has_dataset_name();
  return dataset_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataStreamConfig::set_allocated_dataset_name(::std::string* dataset_name) {
  if (dataset_name != NULL) {
    set_has_dataset_name();
  } else {
    clear_has_dataset_name();
  }
  dataset_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dataset_name);
  // @@protoc_insertion_point(field_set_allocated:config.DataStreamConfig.dataset_name)
}

// optional .config.DataStreamConfig.DataType data_type = 4 [default = HDF5];
inline bool DataStreamConfig::has_data_type() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void DataStreamConfig::set_has_data_type() {
  _has_bits_[0] |= 0x00200000u;
}
inline void DataStreamConfig::clear_has_data_type() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void DataStreamConfig::clear_data_type() {
  data_type_ = 1;
  clear_has_data_type();
}
inline ::config::DataStreamConfig_DataType DataStreamConfig::data_type() const {
  // @@protoc_insertion_point(field_get:config.DataStreamConfig.data_type)
  return static_cast< ::config::DataStreamConfig_DataType >(data_type_);
}
inline void DataStreamConfig::set_data_type(::config::DataStreamConfig_DataType value) {
  assert(::config::DataStreamConfig_DataType_IsValid(value));
  set_has_data_type();
  data_type_ = value;
  // @@protoc_insertion_point(field_set:config.DataStreamConfig.data_type)
}

// optional int32 raw_image_size = 5 [default = 0];
inline bool DataStreamConfig::has_raw_image_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DataStreamConfig::set_has_raw_image_size() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DataStreamConfig::clear_has_raw_image_size() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DataStreamConfig::clear_raw_image_size() {
  raw_image_size_ = 0;
  clear_has_raw_image_size();
}
inline ::google::protobuf::int32 DataStreamConfig::raw_image_size() const {
  // @@protoc_insertion_point(field_get:config.DataStreamConfig.raw_image_size)
  return raw_image_size_;
}
inline void DataStreamConfig::set_raw_image_size(::google::protobuf::int32 value) {
  set_has_raw_image_size();
  raw_image_size_ = value;
  // @@protoc_insertion_point(field_set:config.DataStreamConfig.raw_image_size)
}

// optional int32 image_size = 6;
inline bool DataStreamConfig::has_image_size() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DataStreamConfig::set_has_image_size() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DataStreamConfig::clear_has_image_size() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DataStreamConfig::clear_image_size() {
  image_size_ = 0;
  clear_has_image_size();
}
inline ::google::protobuf::int32 DataStreamConfig::image_size() const {
  // @@protoc_insertion_point(field_get:config.DataStreamConfig.image_size)
  return image_size_;
}
inline void DataStreamConfig::set_image_size(::google::protobuf::int32 value) {
  set_has_image_size();
  image_size_ = value;
  // @@protoc_insertion_point(field_set:config.DataStreamConfig.image_size)
}

// optional bool can_translate = 7 [default = false];
inline bool DataStreamConfig::has_can_translate() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DataStreamConfig::set_has_can_translate() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DataStreamConfig::clear_has_can_translate() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DataStreamConfig::clear_can_translate() {
  can_translate_ = false;
  clear_has_can_translate();
}
inline bool DataStreamConfig::can_translate() const {
  // @@protoc_insertion_point(field_get:config.DataStreamConfig.can_translate)
  return can_translate_;
}
inline void DataStreamConfig::set_can_translate(bool value) {
  set_has_can_translate();
  can_translate_ = value;
  // @@protoc_insertion_point(field_set:config.DataStreamConfig.can_translate)
}

// optional bool can_flip = 8 [default = false];
inline bool DataStreamConfig::has_can_flip() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DataStreamConfig::set_has_can_flip() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DataStreamConfig::clear_has_can_flip() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DataStreamConfig::clear_can_flip() {
  can_flip_ = false;
  clear_has_can_flip();
}
inline bool DataStreamConfig::can_flip() const {
  // @@protoc_insertion_point(field_get:config.DataStreamConfig.can_flip)
  return can_flip_;
}
inline void DataStreamConfig::set_can_flip(bool value) {
  set_has_can_flip();
  can_flip_ = value;
  // @@protoc_insertion_point(field_set:config.DataStreamConfig.can_flip)
}

// optional bool pixelwise_normalize = 9 [default = false];
inline bool DataStreamConfig::has_pixelwise_normalize() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DataStreamConfig::set_has_pixelwise_normalize() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DataStreamConfig::clear_has_pixelwise_normalize() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DataStreamConfig::clear_pixelwise_normalize() {
  pixelwise_normalize_ = false;
  clear_has_pixelwise_normalize();
}
inline bool DataStreamConfig::pixelwise_normalize() const {
  // @@protoc_insertion_point(field_get:config.DataStreamConfig.pixelwise_normalize)
  return pixelwise_normalize_;
}
inline void DataStreamConfig::set_pixelwise_normalize(bool value) {
  set_has_pixelwise_normalize();
  pixelwise_normalize_ = value;
  // @@protoc_insertion_point(field_set:config.DataStreamConfig.pixelwise_normalize)
}

// optional float pca_noise_stddev = 10 [default = 0];
inline bool DataStreamConfig::has_pca_noise_stddev() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DataStreamConfig::set_has_pca_noise_stddev() {
  _has_bits_[0] |= 0x00001000u;
}
inline void DataStreamConfig::clear_has_pca_noise_stddev() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void DataStreamConfig::clear_pca_noise_stddev() {
  pca_noise_stddev_ = 0;
  clear_has_pca_noise_stddev();
}
inline float DataStreamConfig::pca_noise_stddev() const {
  // @@protoc_insertion_point(field_get:config.DataStreamConfig.pca_noise_stddev)
  return pca_noise_stddev_;
}
inline void DataStreamConfig::set_pca_noise_stddev(float value) {
  set_has_pca_noise_stddev();
  pca_noise_stddev_ = value;
  // @@protoc_insertion_point(field_set:config.DataStreamConfig.pca_noise_stddev)
}

// optional bool normalize = 11;
inline bool DataStreamConfig::has_normalize() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DataStreamConfig::set_has_normalize() {
  _has_bits_[0] |= 0x00000800u;
}
inline void DataStreamConfig::clear_has_normalize() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void DataStreamConfig::clear_normalize() {
  normalize_ = false;
  clear_has_normalize();
}
inline bool DataStreamConfig::normalize() const {
  // @@protoc_insertion_point(field_get:config.DataStreamConfig.normalize)
  return normalize_;
}
inline void DataStreamConfig::set_normalize(bool value) {
  set_has_normalize();
  normalize_ = value;
  // @@protoc_insertion_point(field_set:config.DataStreamConfig.normalize)
}

// optional int32 gpu_id = 12 [default = 0];
inline bool DataStreamConfig::has_gpu_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void DataStreamConfig::set_has_gpu_id() {
  _has_bits_[0] |= 0x00002000u;
}
inline void DataStreamConfig::clear_has_gpu_id() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void DataStreamConfig::clear_gpu_id() {
  gpu_id_ = 0;
  clear_has_gpu_id();
}
inline ::google::protobuf::int32 DataStreamConfig::gpu_id() const {
  // @@protoc_insertion_point(field_get:config.DataStreamConfig.gpu_id)
  return gpu_id_;
}
inline void DataStreamConfig::set_gpu_id(::google::protobuf::int32 value) {
  set_has_gpu_id();
  gpu_id_ = value;
  // @@protoc_insertion_point(field_set:config.DataStreamConfig.gpu_id)
}

// optional int32 stride = 13 [default = 1];
inline bool DataStreamConfig::has_stride() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void DataStreamConfig::set_has_stride() {
  _has_bits_[0] |= 0x00400000u;
}
inline void DataStreamConfig::clear_has_stride() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void DataStreamConfig::clear_stride() {
  stride_ = 1;
  clear_has_stride();
}
inline ::google::protobuf::int32 DataStreamConfig::stride() const {
  // @@protoc_insertion_point(field_get:config.DataStreamConfig.stride)
  return stride_;
}
inline void DataStreamConfig::set_stride(::google::protobuf::int32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:config.DataStreamConfig.stride)
}

// optional string mean_file = 14;
inline bool DataStreamConfig::has_mean_file() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DataStreamConfig::set_has_mean_file() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DataStreamConfig::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DataStreamConfig::clear_mean_file() {
  mean_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mean_file();
}
inline const ::std::string& DataStreamConfig::mean_file() const {
  // @@protoc_insertion_point(field_get:config.DataStreamConfig.mean_file)
  return mean_file_.GetNoArena();
}
inline void DataStreamConfig::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.DataStreamConfig.mean_file)
}
#if LANG_CXX11
inline void DataStreamConfig::set_mean_file(::std::string&& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.DataStreamConfig.mean_file)
}
#endif
inline void DataStreamConfig::set_mean_file(const char* value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.DataStreamConfig.mean_file)
}
inline void DataStreamConfig::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.DataStreamConfig.mean_file)
}
inline ::std::string* DataStreamConfig::mutable_mean_file() {
  set_has_mean_file();
  // @@protoc_insertion_point(field_mutable:config.DataStreamConfig.mean_file)
  return mean_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataStreamConfig::release_mean_file() {
  // @@protoc_insertion_point(field_release:config.DataStreamConfig.mean_file)
  clear_has_mean_file();
  return mean_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataStreamConfig::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file != NULL) {
    set_has_mean_file();
  } else {
    clear_has_mean_file();
  }
  mean_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mean_file);
  // @@protoc_insertion_point(field_set_allocated:config.DataStreamConfig.mean_file)
}

// optional int32 num_colors = 15 [default = 3];
inline bool DataStreamConfig::has_num_colors() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void DataStreamConfig::set_has_num_colors() {
  _has_bits_[0] |= 0x00800000u;
}
inline void DataStreamConfig::clear_has_num_colors() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void DataStreamConfig::clear_num_colors() {
  num_colors_ = 3;
  clear_has_num_colors();
}
inline ::google::protobuf::int32 DataStreamConfig::num_colors() const {
  // @@protoc_insertion_point(field_get:config.DataStreamConfig.num_colors)
  return num_colors_;
}
inline void DataStreamConfig::set_num_colors(::google::protobuf::int32 value) {
  set_has_num_colors();
  num_colors_ = value;
  // @@protoc_insertion_point(field_set:config.DataStreamConfig.num_colors)
}

// optional bool parallel_disk_access = 16 [default = false];
inline bool DataStreamConfig::has_parallel_disk_access() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void DataStreamConfig::set_has_parallel_disk_access() {
  _has_bits_[0] |= 0x00010000u;
}
inline void DataStreamConfig::clear_has_parallel_disk_access() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void DataStreamConfig::clear_parallel_disk_access() {
  parallel_disk_access_ = false;
  clear_has_parallel_disk_access();
}
inline bool DataStreamConfig::parallel_disk_access() const {
  // @@protoc_insertion_point(field_get:config.DataStreamConfig.parallel_disk_access)
  return parallel_disk_access_;
}
inline void DataStreamConfig::set_parallel_disk_access(bool value) {
  set_has_parallel_disk_access();
  parallel_disk_access_ = value;
  // @@protoc_insertion_point(field_set:config.DataStreamConfig.parallel_disk_access)
}

// optional bool random_rotate_raw_image = 17 [default = false];
inline bool DataStreamConfig::has_random_rotate_raw_image() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void DataStreamConfig::set_has_random_rotate_raw_image() {
  _has_bits_[0] |= 0x00020000u;
}
inline void DataStreamConfig::clear_has_random_rotate_raw_image() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void DataStreamConfig::clear_random_rotate_raw_image() {
  random_rotate_raw_image_ = false;
  clear_has_random_rotate_raw_image();
}
inline bool DataStreamConfig::random_rotate_raw_image() const {
  // @@protoc_insertion_point(field_get:config.DataStreamConfig.random_rotate_raw_image)
  return random_rotate_raw_image_;
}
inline void DataStreamConfig::set_random_rotate_raw_image(bool value) {
  set_has_random_rotate_raw_image();
  random_rotate_raw_image_ = value;
  // @@protoc_insertion_point(field_set:config.DataStreamConfig.random_rotate_raw_image)
}

// optional float random_rotate_max_angle = 18 [default = 0];
inline bool DataStreamConfig::has_random_rotate_max_angle() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void DataStreamConfig::set_has_random_rotate_max_angle() {
  _has_bits_[0] |= 0x00004000u;
}
inline void DataStreamConfig::clear_has_random_rotate_max_angle() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void DataStreamConfig::clear_random_rotate_max_angle() {
  random_rotate_max_angle_ = 0;
  clear_has_random_rotate_max_angle();
}
inline float DataStreamConfig::random_rotate_max_angle() const {
  // @@protoc_insertion_point(field_get:config.DataStreamConfig.random_rotate_max_angle)
  return random_rotate_max_angle_;
}
inline void DataStreamConfig::set_random_rotate_max_angle(float value) {
  set_has_random_rotate_max_angle();
  random_rotate_max_angle_ = value;
  // @@protoc_insertion_point(field_set:config.DataStreamConfig.random_rotate_max_angle)
}

// optional float min_scale = 19 [default = 0];
inline bool DataStreamConfig::has_min_scale() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void DataStreamConfig::set_has_min_scale() {
  _has_bits_[0] |= 0x00008000u;
}
inline void DataStreamConfig::clear_has_min_scale() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void DataStreamConfig::clear_min_scale() {
  min_scale_ = 0;
  clear_has_min_scale();
}
inline float DataStreamConfig::min_scale() const {
  // @@protoc_insertion_point(field_get:config.DataStreamConfig.min_scale)
  return min_scale_;
}
inline void DataStreamConfig::set_min_scale(float value) {
  set_has_min_scale();
  min_scale_ = value;
  // @@protoc_insertion_point(field_set:config.DataStreamConfig.min_scale)
}

// optional string noise_layer_name = 20;
inline bool DataStreamConfig::has_noise_layer_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DataStreamConfig::set_has_noise_layer_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DataStreamConfig::clear_has_noise_layer_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DataStreamConfig::clear_noise_layer_name() {
  noise_layer_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_noise_layer_name();
}
inline const ::std::string& DataStreamConfig::noise_layer_name() const {
  // @@protoc_insertion_point(field_get:config.DataStreamConfig.noise_layer_name)
  return noise_layer_name_.GetNoArena();
}
inline void DataStreamConfig::set_noise_layer_name(const ::std::string& value) {
  set_has_noise_layer_name();
  noise_layer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.DataStreamConfig.noise_layer_name)
}
#if LANG_CXX11
inline void DataStreamConfig::set_noise_layer_name(::std::string&& value) {
  set_has_noise_layer_name();
  noise_layer_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.DataStreamConfig.noise_layer_name)
}
#endif
inline void DataStreamConfig::set_noise_layer_name(const char* value) {
  set_has_noise_layer_name();
  noise_layer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.DataStreamConfig.noise_layer_name)
}
inline void DataStreamConfig::set_noise_layer_name(const char* value, size_t size) {
  set_has_noise_layer_name();
  noise_layer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.DataStreamConfig.noise_layer_name)
}
inline ::std::string* DataStreamConfig::mutable_noise_layer_name() {
  set_has_noise_layer_name();
  // @@protoc_insertion_point(field_mutable:config.DataStreamConfig.noise_layer_name)
  return noise_layer_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataStreamConfig::release_noise_layer_name() {
  // @@protoc_insertion_point(field_release:config.DataStreamConfig.noise_layer_name)
  clear_has_noise_layer_name();
  return noise_layer_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataStreamConfig::set_allocated_noise_layer_name(::std::string* noise_layer_name) {
  if (noise_layer_name != NULL) {
    set_has_noise_layer_name();
  } else {
    clear_has_noise_layer_name();
  }
  noise_layer_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), noise_layer_name);
  // @@protoc_insertion_point(field_set_allocated:config.DataStreamConfig.noise_layer_name)
}

// optional bool avg10_full_image = 21;
inline bool DataStreamConfig::has_avg10_full_image() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void DataStreamConfig::set_has_avg10_full_image() {
  _has_bits_[0] |= 0x00040000u;
}
inline void DataStreamConfig::clear_has_avg10_full_image() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void DataStreamConfig::clear_avg10_full_image() {
  avg10_full_image_ = false;
  clear_has_avg10_full_image();
}
inline bool DataStreamConfig::avg10_full_image() const {
  // @@protoc_insertion_point(field_get:config.DataStreamConfig.avg10_full_image)
  return avg10_full_image_;
}
inline void DataStreamConfig::set_avg10_full_image(bool value) {
  set_has_avg10_full_image();
  avg10_full_image_ = value;
  // @@protoc_insertion_point(field_set:config.DataStreamConfig.avg10_full_image)
}

// optional string bbox_file = 22;
inline bool DataStreamConfig::has_bbox_file() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DataStreamConfig::set_has_bbox_file() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DataStreamConfig::clear_has_bbox_file() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DataStreamConfig::clear_bbox_file() {
  bbox_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bbox_file();
}
inline const ::std::string& DataStreamConfig::bbox_file() const {
  // @@protoc_insertion_point(field_get:config.DataStreamConfig.bbox_file)
  return bbox_file_.GetNoArena();
}
inline void DataStreamConfig::set_bbox_file(const ::std::string& value) {
  set_has_bbox_file();
  bbox_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.DataStreamConfig.bbox_file)
}
#if LANG_CXX11
inline void DataStreamConfig::set_bbox_file(::std::string&& value) {
  set_has_bbox_file();
  bbox_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.DataStreamConfig.bbox_file)
}
#endif
inline void DataStreamConfig::set_bbox_file(const char* value) {
  set_has_bbox_file();
  bbox_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.DataStreamConfig.bbox_file)
}
inline void DataStreamConfig::set_bbox_file(const char* value, size_t size) {
  set_has_bbox_file();
  bbox_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.DataStreamConfig.bbox_file)
}
inline ::std::string* DataStreamConfig::mutable_bbox_file() {
  set_has_bbox_file();
  // @@protoc_insertion_point(field_mutable:config.DataStreamConfig.bbox_file)
  return bbox_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataStreamConfig::release_bbox_file() {
  // @@protoc_insertion_point(field_release:config.DataStreamConfig.bbox_file)
  clear_has_bbox_file();
  return bbox_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataStreamConfig::set_allocated_bbox_file(::std::string* bbox_file) {
  if (bbox_file != NULL) {
    set_has_bbox_file();
  } else {
    clear_has_bbox_file();
  }
  bbox_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bbox_file);
  // @@protoc_insertion_point(field_set_allocated:config.DataStreamConfig.bbox_file)
}

// optional float context_factor = 23 [default = 1];
inline bool DataStreamConfig::has_context_factor() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void DataStreamConfig::set_has_context_factor() {
  _has_bits_[0] |= 0x01000000u;
}
inline void DataStreamConfig::clear_has_context_factor() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void DataStreamConfig::clear_context_factor() {
  context_factor_ = 1;
  clear_has_context_factor();
}
inline float DataStreamConfig::context_factor() const {
  // @@protoc_insertion_point(field_get:config.DataStreamConfig.context_factor)
  return context_factor_;
}
inline void DataStreamConfig::set_context_factor(float value) {
  set_has_context_factor();
  context_factor_ = value;
  // @@protoc_insertion_point(field_set:config.DataStreamConfig.context_factor)
}

// optional bool center_on_bbox = 24 [default = false];
inline bool DataStreamConfig::has_center_on_bbox() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void DataStreamConfig::set_has_center_on_bbox() {
  _has_bits_[0] |= 0x00080000u;
}
inline void DataStreamConfig::clear_has_center_on_bbox() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void DataStreamConfig::clear_center_on_bbox() {
  center_on_bbox_ = false;
  clear_has_center_on_bbox();
}
inline bool DataStreamConfig::center_on_bbox() const {
  // @@protoc_insertion_point(field_get:config.DataStreamConfig.center_on_bbox)
  return center_on_bbox_;
}
inline void DataStreamConfig::set_center_on_bbox(bool value) {
  set_has_center_on_bbox();
  center_on_bbox_ = value;
  // @@protoc_insertion_point(field_set:config.DataStreamConfig.center_on_bbox)
}

// optional bool warp_bbox = 25 [default = false];
inline bool DataStreamConfig::has_warp_bbox() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void DataStreamConfig::set_has_warp_bbox() {
  _has_bits_[0] |= 0x00100000u;
}
inline void DataStreamConfig::clear_has_warp_bbox() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void DataStreamConfig::clear_warp_bbox() {
  warp_bbox_ = false;
  clear_has_warp_bbox();
}
inline bool DataStreamConfig::warp_bbox() const {
  // @@protoc_insertion_point(field_get:config.DataStreamConfig.warp_bbox)
  return warp_bbox_;
}
inline void DataStreamConfig::set_warp_bbox(bool value) {
  set_has_warp_bbox();
  warp_bbox_ = value;
  // @@protoc_insertion_point(field_set:config.DataStreamConfig.warp_bbox)
}

// -------------------------------------------------------------------

// DatasetConfig

// repeated .config.DataStreamConfig data_config = 1;
inline int DatasetConfig::data_config_size() const {
  return data_config_.size();
}
inline void DatasetConfig::clear_data_config() {
  data_config_.Clear();
}
inline const ::config::DataStreamConfig& DatasetConfig::data_config(int index) const {
  // @@protoc_insertion_point(field_get:config.DatasetConfig.data_config)
  return data_config_.Get(index);
}
inline ::config::DataStreamConfig* DatasetConfig::mutable_data_config(int index) {
  // @@protoc_insertion_point(field_mutable:config.DatasetConfig.data_config)
  return data_config_.Mutable(index);
}
inline ::config::DataStreamConfig* DatasetConfig::add_data_config() {
  // @@protoc_insertion_point(field_add:config.DatasetConfig.data_config)
  return data_config_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::config::DataStreamConfig >*
DatasetConfig::mutable_data_config() {
  // @@protoc_insertion_point(field_mutable_list:config.DatasetConfig.data_config)
  return &data_config_;
}
inline const ::google::protobuf::RepeatedPtrField< ::config::DataStreamConfig >&
DatasetConfig::data_config() const {
  // @@protoc_insertion_point(field_list:config.DatasetConfig.data_config)
  return data_config_;
}

// optional int32 batch_size = 2 [default = 1];
inline bool DatasetConfig::has_batch_size() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DatasetConfig::set_has_batch_size() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DatasetConfig::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DatasetConfig::clear_batch_size() {
  batch_size_ = 1;
  clear_has_batch_size();
}
inline ::google::protobuf::int32 DatasetConfig::batch_size() const {
  // @@protoc_insertion_point(field_get:config.DatasetConfig.batch_size)
  return batch_size_;
}
inline void DatasetConfig::set_batch_size(::google::protobuf::int32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:config.DatasetConfig.batch_size)
}

// optional int32 chunk_size = 3 [default = 0];
inline bool DatasetConfig::has_chunk_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DatasetConfig::set_has_chunk_size() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DatasetConfig::clear_has_chunk_size() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DatasetConfig::clear_chunk_size() {
  chunk_size_ = 0;
  clear_has_chunk_size();
}
inline ::google::protobuf::int32 DatasetConfig::chunk_size() const {
  // @@protoc_insertion_point(field_get:config.DatasetConfig.chunk_size)
  return chunk_size_;
}
inline void DatasetConfig::set_chunk_size(::google::protobuf::int32 value) {
  set_has_chunk_size();
  chunk_size_ = value;
  // @@protoc_insertion_point(field_set:config.DatasetConfig.chunk_size)
}

// optional int32 max_reuse_count = 4 [default = 0];
inline bool DatasetConfig::has_max_reuse_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DatasetConfig::set_has_max_reuse_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DatasetConfig::clear_has_max_reuse_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DatasetConfig::clear_max_reuse_count() {
  max_reuse_count_ = 0;
  clear_has_max_reuse_count();
}
inline ::google::protobuf::int32 DatasetConfig::max_reuse_count() const {
  // @@protoc_insertion_point(field_get:config.DatasetConfig.max_reuse_count)
  return max_reuse_count_;
}
inline void DatasetConfig::set_max_reuse_count(::google::protobuf::int32 value) {
  set_has_max_reuse_count();
  max_reuse_count_ = value;
  // @@protoc_insertion_point(field_set:config.DatasetConfig.max_reuse_count)
}

// optional bool pipeline_loads = 5 [default = false];
inline bool DatasetConfig::has_pipeline_loads() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DatasetConfig::set_has_pipeline_loads() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DatasetConfig::clear_has_pipeline_loads() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DatasetConfig::clear_pipeline_loads() {
  pipeline_loads_ = false;
  clear_has_pipeline_loads();
}
inline bool DatasetConfig::pipeline_loads() const {
  // @@protoc_insertion_point(field_get:config.DatasetConfig.pipeline_loads)
  return pipeline_loads_;
}
inline void DatasetConfig::set_pipeline_loads(bool value) {
  set_has_pipeline_loads();
  pipeline_loads_ = value;
  // @@protoc_insertion_point(field_set:config.DatasetConfig.pipeline_loads)
}

// optional bool randomize_cpu = 6 [default = false];
inline bool DatasetConfig::has_randomize_cpu() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DatasetConfig::set_has_randomize_cpu() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DatasetConfig::clear_has_randomize_cpu() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DatasetConfig::clear_randomize_cpu() {
  randomize_cpu_ = false;
  clear_has_randomize_cpu();
}
inline bool DatasetConfig::randomize_cpu() const {
  // @@protoc_insertion_point(field_get:config.DatasetConfig.randomize_cpu)
  return randomize_cpu_;
}
inline void DatasetConfig::set_randomize_cpu(bool value) {
  set_has_randomize_cpu();
  randomize_cpu_ = value;
  // @@protoc_insertion_point(field_set:config.DatasetConfig.randomize_cpu)
}

// optional bool randomize_gpu = 7 [default = false];
inline bool DatasetConfig::has_randomize_gpu() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DatasetConfig::set_has_randomize_gpu() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DatasetConfig::clear_has_randomize_gpu() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DatasetConfig::clear_randomize_gpu() {
  randomize_gpu_ = false;
  clear_has_randomize_gpu();
}
inline bool DatasetConfig::randomize_gpu() const {
  // @@protoc_insertion_point(field_get:config.DatasetConfig.randomize_gpu)
  return randomize_gpu_;
}
inline void DatasetConfig::set_randomize_gpu(bool value) {
  set_has_randomize_gpu();
  randomize_gpu_ = value;
  // @@protoc_insertion_point(field_set:config.DatasetConfig.randomize_gpu)
}

// optional int32 random_access_chunk_size = 8 [default = 1];
inline bool DatasetConfig::has_random_access_chunk_size() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DatasetConfig::set_has_random_access_chunk_size() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DatasetConfig::clear_has_random_access_chunk_size() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DatasetConfig::clear_random_access_chunk_size() {
  random_access_chunk_size_ = 1;
  clear_has_random_access_chunk_size();
}
inline ::google::protobuf::int32 DatasetConfig::random_access_chunk_size() const {
  // @@protoc_insertion_point(field_get:config.DatasetConfig.random_access_chunk_size)
  return random_access_chunk_size_;
}
inline void DatasetConfig::set_random_access_chunk_size(::google::protobuf::int32 value) {
  set_has_random_access_chunk_size();
  random_access_chunk_size_ = value;
  // @@protoc_insertion_point(field_set:config.DatasetConfig.random_access_chunk_size)
}

// optional int32 max_dataset_size = 9 [default = 0];
inline bool DatasetConfig::has_max_dataset_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DatasetConfig::set_has_max_dataset_size() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DatasetConfig::clear_has_max_dataset_size() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DatasetConfig::clear_max_dataset_size() {
  max_dataset_size_ = 0;
  clear_has_max_dataset_size();
}
inline ::google::protobuf::int32 DatasetConfig::max_dataset_size() const {
  // @@protoc_insertion_point(field_get:config.DatasetConfig.max_dataset_size)
  return max_dataset_size_;
}
inline void DatasetConfig::set_max_dataset_size(::google::protobuf::int32 value) {
  set_has_max_dataset_size();
  max_dataset_size_ = value;
  // @@protoc_insertion_point(field_set:config.DatasetConfig.max_dataset_size)
}

// optional int32 multiplicity = 10 [default = 1];
inline bool DatasetConfig::has_multiplicity() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DatasetConfig::set_has_multiplicity() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DatasetConfig::clear_has_multiplicity() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DatasetConfig::clear_multiplicity() {
  multiplicity_ = 1;
  clear_has_multiplicity();
}
inline ::google::protobuf::int32 DatasetConfig::multiplicity() const {
  // @@protoc_insertion_point(field_get:config.DatasetConfig.multiplicity)
  return multiplicity_;
}
inline void DatasetConfig::set_multiplicity(::google::protobuf::int32 value) {
  set_has_multiplicity();
  multiplicity_ = value;
  // @@protoc_insertion_point(field_set:config.DatasetConfig.multiplicity)
}

// -------------------------------------------------------------------

// FeatureStreamConfig

// required string layer = 1;
inline bool FeatureStreamConfig::has_layer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FeatureStreamConfig::set_has_layer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FeatureStreamConfig::clear_has_layer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FeatureStreamConfig::clear_layer() {
  layer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_layer();
}
inline const ::std::string& FeatureStreamConfig::layer() const {
  // @@protoc_insertion_point(field_get:config.FeatureStreamConfig.layer)
  return layer_.GetNoArena();
}
inline void FeatureStreamConfig::set_layer(const ::std::string& value) {
  set_has_layer();
  layer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.FeatureStreamConfig.layer)
}
#if LANG_CXX11
inline void FeatureStreamConfig::set_layer(::std::string&& value) {
  set_has_layer();
  layer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.FeatureStreamConfig.layer)
}
#endif
inline void FeatureStreamConfig::set_layer(const char* value) {
  set_has_layer();
  layer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.FeatureStreamConfig.layer)
}
inline void FeatureStreamConfig::set_layer(const char* value, size_t size) {
  set_has_layer();
  layer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.FeatureStreamConfig.layer)
}
inline ::std::string* FeatureStreamConfig::mutable_layer() {
  set_has_layer();
  // @@protoc_insertion_point(field_mutable:config.FeatureStreamConfig.layer)
  return layer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FeatureStreamConfig::release_layer() {
  // @@protoc_insertion_point(field_release:config.FeatureStreamConfig.layer)
  clear_has_layer();
  return layer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FeatureStreamConfig::set_allocated_layer(::std::string* layer) {
  if (layer != NULL) {
    set_has_layer();
  } else {
    clear_has_layer();
  }
  layer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), layer);
  // @@protoc_insertion_point(field_set_allocated:config.FeatureStreamConfig.layer)
}

// optional int32 average_batches = 2 [default = 1];
inline bool FeatureStreamConfig::has_average_batches() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FeatureStreamConfig::set_has_average_batches() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FeatureStreamConfig::clear_has_average_batches() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FeatureStreamConfig::clear_average_batches() {
  average_batches_ = 1;
  clear_has_average_batches();
}
inline ::google::protobuf::int32 FeatureStreamConfig::average_batches() const {
  // @@protoc_insertion_point(field_get:config.FeatureStreamConfig.average_batches)
  return average_batches_;
}
inline void FeatureStreamConfig::set_average_batches(::google::protobuf::int32 value) {
  set_has_average_batches();
  average_batches_ = value;
  // @@protoc_insertion_point(field_set:config.FeatureStreamConfig.average_batches)
}

// optional int32 average_online = 3 [default = 1];
inline bool FeatureStreamConfig::has_average_online() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FeatureStreamConfig::set_has_average_online() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FeatureStreamConfig::clear_has_average_online() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FeatureStreamConfig::clear_average_online() {
  average_online_ = 1;
  clear_has_average_online();
}
inline ::google::protobuf::int32 FeatureStreamConfig::average_online() const {
  // @@protoc_insertion_point(field_get:config.FeatureStreamConfig.average_online)
  return average_online_;
}
inline void FeatureStreamConfig::set_average_online(::google::protobuf::int32 value) {
  set_has_average_online();
  average_online_ = value;
  // @@protoc_insertion_point(field_set:config.FeatureStreamConfig.average_online)
}

// -------------------------------------------------------------------

// FeatureExtractorConfig

// required string output_file = 1;
inline bool FeatureExtractorConfig::has_output_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FeatureExtractorConfig::set_has_output_file() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FeatureExtractorConfig::clear_has_output_file() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FeatureExtractorConfig::clear_output_file() {
  output_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_output_file();
}
inline const ::std::string& FeatureExtractorConfig::output_file() const {
  // @@protoc_insertion_point(field_get:config.FeatureExtractorConfig.output_file)
  return output_file_.GetNoArena();
}
inline void FeatureExtractorConfig::set_output_file(const ::std::string& value) {
  set_has_output_file();
  output_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.FeatureExtractorConfig.output_file)
}
#if LANG_CXX11
inline void FeatureExtractorConfig::set_output_file(::std::string&& value) {
  set_has_output_file();
  output_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.FeatureExtractorConfig.output_file)
}
#endif
inline void FeatureExtractorConfig::set_output_file(const char* value) {
  set_has_output_file();
  output_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.FeatureExtractorConfig.output_file)
}
inline void FeatureExtractorConfig::set_output_file(const char* value, size_t size) {
  set_has_output_file();
  output_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.FeatureExtractorConfig.output_file)
}
inline ::std::string* FeatureExtractorConfig::mutable_output_file() {
  set_has_output_file();
  // @@protoc_insertion_point(field_mutable:config.FeatureExtractorConfig.output_file)
  return output_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FeatureExtractorConfig::release_output_file() {
  // @@protoc_insertion_point(field_release:config.FeatureExtractorConfig.output_file)
  clear_has_output_file();
  return output_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FeatureExtractorConfig::set_allocated_output_file(::std::string* output_file) {
  if (output_file != NULL) {
    set_has_output_file();
  } else {
    clear_has_output_file();
  }
  output_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_file);
  // @@protoc_insertion_point(field_set_allocated:config.FeatureExtractorConfig.output_file)
}

// repeated .config.FeatureStreamConfig feature = 2;
inline int FeatureExtractorConfig::feature_size() const {
  return feature_.size();
}
inline void FeatureExtractorConfig::clear_feature() {
  feature_.Clear();
}
inline const ::config::FeatureStreamConfig& FeatureExtractorConfig::feature(int index) const {
  // @@protoc_insertion_point(field_get:config.FeatureExtractorConfig.feature)
  return feature_.Get(index);
}
inline ::config::FeatureStreamConfig* FeatureExtractorConfig::mutable_feature(int index) {
  // @@protoc_insertion_point(field_mutable:config.FeatureExtractorConfig.feature)
  return feature_.Mutable(index);
}
inline ::config::FeatureStreamConfig* FeatureExtractorConfig::add_feature() {
  // @@protoc_insertion_point(field_add:config.FeatureExtractorConfig.feature)
  return feature_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::config::FeatureStreamConfig >*
FeatureExtractorConfig::mutable_feature() {
  // @@protoc_insertion_point(field_mutable_list:config.FeatureExtractorConfig.feature)
  return &feature_;
}
inline const ::google::protobuf::RepeatedPtrField< ::config::FeatureStreamConfig >&
FeatureExtractorConfig::feature() const {
  // @@protoc_insertion_point(field_list:config.FeatureExtractorConfig.feature)
  return feature_;
}

// required .config.DatasetConfig input = 3;
inline bool FeatureExtractorConfig::has_input() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FeatureExtractorConfig::set_has_input() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FeatureExtractorConfig::clear_has_input() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FeatureExtractorConfig::clear_input() {
  if (input_ != NULL) input_->::config::DatasetConfig::Clear();
  clear_has_input();
}
inline const ::config::DatasetConfig& FeatureExtractorConfig::input() const {
  // @@protoc_insertion_point(field_get:config.FeatureExtractorConfig.input)
  return input_ != NULL ? *input_
                         : *::config::DatasetConfig::internal_default_instance();
}
inline ::config::DatasetConfig* FeatureExtractorConfig::mutable_input() {
  set_has_input();
  if (input_ == NULL) {
    input_ = new ::config::DatasetConfig;
  }
  // @@protoc_insertion_point(field_mutable:config.FeatureExtractorConfig.input)
  return input_;
}
inline ::config::DatasetConfig* FeatureExtractorConfig::release_input() {
  // @@protoc_insertion_point(field_release:config.FeatureExtractorConfig.input)
  clear_has_input();
  ::config::DatasetConfig* temp = input_;
  input_ = NULL;
  return temp;
}
inline void FeatureExtractorConfig::set_allocated_input(::config::DatasetConfig* input) {
  delete input_;
  input_ = input;
  if (input) {
    set_has_input();
  } else {
    clear_has_input();
  }
  // @@protoc_insertion_point(field_set_allocated:config.FeatureExtractorConfig.input)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace config

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::config::Layer_Activation> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::config::Layer_Activation>() {
  return ::config::Layer_Activation_descriptor();
}
template <> struct is_proto_enum< ::config::Optimizer_OptimizerType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::config::Optimizer_OptimizerType>() {
  return ::config::Optimizer_OptimizerType_descriptor();
}
template <> struct is_proto_enum< ::config::Optimizer_Decay> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::config::Optimizer_Decay>() {
  return ::config::Optimizer_Decay_descriptor();
}
template <> struct is_proto_enum< ::config::Edge_EdgeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::config::Edge_EdgeType>() {
  return ::config::Edge_EdgeType_descriptor();
}
template <> struct is_proto_enum< ::config::Edge_Initialization> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::config::Edge_Initialization>() {
  return ::config::Edge_Initialization_descriptor();
}
template <> struct is_proto_enum< ::config::DataStreamConfig_DataType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::config::DataStreamConfig_DataType>() {
  return ::config::DataStreamConfig_DataType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_convnet_5fconfig_2eproto__INCLUDED

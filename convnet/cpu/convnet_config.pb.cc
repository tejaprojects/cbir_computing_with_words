// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: convnet_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "convnet_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace config {
class LayerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Layer> {
} _Layer_default_instance_;
class OptimizerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Optimizer> {
} _Optimizer_default_instance_;
class EdgeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Edge> {
} _Edge_default_instance_;
class Subnet_MergeLayerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Subnet_MergeLayer> {
} _Subnet_MergeLayer_default_instance_;
class SubnetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Subnet> {
} _Subnet_default_instance_;
class ModelDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Model> {
} _Model_default_instance_;
class DataStreamConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DataStreamConfig> {
} _DataStreamConfig_default_instance_;
class DatasetConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DatasetConfig> {
} _DatasetConfig_default_instance_;
class FeatureStreamConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FeatureStreamConfig> {
} _FeatureStreamConfig_default_instance_;
class FeatureExtractorConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FeatureExtractorConfig> {
} _FeatureExtractorConfig_default_instance_;

namespace protobuf_convnet_5fconfig_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[10];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[6];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, num_channels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, dropprob_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, is_input_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, activation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, is_spatial_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, is_classifier_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, display_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, is_output_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, gaussian_dropout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, max_act_gaussian_dropout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, gpu_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Layer, hinge_margin_),
  0,
  1,
  12,
  2,
  4,
  3,
  5,
  6,
  7,
  8,
  9,
  13,
  10,
  11,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimizer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimizer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimizer, optimizer_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimizer, epsilon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimizer, epsilon_decay_timescale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimizer, initial_momentum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimizer, final_momentum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimizer, momentum_transition_timescale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimizer, l2_decay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimizer, weight_norm_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimizer, weight_norm_constraint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimizer, epsilon_decay_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimizer, minimum_epsilon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimizer, gradient_clip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimizer, lbfgs_memory_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Optimizer, start_optimization_after_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  13,
  11,
  12,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, dest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, edge_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, kernel_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, stride_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, padding_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, initialization_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, init_wt_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, init_bias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, weight_optimizer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, bias_optimizer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, shared_bias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, block_backprop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, tied_to_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, has_no_bias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, scale_gradients_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, partial_sum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, sample_factor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, response_norm_in_blocks_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, add_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, pow_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, frac_of_filters_response_norm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, polyak_queue_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, gpu_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, pretrained_model_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, pretrained_edge_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Edge, display_),
  0,
  1,
  7,
  21,
  22,
  8,
  23,
  24,
  9,
  5,
  6,
  10,
  11,
  2,
  12,
  25,
  14,
  26,
  13,
  15,
  16,
  17,
  18,
  19,
  3,
  4,
  20,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subnet_MergeLayer, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subnet_MergeLayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subnet_MergeLayer, subnet_layer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subnet_MergeLayer, net_layer_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subnet, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subnet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subnet, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subnet, model_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subnet, parameters_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subnet, merge_layer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subnet, block_backprop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subnet, start_optimization_after_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subnet, gpu_id_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subnet, num_channels_multiplier_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Subnet, remove_layer_),
  0,
  1,
  2,
  ~0u,
  3,
  4,
  5,
  6,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, layer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, edge_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, seed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, max_iter_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, display_after_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, save_after_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, image_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, patch_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, print_after_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, localizer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, checkpoint_dir_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, print_weights_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, display_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, validate_after_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, reduce_lr_factor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, reduce_lr_threshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, reduce_lr_num_steps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, reduce_lr_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, smaller_is_better_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, polyak_after_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, polyak_queue_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Model, subnet_),
  0,
  ~0u,
  ~0u,
  2,
  14,
  15,
  16,
  3,
  4,
  17,
  5,
  1,
  6,
  ~0u,
  7,
  18,
  19,
  9,
  10,
  11,
  8,
  12,
  13,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStreamConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStreamConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStreamConfig, file_pattern_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStreamConfig, layer_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStreamConfig, dataset_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStreamConfig, data_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStreamConfig, raw_image_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStreamConfig, image_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStreamConfig, can_translate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStreamConfig, can_flip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStreamConfig, pixelwise_normalize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStreamConfig, pca_noise_stddev_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStreamConfig, normalize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStreamConfig, gpu_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStreamConfig, stride_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStreamConfig, mean_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStreamConfig, num_colors_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStreamConfig, parallel_disk_access_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStreamConfig, random_rotate_raw_image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStreamConfig, random_rotate_max_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStreamConfig, min_scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStreamConfig, noise_layer_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStreamConfig, avg10_full_image_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStreamConfig, bbox_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStreamConfig, context_factor_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStreamConfig, center_on_bbox_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataStreamConfig, warp_bbox_),
  0,
  1,
  2,
  21,
  6,
  7,
  8,
  9,
  10,
  12,
  11,
  13,
  22,
  3,
  23,
  16,
  17,
  14,
  15,
  4,
  18,
  5,
  24,
  19,
  20,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetConfig, data_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetConfig, batch_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetConfig, chunk_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetConfig, max_reuse_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetConfig, pipeline_loads_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetConfig, randomize_cpu_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetConfig, randomize_gpu_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetConfig, random_access_chunk_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetConfig, max_dataset_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DatasetConfig, multiplicity_),
  ~0u,
  7,
  0,
  1,
  2,
  3,
  4,
  8,
  5,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureStreamConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureStreamConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureStreamConfig, layer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureStreamConfig, average_batches_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureStreamConfig, average_online_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureExtractorConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureExtractorConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureExtractorConfig, output_file_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureExtractorConfig, feature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FeatureExtractorConfig, input_),
  0,
  ~0u,
  1,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 18, sizeof(Layer)},
  { 32, 50, sizeof(Optimizer)},
  { 64, 95, sizeof(Edge)},
  { 122, 128, sizeof(Subnet_MergeLayer)},
  { 130, 143, sizeof(Subnet)},
  { 152, 180, sizeof(Model)},
  { 204, 233, sizeof(DataStreamConfig)},
  { 258, 272, sizeof(DatasetConfig)},
  { 282, 289, sizeof(FeatureStreamConfig)},
  { 292, 299, sizeof(FeatureExtractorConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Layer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Optimizer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Edge_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Subnet_MergeLayer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Subnet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Model_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DataStreamConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DatasetConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FeatureStreamConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FeatureExtractorConfig_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "convnet_config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

}  // namespace

void TableStruct::Shutdown() {
  _Layer_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Optimizer_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Edge_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Subnet_MergeLayer_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Subnet_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _Model_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _DataStreamConfig_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _DatasetConfig_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _FeatureStreamConfig_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _FeatureExtractorConfig_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Layer_default_instance_.DefaultConstruct();
  _Optimizer_default_instance_.DefaultConstruct();
  _Edge_default_instance_.DefaultConstruct();
  _Subnet_MergeLayer_default_instance_.DefaultConstruct();
  _Subnet_default_instance_.DefaultConstruct();
  _Model_default_instance_.DefaultConstruct();
  _DataStreamConfig_default_instance_.DefaultConstruct();
  _DatasetConfig_default_instance_.DefaultConstruct();
  _FeatureStreamConfig_default_instance_.DefaultConstruct();
  _FeatureExtractorConfig_default_instance_.DefaultConstruct();
  _Edge_default_instance_.get_mutable()->weight_optimizer_ = const_cast< ::config::Optimizer*>(
      ::config::Optimizer::internal_default_instance());
  _Edge_default_instance_.get_mutable()->bias_optimizer_ = const_cast< ::config::Optimizer*>(
      ::config::Optimizer::internal_default_instance());
  _FeatureExtractorConfig_default_instance_.get_mutable()->input_ = const_cast< ::config::DatasetConfig*>(
      ::config::DatasetConfig::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\024convnet_config.proto\022\006config\"\222\004\n\005Layer"
      "\022\014\n\004name\030\001 \002(\t\022\024\n\014num_channels\030\002 \001(\005\022\020\n\004"
      "size\030\003 \001(\005:\002-1\022\023\n\010dropprob\030\004 \001(\002:\0010\022\027\n\010i"
      "s_input\030\005 \001(\010:\005false\0224\n\nactivation\030\006 \001(\016"
      "2\030.config.Layer.Activation:\006LINEAR\022 \n\021is"
      "_spatial_output\030\007 \001(\010:\005false\022#\n\024is_class"
      "ifier_output\030\010 \001(\010:\005false\022\026\n\007display\030\t \001"
      "(\010:\005false\022\030\n\tis_output\030\n \001(\010:\005false\022\037\n\020g"
      "aussian_dropout\030\013 \001(\010:\005false\022$\n\030max_act_"
      "gaussian_dropout\030\014 \001(\002:\002-1\022\021\n\006gpu_id\030\r \001"
      "(\005:\0010\022\027\n\014hinge_margin\030\016 \001(\002:\0010\"\202\001\n\nActiv"
      "ation\022\n\n\006LINEAR\020\000\022\014\n\010LOGISTIC\020\001\022\024\n\020RECTI"
      "FIED_LINEAR\020\002\022\013\n\007SOFTMAX\020\003\022\020\n\014SOFTMAX_DI"
      "ST\020\004\022\020\n\014HINGE_LINEAR\020\005\022\023\n\017HINGE_QUADRATI"
      "C\020\006\"\370\004\n\tOptimizer\022T\n\016optimizer_type\030\001 \001("
      "\0162\037.config.Optimizer.OptimizerType:\033STOC"
      "HASTIC_GRADIENT_DESCENT\022\022\n\007epsilon\030\002 \001(\002"
      ":\0010\022\"\n\027epsilon_decay_timescale\030\003 \001(\005:\0010\022"
      "\033\n\020initial_momentum\030\004 \001(\002:\0010\022\031\n\016final_mo"
      "mentum\030\005 \001(\002:\0010\022(\n\035momentum_transition_t"
      "imescale\030\006 \001(\005:\0010\022\023\n\010l2_decay\030\007 \001(\002:\0010\022\034"
      "\n\021weight_norm_limit\030\010 \001(\002:\0010\022!\n\026weight_n"
      "orm_constraint\030\t \001(\002:\0010\0224\n\repsilon_decay"
      "\030\n \001(\0162\027.config.Optimizer.Decay:\004NONE\022\032\n"
      "\017minimum_epsilon\030\013 \001(\002:\0010\022\031\n\rgradient_cl"
      "ip\030\014 \001(\002:\002-1\022\027\n\014lbfgs_memory\030\r \001(\005:\0010\022#\n"
      "\030start_optimization_after\030\016 \001(\005:\0010\";\n\rOp"
      "timizerType\022\037\n\033STOCHASTIC_GRADIENT_DESCE"
      "NT\020\000\022\t\n\005LBFGS\020\001\"=\n\005Decay\022\010\n\004NONE\020\000\022\r\n\tIN"
      "VERSE_T\020\001\022\017\n\013EXPONENTIAL\020\002\022\n\n\006LINEAR\020\003\"\352"
      "\010\n\004Edge\022\016\n\006source\030\001 \002(\t\022\014\n\004dest\030\002 \002(\t\022,\n"
      "\tedge_type\030\003 \001(\0162\025.config.Edge.EdgeType:"
      "\002FC\022\027\n\013kernel_size\030\004 \001(\005:\002-1\022\021\n\006stride\030\005"
      " \001(\005:\0011\022\022\n\007padding\030\006 \001(\005:\0010\022O\n\016initializ"
      "ation\030\007 \001(\0162\033.config.Edge.Initialization"
      ":\032DENSE_GAUSSIAN_SQRT_FAN_IN\022\022\n\007init_wt\030"
      "\010 \001(\002:\0011\022\024\n\tinit_bias\030\t \001(\002:\0010\022+\n\020weight"
      "_optimizer\030\n \001(\0132\021.config.Optimizer\022)\n\016b"
      "ias_optimizer\030\013 \001(\0132\021.config.Optimizer\022\032"
      "\n\013shared_bias\030\014 \001(\010:\005false\022\035\n\016block_back"
      "prop\030\r \001(\010:\005false\022\017\n\007tied_to\030\016 \001(\t\022\032\n\013ha"
      "s_no_bias\030\017 \001(\010:\005false\022\032\n\017scale_gradient"
      "s\030\020 \001(\002:\0011\022\026\n\013partial_sum\030\021 \001(\005:\0010\022\030\n\rsa"
      "mple_factor\030\022 \001(\005:\0011\022&\n\027response_norm_in"
      "_blocks\030\023 \001(\010:\005false\022\024\n\tadd_scale\030\024 \001(\002:"
      "\0010\022\024\n\tpow_scale\030\025 \001(\002:\0010\022(\n\035frac_of_filt"
      "ers_response_norm\030\026 \001(\002:\0010\022\034\n\021polyak_que"
      "ue_size\030\027 \001(\005:\0010\022\021\n\006gpu_id\030\030 \001(\005:\0010\022\030\n\020p"
      "retrained_model\030\031 \001(\t\022\034\n\024pretrained_edge"
      "_name\030\032 \001(\t\022\026\n\007display\030\033 \001(\010:\005false\"\241\001\n\010"
      "EdgeType\022\006\n\002FC\020\000\022\021\n\rCONVOLUTIONAL\020\001\022\t\n\005L"
      "OCAL\020\002\022\013\n\007MAXPOOL\020\003\022\021\n\rRESPONSE_NORM\020\004\022\014"
      "\n\010UPSAMPLE\020\005\022\016\n\nDOWNSAMPLE\020\006\022\014\n\010RGBTOYUV"
      "\020\007\022\020\n\014AVERAGE_POOL\020\010\022\021\n\rCONV_ONETOONE\020\t\""
      "\251\001\n\016Initialization\022\022\n\016DENSE_GAUSSIAN\020\000\022\023"
      "\n\017SPARSE_GAUSSIAN\020\001\022\014\n\010CONSTANT\020\002\022\036\n\032DEN"
      "SE_GAUSSIAN_SQRT_FAN_IN\020\003\022\016\n\nPRETRAINED\020"
      "\004\022\021\n\rDENSE_UNIFORM\020\005\022\035\n\031DENSE_UNIFORM_SQ"
      "RT_FAN_IN\020\006\"\302\002\n\006Subnet\022\014\n\004name\030\001 \002(\t\022\022\n\n"
      "model_file\030\002 \002(\t\022\027\n\017parameters_file\030\003 \001("
      "\t\022.\n\013merge_layer\030\004 \003(\0132\031.config.Subnet.M"
      "ergeLayer\022\035\n\016block_backprop\030\005 \001(\010:\005false"
      "\022#\n\030start_optimization_after\030\006 \001(\005:\0010\022\030\n"
      "\rgpu_id_offset\030\007 \001(\005:\0010\022\"\n\027num_channels_"
      "multiplier\030\010 \001(\005:\0011\022\024\n\014remove_layer\030\t \003("
      "\t\0325\n\nMergeLayer\022\024\n\014subnet_layer\030\001 \002(\t\022\021\n"
      "\tnet_layer\030\002 \002(\t\"\364\004\n\005Model\022\014\n\004name\030\001 \002(\t"
      "\022\034\n\005layer\030\002 \003(\0132\r.config.Layer\022\032\n\004edge\030\003"
      " \003(\0132\014.config.Edge\022\014\n\004seed\030\004 \002(\005\022\024\n\010max_"
      "iter\030\005 \001(\005:\002-1\022\031\n\rdisplay_after\030\006 \001(\005:\002-"
      "1\022\026\n\nsave_after\030\007 \001(\005:\002-1\022\025\n\nimage_size\030"
      "\010 \001(\005:\0010\022\025\n\npatch_size\030\t \001(\005:\0010\022\027\n\013print"
      "_after\030\n \001(\005:\002-1\022\030\n\tlocalizer\030\013 \001(\010:\005fal"
      "se\022\026\n\016checkpoint_dir\030\014 \001(\t\022\034\n\rprint_weig"
      "hts\030\r \001(\010:\005false\022\021\n\ttimestamp\030\017 \003(\t\022\026\n\007d"
      "isplay\030\021 \001(\010:\005false\022\032\n\016validate_after\030\022 "
      "\001(\005:\002-1\022\033\n\020reduce_lr_factor\030\023 \001(\002:\0011\022\036\n\023"
      "reduce_lr_threshold\030\024 \001(\002:\0010\022\036\n\023reduce_l"
      "r_num_steps\030\025 \001(\005:\0010\022\030\n\rreduce_lr_max\030\026 "
      "\001(\005:\0010\022 \n\021smaller_is_better\030\027 \001(\010:\005false"
      "\022\027\n\014polyak_after\030\030 \001(\005:\0010\022\034\n\021polyak_queu"
      "e_size\030\031 \001(\005:\0010\022\036\n\006subnet\030\032 \003(\0132\016.config"
      ".Subnet\"\244\006\n\020DataStreamConfig\022\024\n\014file_pat"
      "tern\030\001 \002(\t\022\022\n\nlayer_name\030\002 \002(\t\022\024\n\014datase"
      "t_name\030\003 \001(\t\022:\n\tdata_type\030\004 \001(\0162!.config"
      ".DataStreamConfig.DataType:\004HDF5\022\031\n\016raw_"
      "image_size\030\005 \001(\005:\0010\022\022\n\nimage_size\030\006 \001(\005\022"
      "\034\n\rcan_translate\030\007 \001(\010:\005false\022\027\n\010can_fli"
      "p\030\010 \001(\010:\005false\022\"\n\023pixelwise_normalize\030\t "
      "\001(\010:\005false\022\033\n\020pca_noise_stddev\030\n \001(\002:\0010\022"
      "\021\n\tnormalize\030\013 \001(\010\022\021\n\006gpu_id\030\014 \001(\005:\0010\022\021\n"
      "\006stride\030\r \001(\005:\0011\022\021\n\tmean_file\030\016 \001(\t\022\025\n\nn"
      "um_colors\030\017 \001(\005:\0013\022#\n\024parallel_disk_acce"
      "ss\030\020 \001(\010:\005false\022&\n\027random_rotate_raw_ima"
      "ge\030\021 \001(\010:\005false\022\"\n\027random_rotate_max_ang"
      "le\030\022 \001(\002:\0010\022\024\n\tmin_scale\030\023 \001(\002:\0010\022\030\n\020noi"
      "se_layer_name\030\024 \001(\t\022\030\n\020avg10_full_image\030"
      "\025 \001(\010\022\021\n\tbbox_file\030\026 \001(\t\022\031\n\016context_fact"
      "or\030\027 \001(\002:\0011\022\035\n\016center_on_bbox\030\030 \001(\010:\005fal"
      "se\022\030\n\twarp_bbox\030\031 \001(\010:\005false\"h\n\010DataType"
      "\022\t\n\005DUMMY\020\000\022\010\n\004HDF5\020\001\022\r\n\tIMAGE_RAW\020\002\022\022\n\016"
      "SLIDING_WINDOW\020\003\022\007\n\003TXT\020\004\022\020\n\014BOUNDING_BO"
      "X\020\005\022\t\n\005CROPS\020\006\"\276\002\n\rDatasetConfig\022-\n\013data"
      "_config\030\001 \003(\0132\030.config.DataStreamConfig\022"
      "\025\n\nbatch_size\030\002 \001(\005:\0011\022\025\n\nchunk_size\030\003 \001"
      "(\005:\0010\022\032\n\017max_reuse_count\030\004 \001(\005:\0010\022\035\n\016pip"
      "eline_loads\030\005 \001(\010:\005false\022\034\n\rrandomize_cp"
      "u\030\006 \001(\010:\005false\022\034\n\rrandomize_gpu\030\007 \001(\010:\005f"
      "alse\022#\n\030random_access_chunk_size\030\010 \001(\005:\001"
      "1\022\033\n\020max_dataset_size\030\t \001(\005:\0010\022\027\n\014multip"
      "licity\030\n \001(\005:\0011\"[\n\023FeatureStreamConfig\022\r"
      "\n\005layer\030\001 \002(\t\022\032\n\017average_batches\030\002 \001(\005:\001"
      "1\022\031\n\016average_online\030\003 \001(\005:\0011\"\201\001\n\026Feature"
      "ExtractorConfig\022\023\n\013output_file\030\001 \002(\t\022,\n\007"
      "feature\030\002 \003(\0132\033.config.FeatureStreamConf"
      "ig\022$\n\005input\030\003 \002(\0132\025.config.DatasetConfig"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4640);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "convnet_config.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_convnet_5fconfig_2eproto

const ::google::protobuf::EnumDescriptor* Layer_Activation_descriptor() {
  protobuf_convnet_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_convnet_5fconfig_2eproto::file_level_enum_descriptors[0];
}
bool Layer_Activation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Layer_Activation Layer::LINEAR;
const Layer_Activation Layer::LOGISTIC;
const Layer_Activation Layer::RECTIFIED_LINEAR;
const Layer_Activation Layer::SOFTMAX;
const Layer_Activation Layer::SOFTMAX_DIST;
const Layer_Activation Layer::HINGE_LINEAR;
const Layer_Activation Layer::HINGE_QUADRATIC;
const Layer_Activation Layer::Activation_MIN;
const Layer_Activation Layer::Activation_MAX;
const int Layer::Activation_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Optimizer_OptimizerType_descriptor() {
  protobuf_convnet_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_convnet_5fconfig_2eproto::file_level_enum_descriptors[1];
}
bool Optimizer_OptimizerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Optimizer_OptimizerType Optimizer::STOCHASTIC_GRADIENT_DESCENT;
const Optimizer_OptimizerType Optimizer::LBFGS;
const Optimizer_OptimizerType Optimizer::OptimizerType_MIN;
const Optimizer_OptimizerType Optimizer::OptimizerType_MAX;
const int Optimizer::OptimizerType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Optimizer_Decay_descriptor() {
  protobuf_convnet_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_convnet_5fconfig_2eproto::file_level_enum_descriptors[2];
}
bool Optimizer_Decay_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Optimizer_Decay Optimizer::NONE;
const Optimizer_Decay Optimizer::INVERSE_T;
const Optimizer_Decay Optimizer::EXPONENTIAL;
const Optimizer_Decay Optimizer::LINEAR;
const Optimizer_Decay Optimizer::Decay_MIN;
const Optimizer_Decay Optimizer::Decay_MAX;
const int Optimizer::Decay_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Edge_EdgeType_descriptor() {
  protobuf_convnet_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_convnet_5fconfig_2eproto::file_level_enum_descriptors[3];
}
bool Edge_EdgeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Edge_EdgeType Edge::FC;
const Edge_EdgeType Edge::CONVOLUTIONAL;
const Edge_EdgeType Edge::LOCAL;
const Edge_EdgeType Edge::MAXPOOL;
const Edge_EdgeType Edge::RESPONSE_NORM;
const Edge_EdgeType Edge::UPSAMPLE;
const Edge_EdgeType Edge::DOWNSAMPLE;
const Edge_EdgeType Edge::RGBTOYUV;
const Edge_EdgeType Edge::AVERAGE_POOL;
const Edge_EdgeType Edge::CONV_ONETOONE;
const Edge_EdgeType Edge::EdgeType_MIN;
const Edge_EdgeType Edge::EdgeType_MAX;
const int Edge::EdgeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Edge_Initialization_descriptor() {
  protobuf_convnet_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_convnet_5fconfig_2eproto::file_level_enum_descriptors[4];
}
bool Edge_Initialization_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Edge_Initialization Edge::DENSE_GAUSSIAN;
const Edge_Initialization Edge::SPARSE_GAUSSIAN;
const Edge_Initialization Edge::CONSTANT;
const Edge_Initialization Edge::DENSE_GAUSSIAN_SQRT_FAN_IN;
const Edge_Initialization Edge::PRETRAINED;
const Edge_Initialization Edge::DENSE_UNIFORM;
const Edge_Initialization Edge::DENSE_UNIFORM_SQRT_FAN_IN;
const Edge_Initialization Edge::Initialization_MIN;
const Edge_Initialization Edge::Initialization_MAX;
const int Edge::Initialization_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* DataStreamConfig_DataType_descriptor() {
  protobuf_convnet_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_convnet_5fconfig_2eproto::file_level_enum_descriptors[5];
}
bool DataStreamConfig_DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DataStreamConfig_DataType DataStreamConfig::DUMMY;
const DataStreamConfig_DataType DataStreamConfig::HDF5;
const DataStreamConfig_DataType DataStreamConfig::IMAGE_RAW;
const DataStreamConfig_DataType DataStreamConfig::SLIDING_WINDOW;
const DataStreamConfig_DataType DataStreamConfig::TXT;
const DataStreamConfig_DataType DataStreamConfig::BOUNDING_BOX;
const DataStreamConfig_DataType DataStreamConfig::CROPS;
const DataStreamConfig_DataType DataStreamConfig::DataType_MIN;
const DataStreamConfig_DataType DataStreamConfig::DataType_MAX;
const int DataStreamConfig::DataType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Layer::kNameFieldNumber;
const int Layer::kNumChannelsFieldNumber;
const int Layer::kSizeFieldNumber;
const int Layer::kDropprobFieldNumber;
const int Layer::kIsInputFieldNumber;
const int Layer::kActivationFieldNumber;
const int Layer::kIsSpatialOutputFieldNumber;
const int Layer::kIsClassifierOutputFieldNumber;
const int Layer::kDisplayFieldNumber;
const int Layer::kIsOutputFieldNumber;
const int Layer::kGaussianDropoutFieldNumber;
const int Layer::kMaxActGaussianDropoutFieldNumber;
const int Layer::kGpuIdFieldNumber;
const int Layer::kHingeMarginFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Layer::Layer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_convnet_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:config.Layer)
}
Layer::Layer(const Layer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&num_channels_, &from.num_channels_,
    reinterpret_cast<char*>(&max_act_gaussian_dropout_) -
    reinterpret_cast<char*>(&num_channels_) + sizeof(max_act_gaussian_dropout_));
  // @@protoc_insertion_point(copy_constructor:config.Layer)
}

void Layer::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&num_channels_, 0, reinterpret_cast<char*>(&hinge_margin_) -
    reinterpret_cast<char*>(&num_channels_) + sizeof(hinge_margin_));
  size_ = -1;
  max_act_gaussian_dropout_ = -1;
}

Layer::~Layer() {
  // @@protoc_insertion_point(destructor:config.Layer)
  SharedDtor();
}

void Layer::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Layer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Layer::descriptor() {
  protobuf_convnet_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_convnet_5fconfig_2eproto::file_level_metadata[0].descriptor;
}

const Layer& Layer::default_instance() {
  protobuf_convnet_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

Layer* Layer::New(::google::protobuf::Arena* arena) const {
  Layer* n = new Layer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Layer::Clear() {
// @@protoc_insertion_point(message_clear_start:config.Layer)
  if (has_name()) {
    GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*name_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&num_channels_, 0, reinterpret_cast<char*>(&display_) -
      reinterpret_cast<char*>(&num_channels_) + sizeof(display_));
  }
  if (_has_bits_[8 / 32] & 16128u) {
    ::memset(&is_output_, 0, reinterpret_cast<char*>(&hinge_margin_) -
      reinterpret_cast<char*>(&is_output_) + sizeof(hinge_margin_));
    size_ = -1;
    max_act_gaussian_dropout_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Layer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:config.Layer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "config.Layer.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_channels = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_num_channels();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_channels_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 size = 3 [default = -1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float dropprob = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_dropprob();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dropprob_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_input = 5 [default = false];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_is_input();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_input_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .config.Layer.Activation activation = 6 [default = LINEAR];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::config::Layer_Activation_IsValid(value)) {
            set_activation(static_cast< ::config::Layer_Activation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_spatial_output = 7 [default = false];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_is_spatial_output();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_spatial_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_classifier_output = 8 [default = false];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_is_classifier_output();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_classifier_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool display = 9 [default = false];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_display();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &display_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_output = 10 [default = false];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_is_output();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool gaussian_dropout = 11 [default = false];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_gaussian_dropout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gaussian_dropout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_act_gaussian_dropout = 12 [default = -1];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u)) {
          set_has_max_act_gaussian_dropout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_act_gaussian_dropout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 gpu_id = 13 [default = 0];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_gpu_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gpu_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float hinge_margin = 14 [default = 0];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u)) {
          set_has_hinge_margin();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hinge_margin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:config.Layer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:config.Layer)
  return false;
#undef DO_
}

void Layer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:config.Layer)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.Layer.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 num_channels = 2;
  if (has_num_channels()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_channels(), output);
  }

  // optional int32 size = 3 [default = -1];
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->size(), output);
  }

  // optional float dropprob = 4 [default = 0];
  if (has_dropprob()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->dropprob(), output);
  }

  // optional bool is_input = 5 [default = false];
  if (has_is_input()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_input(), output);
  }

  // optional .config.Layer.Activation activation = 6 [default = LINEAR];
  if (has_activation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->activation(), output);
  }

  // optional bool is_spatial_output = 7 [default = false];
  if (has_is_spatial_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_spatial_output(), output);
  }

  // optional bool is_classifier_output = 8 [default = false];
  if (has_is_classifier_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_classifier_output(), output);
  }

  // optional bool display = 9 [default = false];
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->display(), output);
  }

  // optional bool is_output = 10 [default = false];
  if (has_is_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_output(), output);
  }

  // optional bool gaussian_dropout = 11 [default = false];
  if (has_gaussian_dropout()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->gaussian_dropout(), output);
  }

  // optional float max_act_gaussian_dropout = 12 [default = -1];
  if (has_max_act_gaussian_dropout()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->max_act_gaussian_dropout(), output);
  }

  // optional int32 gpu_id = 13 [default = 0];
  if (has_gpu_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->gpu_id(), output);
  }

  // optional float hinge_margin = 14 [default = 0];
  if (has_hinge_margin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->hinge_margin(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:config.Layer)
}

::google::protobuf::uint8* Layer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:config.Layer)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.Layer.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 num_channels = 2;
  if (has_num_channels()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_channels(), target);
  }

  // optional int32 size = 3 [default = -1];
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->size(), target);
  }

  // optional float dropprob = 4 [default = 0];
  if (has_dropprob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->dropprob(), target);
  }

  // optional bool is_input = 5 [default = false];
  if (has_is_input()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_input(), target);
  }

  // optional .config.Layer.Activation activation = 6 [default = LINEAR];
  if (has_activation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->activation(), target);
  }

  // optional bool is_spatial_output = 7 [default = false];
  if (has_is_spatial_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_spatial_output(), target);
  }

  // optional bool is_classifier_output = 8 [default = false];
  if (has_is_classifier_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_classifier_output(), target);
  }

  // optional bool display = 9 [default = false];
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->display(), target);
  }

  // optional bool is_output = 10 [default = false];
  if (has_is_output()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_output(), target);
  }

  // optional bool gaussian_dropout = 11 [default = false];
  if (has_gaussian_dropout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->gaussian_dropout(), target);
  }

  // optional float max_act_gaussian_dropout = 12 [default = -1];
  if (has_max_act_gaussian_dropout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->max_act_gaussian_dropout(), target);
  }

  // optional int32 gpu_id = 13 [default = 0];
  if (has_gpu_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->gpu_id(), target);
  }

  // optional float hinge_margin = 14 [default = 0];
  if (has_hinge_margin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->hinge_margin(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:config.Layer)
  return target;
}

size_t Layer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:config.Layer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }
  if (_has_bits_[0 / 32] & 254u) {
    // optional int32 num_channels = 2;
    if (has_num_channels()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_channels());
    }

    // optional float dropprob = 4 [default = 0];
    if (has_dropprob()) {
      total_size += 1 + 4;
    }

    // optional .config.Layer.Activation activation = 6 [default = LINEAR];
    if (has_activation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->activation());
    }

    // optional bool is_input = 5 [default = false];
    if (has_is_input()) {
      total_size += 1 + 1;
    }

    // optional bool is_spatial_output = 7 [default = false];
    if (has_is_spatial_output()) {
      total_size += 1 + 1;
    }

    // optional bool is_classifier_output = 8 [default = false];
    if (has_is_classifier_output()) {
      total_size += 1 + 1;
    }

    // optional bool display = 9 [default = false];
    if (has_display()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional bool is_output = 10 [default = false];
    if (has_is_output()) {
      total_size += 1 + 1;
    }

    // optional bool gaussian_dropout = 11 [default = false];
    if (has_gaussian_dropout()) {
      total_size += 1 + 1;
    }

    // optional int32 gpu_id = 13 [default = 0];
    if (has_gpu_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gpu_id());
    }

    // optional float hinge_margin = 14 [default = 0];
    if (has_hinge_margin()) {
      total_size += 1 + 4;
    }

    // optional int32 size = 3 [default = -1];
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // optional float max_act_gaussian_dropout = 12 [default = -1];
    if (has_max_act_gaussian_dropout()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Layer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:config.Layer)
  GOOGLE_DCHECK_NE(&from, this);
  const Layer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Layer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:config.Layer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:config.Layer)
    MergeFrom(*source);
  }
}

void Layer::MergeFrom(const Layer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:config.Layer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_num_channels()) {
      set_num_channels(from.num_channels());
    }
    if (from.has_dropprob()) {
      set_dropprob(from.dropprob());
    }
    if (from.has_activation()) {
      set_activation(from.activation());
    }
    if (from.has_is_input()) {
      set_is_input(from.is_input());
    }
    if (from.has_is_spatial_output()) {
      set_is_spatial_output(from.is_spatial_output());
    }
    if (from.has_is_classifier_output()) {
      set_is_classifier_output(from.is_classifier_output());
    }
    if (from.has_display()) {
      set_display(from.display());
    }
  }
  if (from._has_bits_[8 / 32] & 16128u) {
    if (from.has_is_output()) {
      set_is_output(from.is_output());
    }
    if (from.has_gaussian_dropout()) {
      set_gaussian_dropout(from.gaussian_dropout());
    }
    if (from.has_gpu_id()) {
      set_gpu_id(from.gpu_id());
    }
    if (from.has_hinge_margin()) {
      set_hinge_margin(from.hinge_margin());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_max_act_gaussian_dropout()) {
      set_max_act_gaussian_dropout(from.max_act_gaussian_dropout());
    }
  }
}

void Layer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:config.Layer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Layer::CopyFrom(const Layer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:config.Layer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Layer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Layer::Swap(Layer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Layer::InternalSwap(Layer* other) {
  name_.Swap(&other->name_);
  std::swap(num_channels_, other->num_channels_);
  std::swap(dropprob_, other->dropprob_);
  std::swap(activation_, other->activation_);
  std::swap(is_input_, other->is_input_);
  std::swap(is_spatial_output_, other->is_spatial_output_);
  std::swap(is_classifier_output_, other->is_classifier_output_);
  std::swap(display_, other->display_);
  std::swap(is_output_, other->is_output_);
  std::swap(gaussian_dropout_, other->gaussian_dropout_);
  std::swap(gpu_id_, other->gpu_id_);
  std::swap(hinge_margin_, other->hinge_margin_);
  std::swap(size_, other->size_);
  std::swap(max_act_gaussian_dropout_, other->max_act_gaussian_dropout_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Layer::GetMetadata() const {
  protobuf_convnet_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_convnet_5fconfig_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Layer

// required string name = 1;
bool Layer::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Layer::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Layer::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Layer::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& Layer::name() const {
  // @@protoc_insertion_point(field_get:config.Layer.name)
  return name_.GetNoArena();
}
void Layer::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.Layer.name)
}
#if LANG_CXX11
void Layer::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.Layer.name)
}
#endif
void Layer::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.Layer.name)
}
void Layer::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.Layer.name)
}
::std::string* Layer::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:config.Layer.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Layer::release_name() {
  // @@protoc_insertion_point(field_release:config.Layer.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Layer::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:config.Layer.name)
}

// optional int32 num_channels = 2;
bool Layer::has_num_channels() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Layer::set_has_num_channels() {
  _has_bits_[0] |= 0x00000002u;
}
void Layer::clear_has_num_channels() {
  _has_bits_[0] &= ~0x00000002u;
}
void Layer::clear_num_channels() {
  num_channels_ = 0;
  clear_has_num_channels();
}
::google::protobuf::int32 Layer::num_channels() const {
  // @@protoc_insertion_point(field_get:config.Layer.num_channels)
  return num_channels_;
}
void Layer::set_num_channels(::google::protobuf::int32 value) {
  set_has_num_channels();
  num_channels_ = value;
  // @@protoc_insertion_point(field_set:config.Layer.num_channels)
}

// optional int32 size = 3 [default = -1];
bool Layer::has_size() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Layer::set_has_size() {
  _has_bits_[0] |= 0x00001000u;
}
void Layer::clear_has_size() {
  _has_bits_[0] &= ~0x00001000u;
}
void Layer::clear_size() {
  size_ = -1;
  clear_has_size();
}
::google::protobuf::int32 Layer::size() const {
  // @@protoc_insertion_point(field_get:config.Layer.size)
  return size_;
}
void Layer::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:config.Layer.size)
}

// optional float dropprob = 4 [default = 0];
bool Layer::has_dropprob() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Layer::set_has_dropprob() {
  _has_bits_[0] |= 0x00000004u;
}
void Layer::clear_has_dropprob() {
  _has_bits_[0] &= ~0x00000004u;
}
void Layer::clear_dropprob() {
  dropprob_ = 0;
  clear_has_dropprob();
}
float Layer::dropprob() const {
  // @@protoc_insertion_point(field_get:config.Layer.dropprob)
  return dropprob_;
}
void Layer::set_dropprob(float value) {
  set_has_dropprob();
  dropprob_ = value;
  // @@protoc_insertion_point(field_set:config.Layer.dropprob)
}

// optional bool is_input = 5 [default = false];
bool Layer::has_is_input() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Layer::set_has_is_input() {
  _has_bits_[0] |= 0x00000010u;
}
void Layer::clear_has_is_input() {
  _has_bits_[0] &= ~0x00000010u;
}
void Layer::clear_is_input() {
  is_input_ = false;
  clear_has_is_input();
}
bool Layer::is_input() const {
  // @@protoc_insertion_point(field_get:config.Layer.is_input)
  return is_input_;
}
void Layer::set_is_input(bool value) {
  set_has_is_input();
  is_input_ = value;
  // @@protoc_insertion_point(field_set:config.Layer.is_input)
}

// optional .config.Layer.Activation activation = 6 [default = LINEAR];
bool Layer::has_activation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Layer::set_has_activation() {
  _has_bits_[0] |= 0x00000008u;
}
void Layer::clear_has_activation() {
  _has_bits_[0] &= ~0x00000008u;
}
void Layer::clear_activation() {
  activation_ = 0;
  clear_has_activation();
}
::config::Layer_Activation Layer::activation() const {
  // @@protoc_insertion_point(field_get:config.Layer.activation)
  return static_cast< ::config::Layer_Activation >(activation_);
}
void Layer::set_activation(::config::Layer_Activation value) {
  assert(::config::Layer_Activation_IsValid(value));
  set_has_activation();
  activation_ = value;
  // @@protoc_insertion_point(field_set:config.Layer.activation)
}

// optional bool is_spatial_output = 7 [default = false];
bool Layer::has_is_spatial_output() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Layer::set_has_is_spatial_output() {
  _has_bits_[0] |= 0x00000020u;
}
void Layer::clear_has_is_spatial_output() {
  _has_bits_[0] &= ~0x00000020u;
}
void Layer::clear_is_spatial_output() {
  is_spatial_output_ = false;
  clear_has_is_spatial_output();
}
bool Layer::is_spatial_output() const {
  // @@protoc_insertion_point(field_get:config.Layer.is_spatial_output)
  return is_spatial_output_;
}
void Layer::set_is_spatial_output(bool value) {
  set_has_is_spatial_output();
  is_spatial_output_ = value;
  // @@protoc_insertion_point(field_set:config.Layer.is_spatial_output)
}

// optional bool is_classifier_output = 8 [default = false];
bool Layer::has_is_classifier_output() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Layer::set_has_is_classifier_output() {
  _has_bits_[0] |= 0x00000040u;
}
void Layer::clear_has_is_classifier_output() {
  _has_bits_[0] &= ~0x00000040u;
}
void Layer::clear_is_classifier_output() {
  is_classifier_output_ = false;
  clear_has_is_classifier_output();
}
bool Layer::is_classifier_output() const {
  // @@protoc_insertion_point(field_get:config.Layer.is_classifier_output)
  return is_classifier_output_;
}
void Layer::set_is_classifier_output(bool value) {
  set_has_is_classifier_output();
  is_classifier_output_ = value;
  // @@protoc_insertion_point(field_set:config.Layer.is_classifier_output)
}

// optional bool display = 9 [default = false];
bool Layer::has_display() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Layer::set_has_display() {
  _has_bits_[0] |= 0x00000080u;
}
void Layer::clear_has_display() {
  _has_bits_[0] &= ~0x00000080u;
}
void Layer::clear_display() {
  display_ = false;
  clear_has_display();
}
bool Layer::display() const {
  // @@protoc_insertion_point(field_get:config.Layer.display)
  return display_;
}
void Layer::set_display(bool value) {
  set_has_display();
  display_ = value;
  // @@protoc_insertion_point(field_set:config.Layer.display)
}

// optional bool is_output = 10 [default = false];
bool Layer::has_is_output() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Layer::set_has_is_output() {
  _has_bits_[0] |= 0x00000100u;
}
void Layer::clear_has_is_output() {
  _has_bits_[0] &= ~0x00000100u;
}
void Layer::clear_is_output() {
  is_output_ = false;
  clear_has_is_output();
}
bool Layer::is_output() const {
  // @@protoc_insertion_point(field_get:config.Layer.is_output)
  return is_output_;
}
void Layer::set_is_output(bool value) {
  set_has_is_output();
  is_output_ = value;
  // @@protoc_insertion_point(field_set:config.Layer.is_output)
}

// optional bool gaussian_dropout = 11 [default = false];
bool Layer::has_gaussian_dropout() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Layer::set_has_gaussian_dropout() {
  _has_bits_[0] |= 0x00000200u;
}
void Layer::clear_has_gaussian_dropout() {
  _has_bits_[0] &= ~0x00000200u;
}
void Layer::clear_gaussian_dropout() {
  gaussian_dropout_ = false;
  clear_has_gaussian_dropout();
}
bool Layer::gaussian_dropout() const {
  // @@protoc_insertion_point(field_get:config.Layer.gaussian_dropout)
  return gaussian_dropout_;
}
void Layer::set_gaussian_dropout(bool value) {
  set_has_gaussian_dropout();
  gaussian_dropout_ = value;
  // @@protoc_insertion_point(field_set:config.Layer.gaussian_dropout)
}

// optional float max_act_gaussian_dropout = 12 [default = -1];
bool Layer::has_max_act_gaussian_dropout() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Layer::set_has_max_act_gaussian_dropout() {
  _has_bits_[0] |= 0x00002000u;
}
void Layer::clear_has_max_act_gaussian_dropout() {
  _has_bits_[0] &= ~0x00002000u;
}
void Layer::clear_max_act_gaussian_dropout() {
  max_act_gaussian_dropout_ = -1;
  clear_has_max_act_gaussian_dropout();
}
float Layer::max_act_gaussian_dropout() const {
  // @@protoc_insertion_point(field_get:config.Layer.max_act_gaussian_dropout)
  return max_act_gaussian_dropout_;
}
void Layer::set_max_act_gaussian_dropout(float value) {
  set_has_max_act_gaussian_dropout();
  max_act_gaussian_dropout_ = value;
  // @@protoc_insertion_point(field_set:config.Layer.max_act_gaussian_dropout)
}

// optional int32 gpu_id = 13 [default = 0];
bool Layer::has_gpu_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Layer::set_has_gpu_id() {
  _has_bits_[0] |= 0x00000400u;
}
void Layer::clear_has_gpu_id() {
  _has_bits_[0] &= ~0x00000400u;
}
void Layer::clear_gpu_id() {
  gpu_id_ = 0;
  clear_has_gpu_id();
}
::google::protobuf::int32 Layer::gpu_id() const {
  // @@protoc_insertion_point(field_get:config.Layer.gpu_id)
  return gpu_id_;
}
void Layer::set_gpu_id(::google::protobuf::int32 value) {
  set_has_gpu_id();
  gpu_id_ = value;
  // @@protoc_insertion_point(field_set:config.Layer.gpu_id)
}

// optional float hinge_margin = 14 [default = 0];
bool Layer::has_hinge_margin() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Layer::set_has_hinge_margin() {
  _has_bits_[0] |= 0x00000800u;
}
void Layer::clear_has_hinge_margin() {
  _has_bits_[0] &= ~0x00000800u;
}
void Layer::clear_hinge_margin() {
  hinge_margin_ = 0;
  clear_has_hinge_margin();
}
float Layer::hinge_margin() const {
  // @@protoc_insertion_point(field_get:config.Layer.hinge_margin)
  return hinge_margin_;
}
void Layer::set_hinge_margin(float value) {
  set_has_hinge_margin();
  hinge_margin_ = value;
  // @@protoc_insertion_point(field_set:config.Layer.hinge_margin)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Optimizer::kOptimizerTypeFieldNumber;
const int Optimizer::kEpsilonFieldNumber;
const int Optimizer::kEpsilonDecayTimescaleFieldNumber;
const int Optimizer::kInitialMomentumFieldNumber;
const int Optimizer::kFinalMomentumFieldNumber;
const int Optimizer::kMomentumTransitionTimescaleFieldNumber;
const int Optimizer::kL2DecayFieldNumber;
const int Optimizer::kWeightNormLimitFieldNumber;
const int Optimizer::kWeightNormConstraintFieldNumber;
const int Optimizer::kEpsilonDecayFieldNumber;
const int Optimizer::kMinimumEpsilonFieldNumber;
const int Optimizer::kGradientClipFieldNumber;
const int Optimizer::kLbfgsMemoryFieldNumber;
const int Optimizer::kStartOptimizationAfterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Optimizer::Optimizer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_convnet_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:config.Optimizer)
}
Optimizer::Optimizer(const Optimizer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&optimizer_type_, &from.optimizer_type_,
    reinterpret_cast<char*>(&gradient_clip_) -
    reinterpret_cast<char*>(&optimizer_type_) + sizeof(gradient_clip_));
  // @@protoc_insertion_point(copy_constructor:config.Optimizer)
}

void Optimizer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&optimizer_type_, 0, reinterpret_cast<char*>(&start_optimization_after_) -
    reinterpret_cast<char*>(&optimizer_type_) + sizeof(start_optimization_after_));
  gradient_clip_ = -1;
}

Optimizer::~Optimizer() {
  // @@protoc_insertion_point(destructor:config.Optimizer)
  SharedDtor();
}

void Optimizer::SharedDtor() {
}

void Optimizer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Optimizer::descriptor() {
  protobuf_convnet_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_convnet_5fconfig_2eproto::file_level_metadata[1].descriptor;
}

const Optimizer& Optimizer::default_instance() {
  protobuf_convnet_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

Optimizer* Optimizer::New(::google::protobuf::Arena* arena) const {
  Optimizer* n = new Optimizer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Optimizer::Clear() {
// @@protoc_insertion_point(message_clear_start:config.Optimizer)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&optimizer_type_, 0, reinterpret_cast<char*>(&weight_norm_limit_) -
      reinterpret_cast<char*>(&optimizer_type_) + sizeof(weight_norm_limit_));
  }
  if (_has_bits_[8 / 32] & 16128u) {
    ::memset(&weight_norm_constraint_, 0, reinterpret_cast<char*>(&start_optimization_after_) -
      reinterpret_cast<char*>(&weight_norm_constraint_) + sizeof(start_optimization_after_));
    gradient_clip_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Optimizer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:config.Optimizer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .config.Optimizer.OptimizerType optimizer_type = 1 [default = STOCHASTIC_GRADIENT_DESCENT];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::config::Optimizer_OptimizerType_IsValid(value)) {
            set_optimizer_type(static_cast< ::config::Optimizer_OptimizerType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float epsilon = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_epsilon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &epsilon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 epsilon_decay_timescale = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_epsilon_decay_timescale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &epsilon_decay_timescale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float initial_momentum = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_initial_momentum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &initial_momentum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float final_momentum = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_final_momentum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &final_momentum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 momentum_transition_timescale = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_momentum_transition_timescale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &momentum_transition_timescale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float l2_decay = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_l2_decay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &l2_decay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float weight_norm_limit = 8 [default = 0];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_weight_norm_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_norm_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float weight_norm_constraint = 9 [default = 0];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {
          set_has_weight_norm_constraint();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_norm_constraint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .config.Optimizer.Decay epsilon_decay = 10 [default = NONE];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::config::Optimizer_Decay_IsValid(value)) {
            set_epsilon_decay(static_cast< ::config::Optimizer_Decay >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float minimum_epsilon = 11 [default = 0];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u)) {
          set_has_minimum_epsilon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minimum_epsilon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float gradient_clip = 12 [default = -1];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u)) {
          set_has_gradient_clip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gradient_clip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lbfgs_memory = 13 [default = 0];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_lbfgs_memory();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lbfgs_memory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 start_optimization_after = 14 [default = 0];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_start_optimization_after();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_optimization_after_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:config.Optimizer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:config.Optimizer)
  return false;
#undef DO_
}

void Optimizer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:config.Optimizer)
  // optional .config.Optimizer.OptimizerType optimizer_type = 1 [default = STOCHASTIC_GRADIENT_DESCENT];
  if (has_optimizer_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->optimizer_type(), output);
  }

  // optional float epsilon = 2 [default = 0];
  if (has_epsilon()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->epsilon(), output);
  }

  // optional int32 epsilon_decay_timescale = 3 [default = 0];
  if (has_epsilon_decay_timescale()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->epsilon_decay_timescale(), output);
  }

  // optional float initial_momentum = 4 [default = 0];
  if (has_initial_momentum()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->initial_momentum(), output);
  }

  // optional float final_momentum = 5 [default = 0];
  if (has_final_momentum()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->final_momentum(), output);
  }

  // optional int32 momentum_transition_timescale = 6 [default = 0];
  if (has_momentum_transition_timescale()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->momentum_transition_timescale(), output);
  }

  // optional float l2_decay = 7 [default = 0];
  if (has_l2_decay()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->l2_decay(), output);
  }

  // optional float weight_norm_limit = 8 [default = 0];
  if (has_weight_norm_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->weight_norm_limit(), output);
  }

  // optional float weight_norm_constraint = 9 [default = 0];
  if (has_weight_norm_constraint()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->weight_norm_constraint(), output);
  }

  // optional .config.Optimizer.Decay epsilon_decay = 10 [default = NONE];
  if (has_epsilon_decay()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->epsilon_decay(), output);
  }

  // optional float minimum_epsilon = 11 [default = 0];
  if (has_minimum_epsilon()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->minimum_epsilon(), output);
  }

  // optional float gradient_clip = 12 [default = -1];
  if (has_gradient_clip()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->gradient_clip(), output);
  }

  // optional int32 lbfgs_memory = 13 [default = 0];
  if (has_lbfgs_memory()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->lbfgs_memory(), output);
  }

  // optional int32 start_optimization_after = 14 [default = 0];
  if (has_start_optimization_after()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->start_optimization_after(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:config.Optimizer)
}

::google::protobuf::uint8* Optimizer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:config.Optimizer)
  // optional .config.Optimizer.OptimizerType optimizer_type = 1 [default = STOCHASTIC_GRADIENT_DESCENT];
  if (has_optimizer_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->optimizer_type(), target);
  }

  // optional float epsilon = 2 [default = 0];
  if (has_epsilon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->epsilon(), target);
  }

  // optional int32 epsilon_decay_timescale = 3 [default = 0];
  if (has_epsilon_decay_timescale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->epsilon_decay_timescale(), target);
  }

  // optional float initial_momentum = 4 [default = 0];
  if (has_initial_momentum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->initial_momentum(), target);
  }

  // optional float final_momentum = 5 [default = 0];
  if (has_final_momentum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->final_momentum(), target);
  }

  // optional int32 momentum_transition_timescale = 6 [default = 0];
  if (has_momentum_transition_timescale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->momentum_transition_timescale(), target);
  }

  // optional float l2_decay = 7 [default = 0];
  if (has_l2_decay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->l2_decay(), target);
  }

  // optional float weight_norm_limit = 8 [default = 0];
  if (has_weight_norm_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->weight_norm_limit(), target);
  }

  // optional float weight_norm_constraint = 9 [default = 0];
  if (has_weight_norm_constraint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->weight_norm_constraint(), target);
  }

  // optional .config.Optimizer.Decay epsilon_decay = 10 [default = NONE];
  if (has_epsilon_decay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->epsilon_decay(), target);
  }

  // optional float minimum_epsilon = 11 [default = 0];
  if (has_minimum_epsilon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->minimum_epsilon(), target);
  }

  // optional float gradient_clip = 12 [default = -1];
  if (has_gradient_clip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->gradient_clip(), target);
  }

  // optional int32 lbfgs_memory = 13 [default = 0];
  if (has_lbfgs_memory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->lbfgs_memory(), target);
  }

  // optional int32 start_optimization_after = 14 [default = 0];
  if (has_start_optimization_after()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->start_optimization_after(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:config.Optimizer)
  return target;
}

size_t Optimizer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:config.Optimizer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .config.Optimizer.OptimizerType optimizer_type = 1 [default = STOCHASTIC_GRADIENT_DESCENT];
    if (has_optimizer_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->optimizer_type());
    }

    // optional float epsilon = 2 [default = 0];
    if (has_epsilon()) {
      total_size += 1 + 4;
    }

    // optional int32 epsilon_decay_timescale = 3 [default = 0];
    if (has_epsilon_decay_timescale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->epsilon_decay_timescale());
    }

    // optional float initial_momentum = 4 [default = 0];
    if (has_initial_momentum()) {
      total_size += 1 + 4;
    }

    // optional float final_momentum = 5 [default = 0];
    if (has_final_momentum()) {
      total_size += 1 + 4;
    }

    // optional int32 momentum_transition_timescale = 6 [default = 0];
    if (has_momentum_transition_timescale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->momentum_transition_timescale());
    }

    // optional float l2_decay = 7 [default = 0];
    if (has_l2_decay()) {
      total_size += 1 + 4;
    }

    // optional float weight_norm_limit = 8 [default = 0];
    if (has_weight_norm_limit()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional float weight_norm_constraint = 9 [default = 0];
    if (has_weight_norm_constraint()) {
      total_size += 1 + 4;
    }

    // optional .config.Optimizer.Decay epsilon_decay = 10 [default = NONE];
    if (has_epsilon_decay()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->epsilon_decay());
    }

    // optional float minimum_epsilon = 11 [default = 0];
    if (has_minimum_epsilon()) {
      total_size += 1 + 4;
    }

    // optional int32 lbfgs_memory = 13 [default = 0];
    if (has_lbfgs_memory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lbfgs_memory());
    }

    // optional int32 start_optimization_after = 14 [default = 0];
    if (has_start_optimization_after()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_optimization_after());
    }

    // optional float gradient_clip = 12 [default = -1];
    if (has_gradient_clip()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Optimizer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:config.Optimizer)
  GOOGLE_DCHECK_NE(&from, this);
  const Optimizer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Optimizer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:config.Optimizer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:config.Optimizer)
    MergeFrom(*source);
  }
}

void Optimizer::MergeFrom(const Optimizer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:config.Optimizer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_optimizer_type()) {
      set_optimizer_type(from.optimizer_type());
    }
    if (from.has_epsilon()) {
      set_epsilon(from.epsilon());
    }
    if (from.has_epsilon_decay_timescale()) {
      set_epsilon_decay_timescale(from.epsilon_decay_timescale());
    }
    if (from.has_initial_momentum()) {
      set_initial_momentum(from.initial_momentum());
    }
    if (from.has_final_momentum()) {
      set_final_momentum(from.final_momentum());
    }
    if (from.has_momentum_transition_timescale()) {
      set_momentum_transition_timescale(from.momentum_transition_timescale());
    }
    if (from.has_l2_decay()) {
      set_l2_decay(from.l2_decay());
    }
    if (from.has_weight_norm_limit()) {
      set_weight_norm_limit(from.weight_norm_limit());
    }
  }
  if (from._has_bits_[8 / 32] & 16128u) {
    if (from.has_weight_norm_constraint()) {
      set_weight_norm_constraint(from.weight_norm_constraint());
    }
    if (from.has_epsilon_decay()) {
      set_epsilon_decay(from.epsilon_decay());
    }
    if (from.has_minimum_epsilon()) {
      set_minimum_epsilon(from.minimum_epsilon());
    }
    if (from.has_lbfgs_memory()) {
      set_lbfgs_memory(from.lbfgs_memory());
    }
    if (from.has_start_optimization_after()) {
      set_start_optimization_after(from.start_optimization_after());
    }
    if (from.has_gradient_clip()) {
      set_gradient_clip(from.gradient_clip());
    }
  }
}

void Optimizer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:config.Optimizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Optimizer::CopyFrom(const Optimizer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:config.Optimizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Optimizer::IsInitialized() const {
  return true;
}

void Optimizer::Swap(Optimizer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Optimizer::InternalSwap(Optimizer* other) {
  std::swap(optimizer_type_, other->optimizer_type_);
  std::swap(epsilon_, other->epsilon_);
  std::swap(epsilon_decay_timescale_, other->epsilon_decay_timescale_);
  std::swap(initial_momentum_, other->initial_momentum_);
  std::swap(final_momentum_, other->final_momentum_);
  std::swap(momentum_transition_timescale_, other->momentum_transition_timescale_);
  std::swap(l2_decay_, other->l2_decay_);
  std::swap(weight_norm_limit_, other->weight_norm_limit_);
  std::swap(weight_norm_constraint_, other->weight_norm_constraint_);
  std::swap(epsilon_decay_, other->epsilon_decay_);
  std::swap(minimum_epsilon_, other->minimum_epsilon_);
  std::swap(lbfgs_memory_, other->lbfgs_memory_);
  std::swap(start_optimization_after_, other->start_optimization_after_);
  std::swap(gradient_clip_, other->gradient_clip_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Optimizer::GetMetadata() const {
  protobuf_convnet_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_convnet_5fconfig_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Optimizer

// optional .config.Optimizer.OptimizerType optimizer_type = 1 [default = STOCHASTIC_GRADIENT_DESCENT];
bool Optimizer::has_optimizer_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Optimizer::set_has_optimizer_type() {
  _has_bits_[0] |= 0x00000001u;
}
void Optimizer::clear_has_optimizer_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void Optimizer::clear_optimizer_type() {
  optimizer_type_ = 0;
  clear_has_optimizer_type();
}
::config::Optimizer_OptimizerType Optimizer::optimizer_type() const {
  // @@protoc_insertion_point(field_get:config.Optimizer.optimizer_type)
  return static_cast< ::config::Optimizer_OptimizerType >(optimizer_type_);
}
void Optimizer::set_optimizer_type(::config::Optimizer_OptimizerType value) {
  assert(::config::Optimizer_OptimizerType_IsValid(value));
  set_has_optimizer_type();
  optimizer_type_ = value;
  // @@protoc_insertion_point(field_set:config.Optimizer.optimizer_type)
}

// optional float epsilon = 2 [default = 0];
bool Optimizer::has_epsilon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Optimizer::set_has_epsilon() {
  _has_bits_[0] |= 0x00000002u;
}
void Optimizer::clear_has_epsilon() {
  _has_bits_[0] &= ~0x00000002u;
}
void Optimizer::clear_epsilon() {
  epsilon_ = 0;
  clear_has_epsilon();
}
float Optimizer::epsilon() const {
  // @@protoc_insertion_point(field_get:config.Optimizer.epsilon)
  return epsilon_;
}
void Optimizer::set_epsilon(float value) {
  set_has_epsilon();
  epsilon_ = value;
  // @@protoc_insertion_point(field_set:config.Optimizer.epsilon)
}

// optional int32 epsilon_decay_timescale = 3 [default = 0];
bool Optimizer::has_epsilon_decay_timescale() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Optimizer::set_has_epsilon_decay_timescale() {
  _has_bits_[0] |= 0x00000004u;
}
void Optimizer::clear_has_epsilon_decay_timescale() {
  _has_bits_[0] &= ~0x00000004u;
}
void Optimizer::clear_epsilon_decay_timescale() {
  epsilon_decay_timescale_ = 0;
  clear_has_epsilon_decay_timescale();
}
::google::protobuf::int32 Optimizer::epsilon_decay_timescale() const {
  // @@protoc_insertion_point(field_get:config.Optimizer.epsilon_decay_timescale)
  return epsilon_decay_timescale_;
}
void Optimizer::set_epsilon_decay_timescale(::google::protobuf::int32 value) {
  set_has_epsilon_decay_timescale();
  epsilon_decay_timescale_ = value;
  // @@protoc_insertion_point(field_set:config.Optimizer.epsilon_decay_timescale)
}

// optional float initial_momentum = 4 [default = 0];
bool Optimizer::has_initial_momentum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Optimizer::set_has_initial_momentum() {
  _has_bits_[0] |= 0x00000008u;
}
void Optimizer::clear_has_initial_momentum() {
  _has_bits_[0] &= ~0x00000008u;
}
void Optimizer::clear_initial_momentum() {
  initial_momentum_ = 0;
  clear_has_initial_momentum();
}
float Optimizer::initial_momentum() const {
  // @@protoc_insertion_point(field_get:config.Optimizer.initial_momentum)
  return initial_momentum_;
}
void Optimizer::set_initial_momentum(float value) {
  set_has_initial_momentum();
  initial_momentum_ = value;
  // @@protoc_insertion_point(field_set:config.Optimizer.initial_momentum)
}

// optional float final_momentum = 5 [default = 0];
bool Optimizer::has_final_momentum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Optimizer::set_has_final_momentum() {
  _has_bits_[0] |= 0x00000010u;
}
void Optimizer::clear_has_final_momentum() {
  _has_bits_[0] &= ~0x00000010u;
}
void Optimizer::clear_final_momentum() {
  final_momentum_ = 0;
  clear_has_final_momentum();
}
float Optimizer::final_momentum() const {
  // @@protoc_insertion_point(field_get:config.Optimizer.final_momentum)
  return final_momentum_;
}
void Optimizer::set_final_momentum(float value) {
  set_has_final_momentum();
  final_momentum_ = value;
  // @@protoc_insertion_point(field_set:config.Optimizer.final_momentum)
}

// optional int32 momentum_transition_timescale = 6 [default = 0];
bool Optimizer::has_momentum_transition_timescale() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Optimizer::set_has_momentum_transition_timescale() {
  _has_bits_[0] |= 0x00000020u;
}
void Optimizer::clear_has_momentum_transition_timescale() {
  _has_bits_[0] &= ~0x00000020u;
}
void Optimizer::clear_momentum_transition_timescale() {
  momentum_transition_timescale_ = 0;
  clear_has_momentum_transition_timescale();
}
::google::protobuf::int32 Optimizer::momentum_transition_timescale() const {
  // @@protoc_insertion_point(field_get:config.Optimizer.momentum_transition_timescale)
  return momentum_transition_timescale_;
}
void Optimizer::set_momentum_transition_timescale(::google::protobuf::int32 value) {
  set_has_momentum_transition_timescale();
  momentum_transition_timescale_ = value;
  // @@protoc_insertion_point(field_set:config.Optimizer.momentum_transition_timescale)
}

// optional float l2_decay = 7 [default = 0];
bool Optimizer::has_l2_decay() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Optimizer::set_has_l2_decay() {
  _has_bits_[0] |= 0x00000040u;
}
void Optimizer::clear_has_l2_decay() {
  _has_bits_[0] &= ~0x00000040u;
}
void Optimizer::clear_l2_decay() {
  l2_decay_ = 0;
  clear_has_l2_decay();
}
float Optimizer::l2_decay() const {
  // @@protoc_insertion_point(field_get:config.Optimizer.l2_decay)
  return l2_decay_;
}
void Optimizer::set_l2_decay(float value) {
  set_has_l2_decay();
  l2_decay_ = value;
  // @@protoc_insertion_point(field_set:config.Optimizer.l2_decay)
}

// optional float weight_norm_limit = 8 [default = 0];
bool Optimizer::has_weight_norm_limit() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Optimizer::set_has_weight_norm_limit() {
  _has_bits_[0] |= 0x00000080u;
}
void Optimizer::clear_has_weight_norm_limit() {
  _has_bits_[0] &= ~0x00000080u;
}
void Optimizer::clear_weight_norm_limit() {
  weight_norm_limit_ = 0;
  clear_has_weight_norm_limit();
}
float Optimizer::weight_norm_limit() const {
  // @@protoc_insertion_point(field_get:config.Optimizer.weight_norm_limit)
  return weight_norm_limit_;
}
void Optimizer::set_weight_norm_limit(float value) {
  set_has_weight_norm_limit();
  weight_norm_limit_ = value;
  // @@protoc_insertion_point(field_set:config.Optimizer.weight_norm_limit)
}

// optional float weight_norm_constraint = 9 [default = 0];
bool Optimizer::has_weight_norm_constraint() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Optimizer::set_has_weight_norm_constraint() {
  _has_bits_[0] |= 0x00000100u;
}
void Optimizer::clear_has_weight_norm_constraint() {
  _has_bits_[0] &= ~0x00000100u;
}
void Optimizer::clear_weight_norm_constraint() {
  weight_norm_constraint_ = 0;
  clear_has_weight_norm_constraint();
}
float Optimizer::weight_norm_constraint() const {
  // @@protoc_insertion_point(field_get:config.Optimizer.weight_norm_constraint)
  return weight_norm_constraint_;
}
void Optimizer::set_weight_norm_constraint(float value) {
  set_has_weight_norm_constraint();
  weight_norm_constraint_ = value;
  // @@protoc_insertion_point(field_set:config.Optimizer.weight_norm_constraint)
}

// optional .config.Optimizer.Decay epsilon_decay = 10 [default = NONE];
bool Optimizer::has_epsilon_decay() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Optimizer::set_has_epsilon_decay() {
  _has_bits_[0] |= 0x00000200u;
}
void Optimizer::clear_has_epsilon_decay() {
  _has_bits_[0] &= ~0x00000200u;
}
void Optimizer::clear_epsilon_decay() {
  epsilon_decay_ = 0;
  clear_has_epsilon_decay();
}
::config::Optimizer_Decay Optimizer::epsilon_decay() const {
  // @@protoc_insertion_point(field_get:config.Optimizer.epsilon_decay)
  return static_cast< ::config::Optimizer_Decay >(epsilon_decay_);
}
void Optimizer::set_epsilon_decay(::config::Optimizer_Decay value) {
  assert(::config::Optimizer_Decay_IsValid(value));
  set_has_epsilon_decay();
  epsilon_decay_ = value;
  // @@protoc_insertion_point(field_set:config.Optimizer.epsilon_decay)
}

// optional float minimum_epsilon = 11 [default = 0];
bool Optimizer::has_minimum_epsilon() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Optimizer::set_has_minimum_epsilon() {
  _has_bits_[0] |= 0x00000400u;
}
void Optimizer::clear_has_minimum_epsilon() {
  _has_bits_[0] &= ~0x00000400u;
}
void Optimizer::clear_minimum_epsilon() {
  minimum_epsilon_ = 0;
  clear_has_minimum_epsilon();
}
float Optimizer::minimum_epsilon() const {
  // @@protoc_insertion_point(field_get:config.Optimizer.minimum_epsilon)
  return minimum_epsilon_;
}
void Optimizer::set_minimum_epsilon(float value) {
  set_has_minimum_epsilon();
  minimum_epsilon_ = value;
  // @@protoc_insertion_point(field_set:config.Optimizer.minimum_epsilon)
}

// optional float gradient_clip = 12 [default = -1];
bool Optimizer::has_gradient_clip() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Optimizer::set_has_gradient_clip() {
  _has_bits_[0] |= 0x00002000u;
}
void Optimizer::clear_has_gradient_clip() {
  _has_bits_[0] &= ~0x00002000u;
}
void Optimizer::clear_gradient_clip() {
  gradient_clip_ = -1;
  clear_has_gradient_clip();
}
float Optimizer::gradient_clip() const {
  // @@protoc_insertion_point(field_get:config.Optimizer.gradient_clip)
  return gradient_clip_;
}
void Optimizer::set_gradient_clip(float value) {
  set_has_gradient_clip();
  gradient_clip_ = value;
  // @@protoc_insertion_point(field_set:config.Optimizer.gradient_clip)
}

// optional int32 lbfgs_memory = 13 [default = 0];
bool Optimizer::has_lbfgs_memory() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Optimizer::set_has_lbfgs_memory() {
  _has_bits_[0] |= 0x00000800u;
}
void Optimizer::clear_has_lbfgs_memory() {
  _has_bits_[0] &= ~0x00000800u;
}
void Optimizer::clear_lbfgs_memory() {
  lbfgs_memory_ = 0;
  clear_has_lbfgs_memory();
}
::google::protobuf::int32 Optimizer::lbfgs_memory() const {
  // @@protoc_insertion_point(field_get:config.Optimizer.lbfgs_memory)
  return lbfgs_memory_;
}
void Optimizer::set_lbfgs_memory(::google::protobuf::int32 value) {
  set_has_lbfgs_memory();
  lbfgs_memory_ = value;
  // @@protoc_insertion_point(field_set:config.Optimizer.lbfgs_memory)
}

// optional int32 start_optimization_after = 14 [default = 0];
bool Optimizer::has_start_optimization_after() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Optimizer::set_has_start_optimization_after() {
  _has_bits_[0] |= 0x00001000u;
}
void Optimizer::clear_has_start_optimization_after() {
  _has_bits_[0] &= ~0x00001000u;
}
void Optimizer::clear_start_optimization_after() {
  start_optimization_after_ = 0;
  clear_has_start_optimization_after();
}
::google::protobuf::int32 Optimizer::start_optimization_after() const {
  // @@protoc_insertion_point(field_get:config.Optimizer.start_optimization_after)
  return start_optimization_after_;
}
void Optimizer::set_start_optimization_after(::google::protobuf::int32 value) {
  set_has_start_optimization_after();
  start_optimization_after_ = value;
  // @@protoc_insertion_point(field_set:config.Optimizer.start_optimization_after)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Edge::kSourceFieldNumber;
const int Edge::kDestFieldNumber;
const int Edge::kEdgeTypeFieldNumber;
const int Edge::kKernelSizeFieldNumber;
const int Edge::kStrideFieldNumber;
const int Edge::kPaddingFieldNumber;
const int Edge::kInitializationFieldNumber;
const int Edge::kInitWtFieldNumber;
const int Edge::kInitBiasFieldNumber;
const int Edge::kWeightOptimizerFieldNumber;
const int Edge::kBiasOptimizerFieldNumber;
const int Edge::kSharedBiasFieldNumber;
const int Edge::kBlockBackpropFieldNumber;
const int Edge::kTiedToFieldNumber;
const int Edge::kHasNoBiasFieldNumber;
const int Edge::kScaleGradientsFieldNumber;
const int Edge::kPartialSumFieldNumber;
const int Edge::kSampleFactorFieldNumber;
const int Edge::kResponseNormInBlocksFieldNumber;
const int Edge::kAddScaleFieldNumber;
const int Edge::kPowScaleFieldNumber;
const int Edge::kFracOfFiltersResponseNormFieldNumber;
const int Edge::kPolyakQueueSizeFieldNumber;
const int Edge::kGpuIdFieldNumber;
const int Edge::kPretrainedModelFieldNumber;
const int Edge::kPretrainedEdgeNameFieldNumber;
const int Edge::kDisplayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Edge::Edge()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_convnet_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:config.Edge)
}
Edge::Edge(const Edge& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source()) {
    source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
  }
  dest_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dest()) {
    dest_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_);
  }
  tied_to_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tied_to()) {
    tied_to_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tied_to_);
  }
  pretrained_model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pretrained_model()) {
    pretrained_model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pretrained_model_);
  }
  pretrained_edge_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pretrained_edge_name()) {
    pretrained_edge_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pretrained_edge_name_);
  }
  if (from.has_weight_optimizer()) {
    weight_optimizer_ = new ::config::Optimizer(*from.weight_optimizer_);
  } else {
    weight_optimizer_ = NULL;
  }
  if (from.has_bias_optimizer()) {
    bias_optimizer_ = new ::config::Optimizer(*from.bias_optimizer_);
  } else {
    bias_optimizer_ = NULL;
  }
  ::memcpy(&edge_type_, &from.edge_type_,
    reinterpret_cast<char*>(&sample_factor_) -
    reinterpret_cast<char*>(&edge_type_) + sizeof(sample_factor_));
  // @@protoc_insertion_point(copy_constructor:config.Edge)
}

void Edge::SharedCtor() {
  _cached_size_ = 0;
  source_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tied_to_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pretrained_model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pretrained_edge_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&weight_optimizer_, 0, reinterpret_cast<char*>(&display_) -
    reinterpret_cast<char*>(&weight_optimizer_) + sizeof(display_));
  kernel_size_ = -1;
  stride_ = 1;
  initialization_ = 3;
  init_wt_ = 1;
  scale_gradients_ = 1;
  sample_factor_ = 1;
}

Edge::~Edge() {
  // @@protoc_insertion_point(destructor:config.Edge)
  SharedDtor();
}

void Edge::SharedDtor() {
  source_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tied_to_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pretrained_model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pretrained_edge_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete weight_optimizer_;
  }
  if (this != internal_default_instance()) {
    delete bias_optimizer_;
  }
}

void Edge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Edge::descriptor() {
  protobuf_convnet_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_convnet_5fconfig_2eproto::file_level_metadata[2].descriptor;
}

const Edge& Edge::default_instance() {
  protobuf_convnet_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

Edge* Edge::New(::google::protobuf::Arena* arena) const {
  Edge* n = new Edge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Edge::Clear() {
// @@protoc_insertion_point(message_clear_start:config.Edge)
  if (_has_bits_[0 / 32] & 127u) {
    if (has_source()) {
      GOOGLE_DCHECK(!source_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*source_.UnsafeRawStringPointer())->clear();
    }
    if (has_dest()) {
      GOOGLE_DCHECK(!dest_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*dest_.UnsafeRawStringPointer())->clear();
    }
    if (has_tied_to()) {
      GOOGLE_DCHECK(!tied_to_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tied_to_.UnsafeRawStringPointer())->clear();
    }
    if (has_pretrained_model()) {
      GOOGLE_DCHECK(!pretrained_model_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pretrained_model_.UnsafeRawStringPointer())->clear();
    }
    if (has_pretrained_edge_name()) {
      GOOGLE_DCHECK(!pretrained_edge_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pretrained_edge_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_weight_optimizer()) {
      GOOGLE_DCHECK(weight_optimizer_ != NULL);
      weight_optimizer_->::config::Optimizer::Clear();
    }
    if (has_bias_optimizer()) {
      GOOGLE_DCHECK(bias_optimizer_ != NULL);
      bias_optimizer_->::config::Optimizer::Clear();
    }
  }
  edge_type_ = 0;
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&padding_, 0, reinterpret_cast<char*>(&add_scale_) -
      reinterpret_cast<char*>(&padding_) + sizeof(add_scale_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&pow_scale_, 0, reinterpret_cast<char*>(&display_) -
      reinterpret_cast<char*>(&pow_scale_) + sizeof(display_));
    kernel_size_ = -1;
    stride_ = 1;
    initialization_ = 3;
  }
  if (_has_bits_[24 / 32] & 117440512u) {
    init_wt_ = 1;
    scale_gradients_ = 1;
    sample_factor_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Edge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:config.Edge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string source = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "config.Edge.source");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string dest = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dest()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dest().data(), this->dest().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "config.Edge.dest");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .config.Edge.EdgeType edge_type = 3 [default = FC];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::config::Edge_EdgeType_IsValid(value)) {
            set_edge_type(static_cast< ::config::Edge_EdgeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 kernel_size = 4 [default = -1];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_kernel_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kernel_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 stride = 5 [default = 1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_stride();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stride_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 padding = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_padding();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &padding_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .config.Edge.Initialization initialization = 7 [default = DENSE_GAUSSIAN_SQRT_FAN_IN];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::config::Edge_Initialization_IsValid(value)) {
            set_initialization(static_cast< ::config::Edge_Initialization >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float init_wt = 8 [default = 1];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_init_wt();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &init_wt_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float init_bias = 9 [default = 0];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {
          set_has_init_bias();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &init_bias_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .config.Optimizer weight_optimizer = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weight_optimizer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .config.Optimizer bias_optimizer = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bias_optimizer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool shared_bias = 12 [default = false];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_shared_bias();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shared_bias_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool block_backprop = 13 [default = false];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_block_backprop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &block_backprop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string tied_to = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tied_to()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tied_to().data(), this->tied_to().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "config.Edge.tied_to");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_no_bias = 15 [default = false];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_has_no_bias();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_no_bias_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float scale_gradients = 16 [default = 1];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u)) {
          set_has_scale_gradients();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scale_gradients_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 partial_sum = 17 [default = 0];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_partial_sum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &partial_sum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sample_factor = 18 [default = 1];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_sample_factor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sample_factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool response_norm_in_blocks = 19 [default = false];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_response_norm_in_blocks();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &response_norm_in_blocks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float add_scale = 20 [default = 0];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(165u)) {
          set_has_add_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &add_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float pow_scale = 21 [default = 0];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(173u)) {
          set_has_pow_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pow_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float frac_of_filters_response_norm = 22 [default = 0];
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(181u)) {
          set_has_frac_of_filters_response_norm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &frac_of_filters_response_norm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 polyak_queue_size = 23 [default = 0];
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u)) {
          set_has_polyak_queue_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &polyak_queue_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 gpu_id = 24 [default = 0];
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u)) {
          set_has_gpu_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gpu_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string pretrained_model = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pretrained_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pretrained_model().data(), this->pretrained_model().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "config.Edge.pretrained_model");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string pretrained_edge_name = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pretrained_edge_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pretrained_edge_name().data(), this->pretrained_edge_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "config.Edge.pretrained_edge_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool display = 27 [default = false];
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u)) {
          set_has_display();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &display_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:config.Edge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:config.Edge)
  return false;
#undef DO_
}

void Edge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:config.Edge)
  // required string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.Edge.source");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->source(), output);
  }

  // required string dest = 2;
  if (has_dest()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dest().data(), this->dest().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.Edge.dest");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->dest(), output);
  }

  // optional .config.Edge.EdgeType edge_type = 3 [default = FC];
  if (has_edge_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->edge_type(), output);
  }

  // optional int32 kernel_size = 4 [default = -1];
  if (has_kernel_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->kernel_size(), output);
  }

  // optional int32 stride = 5 [default = 1];
  if (has_stride()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->stride(), output);
  }

  // optional int32 padding = 6 [default = 0];
  if (has_padding()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->padding(), output);
  }

  // optional .config.Edge.Initialization initialization = 7 [default = DENSE_GAUSSIAN_SQRT_FAN_IN];
  if (has_initialization()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->initialization(), output);
  }

  // optional float init_wt = 8 [default = 1];
  if (has_init_wt()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->init_wt(), output);
  }

  // optional float init_bias = 9 [default = 0];
  if (has_init_bias()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->init_bias(), output);
  }

  // optional .config.Optimizer weight_optimizer = 10;
  if (has_weight_optimizer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->weight_optimizer_, output);
  }

  // optional .config.Optimizer bias_optimizer = 11;
  if (has_bias_optimizer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->bias_optimizer_, output);
  }

  // optional bool shared_bias = 12 [default = false];
  if (has_shared_bias()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->shared_bias(), output);
  }

  // optional bool block_backprop = 13 [default = false];
  if (has_block_backprop()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->block_backprop(), output);
  }

  // optional string tied_to = 14;
  if (has_tied_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tied_to().data(), this->tied_to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.Edge.tied_to");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->tied_to(), output);
  }

  // optional bool has_no_bias = 15 [default = false];
  if (has_has_no_bias()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->has_no_bias(), output);
  }

  // optional float scale_gradients = 16 [default = 1];
  if (has_scale_gradients()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->scale_gradients(), output);
  }

  // optional int32 partial_sum = 17 [default = 0];
  if (has_partial_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->partial_sum(), output);
  }

  // optional int32 sample_factor = 18 [default = 1];
  if (has_sample_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->sample_factor(), output);
  }

  // optional bool response_norm_in_blocks = 19 [default = false];
  if (has_response_norm_in_blocks()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->response_norm_in_blocks(), output);
  }

  // optional float add_scale = 20 [default = 0];
  if (has_add_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->add_scale(), output);
  }

  // optional float pow_scale = 21 [default = 0];
  if (has_pow_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->pow_scale(), output);
  }

  // optional float frac_of_filters_response_norm = 22 [default = 0];
  if (has_frac_of_filters_response_norm()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->frac_of_filters_response_norm(), output);
  }

  // optional int32 polyak_queue_size = 23 [default = 0];
  if (has_polyak_queue_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->polyak_queue_size(), output);
  }

  // optional int32 gpu_id = 24 [default = 0];
  if (has_gpu_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->gpu_id(), output);
  }

  // optional string pretrained_model = 25;
  if (has_pretrained_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pretrained_model().data(), this->pretrained_model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.Edge.pretrained_model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      25, this->pretrained_model(), output);
  }

  // optional string pretrained_edge_name = 26;
  if (has_pretrained_edge_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pretrained_edge_name().data(), this->pretrained_edge_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.Edge.pretrained_edge_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      26, this->pretrained_edge_name(), output);
  }

  // optional bool display = 27 [default = false];
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->display(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:config.Edge)
}

::google::protobuf::uint8* Edge::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:config.Edge)
  // required string source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.Edge.source");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->source(), target);
  }

  // required string dest = 2;
  if (has_dest()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dest().data(), this->dest().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.Edge.dest");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dest(), target);
  }

  // optional .config.Edge.EdgeType edge_type = 3 [default = FC];
  if (has_edge_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->edge_type(), target);
  }

  // optional int32 kernel_size = 4 [default = -1];
  if (has_kernel_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->kernel_size(), target);
  }

  // optional int32 stride = 5 [default = 1];
  if (has_stride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->stride(), target);
  }

  // optional int32 padding = 6 [default = 0];
  if (has_padding()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->padding(), target);
  }

  // optional .config.Edge.Initialization initialization = 7 [default = DENSE_GAUSSIAN_SQRT_FAN_IN];
  if (has_initialization()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->initialization(), target);
  }

  // optional float init_wt = 8 [default = 1];
  if (has_init_wt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->init_wt(), target);
  }

  // optional float init_bias = 9 [default = 0];
  if (has_init_bias()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->init_bias(), target);
  }

  // optional .config.Optimizer weight_optimizer = 10;
  if (has_weight_optimizer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->weight_optimizer_, false, target);
  }

  // optional .config.Optimizer bias_optimizer = 11;
  if (has_bias_optimizer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->bias_optimizer_, false, target);
  }

  // optional bool shared_bias = 12 [default = false];
  if (has_shared_bias()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->shared_bias(), target);
  }

  // optional bool block_backprop = 13 [default = false];
  if (has_block_backprop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->block_backprop(), target);
  }

  // optional string tied_to = 14;
  if (has_tied_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tied_to().data(), this->tied_to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.Edge.tied_to");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->tied_to(), target);
  }

  // optional bool has_no_bias = 15 [default = false];
  if (has_has_no_bias()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->has_no_bias(), target);
  }

  // optional float scale_gradients = 16 [default = 1];
  if (has_scale_gradients()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->scale_gradients(), target);
  }

  // optional int32 partial_sum = 17 [default = 0];
  if (has_partial_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->partial_sum(), target);
  }

  // optional int32 sample_factor = 18 [default = 1];
  if (has_sample_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->sample_factor(), target);
  }

  // optional bool response_norm_in_blocks = 19 [default = false];
  if (has_response_norm_in_blocks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->response_norm_in_blocks(), target);
  }

  // optional float add_scale = 20 [default = 0];
  if (has_add_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->add_scale(), target);
  }

  // optional float pow_scale = 21 [default = 0];
  if (has_pow_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->pow_scale(), target);
  }

  // optional float frac_of_filters_response_norm = 22 [default = 0];
  if (has_frac_of_filters_response_norm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->frac_of_filters_response_norm(), target);
  }

  // optional int32 polyak_queue_size = 23 [default = 0];
  if (has_polyak_queue_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->polyak_queue_size(), target);
  }

  // optional int32 gpu_id = 24 [default = 0];
  if (has_gpu_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->gpu_id(), target);
  }

  // optional string pretrained_model = 25;
  if (has_pretrained_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pretrained_model().data(), this->pretrained_model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.Edge.pretrained_model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->pretrained_model(), target);
  }

  // optional string pretrained_edge_name = 26;
  if (has_pretrained_edge_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pretrained_edge_name().data(), this->pretrained_edge_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.Edge.pretrained_edge_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->pretrained_edge_name(), target);
  }

  // optional bool display = 27 [default = false];
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->display(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:config.Edge)
  return target;
}

size_t Edge::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:config.Edge)
  size_t total_size = 0;

  if (has_source()) {
    // required string source = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source());
  }

  if (has_dest()) {
    // required string dest = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dest());
  }

  return total_size;
}
size_t Edge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:config.Edge)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string source = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source());

    // required string dest = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dest());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 252u) {
    // optional string tied_to = 14;
    if (has_tied_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tied_to());
    }

    // optional string pretrained_model = 25;
    if (has_pretrained_model()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pretrained_model());
    }

    // optional string pretrained_edge_name = 26;
    if (has_pretrained_edge_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pretrained_edge_name());
    }

    // optional .config.Optimizer weight_optimizer = 10;
    if (has_weight_optimizer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->weight_optimizer_);
    }

    // optional .config.Optimizer bias_optimizer = 11;
    if (has_bias_optimizer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->bias_optimizer_);
    }

    // optional .config.Edge.EdgeType edge_type = 3 [default = FC];
    if (has_edge_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->edge_type());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 padding = 6 [default = 0];
    if (has_padding()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->padding());
    }

    // optional float init_bias = 9 [default = 0];
    if (has_init_bias()) {
      total_size += 1 + 4;
    }

    // optional bool shared_bias = 12 [default = false];
    if (has_shared_bias()) {
      total_size += 1 + 1;
    }

    // optional bool block_backprop = 13 [default = false];
    if (has_block_backprop()) {
      total_size += 1 + 1;
    }

    // optional bool has_no_bias = 15 [default = false];
    if (has_has_no_bias()) {
      total_size += 1 + 1;
    }

    // optional bool response_norm_in_blocks = 19 [default = false];
    if (has_response_norm_in_blocks()) {
      total_size += 2 + 1;
    }

    // optional int32 partial_sum = 17 [default = 0];
    if (has_partial_sum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->partial_sum());
    }

    // optional float add_scale = 20 [default = 0];
    if (has_add_scale()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional float pow_scale = 21 [default = 0];
    if (has_pow_scale()) {
      total_size += 2 + 4;
    }

    // optional float frac_of_filters_response_norm = 22 [default = 0];
    if (has_frac_of_filters_response_norm()) {
      total_size += 2 + 4;
    }

    // optional int32 polyak_queue_size = 23 [default = 0];
    if (has_polyak_queue_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->polyak_queue_size());
    }

    // optional int32 gpu_id = 24 [default = 0];
    if (has_gpu_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gpu_id());
    }

    // optional bool display = 27 [default = false];
    if (has_display()) {
      total_size += 2 + 1;
    }

    // optional int32 kernel_size = 4 [default = -1];
    if (has_kernel_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kernel_size());
    }

    // optional int32 stride = 5 [default = 1];
    if (has_stride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stride());
    }

    // optional .config.Edge.Initialization initialization = 7 [default = DENSE_GAUSSIAN_SQRT_FAN_IN];
    if (has_initialization()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->initialization());
    }

  }
  if (_has_bits_[24 / 32] & 117440512u) {
    // optional float init_wt = 8 [default = 1];
    if (has_init_wt()) {
      total_size += 1 + 4;
    }

    // optional float scale_gradients = 16 [default = 1];
    if (has_scale_gradients()) {
      total_size += 2 + 4;
    }

    // optional int32 sample_factor = 18 [default = 1];
    if (has_sample_factor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sample_factor());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Edge::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:config.Edge)
  GOOGLE_DCHECK_NE(&from, this);
  const Edge* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Edge>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:config.Edge)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:config.Edge)
    MergeFrom(*source);
  }
}

void Edge::MergeFrom(const Edge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:config.Edge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_source()) {
      set_has_source();
      source_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_);
    }
    if (from.has_dest()) {
      set_has_dest();
      dest_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_);
    }
    if (from.has_tied_to()) {
      set_has_tied_to();
      tied_to_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tied_to_);
    }
    if (from.has_pretrained_model()) {
      set_has_pretrained_model();
      pretrained_model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pretrained_model_);
    }
    if (from.has_pretrained_edge_name()) {
      set_has_pretrained_edge_name();
      pretrained_edge_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pretrained_edge_name_);
    }
    if (from.has_weight_optimizer()) {
      mutable_weight_optimizer()->::config::Optimizer::MergeFrom(from.weight_optimizer());
    }
    if (from.has_bias_optimizer()) {
      mutable_bias_optimizer()->::config::Optimizer::MergeFrom(from.bias_optimizer());
    }
    if (from.has_edge_type()) {
      set_edge_type(from.edge_type());
    }
  }
  if (from._has_bits_[8 / 32] & 65280u) {
    if (from.has_padding()) {
      set_padding(from.padding());
    }
    if (from.has_init_bias()) {
      set_init_bias(from.init_bias());
    }
    if (from.has_shared_bias()) {
      set_shared_bias(from.shared_bias());
    }
    if (from.has_block_backprop()) {
      set_block_backprop(from.block_backprop());
    }
    if (from.has_has_no_bias()) {
      set_has_no_bias(from.has_no_bias());
    }
    if (from.has_response_norm_in_blocks()) {
      set_response_norm_in_blocks(from.response_norm_in_blocks());
    }
    if (from.has_partial_sum()) {
      set_partial_sum(from.partial_sum());
    }
    if (from.has_add_scale()) {
      set_add_scale(from.add_scale());
    }
  }
  if (from._has_bits_[16 / 32] & 16711680u) {
    if (from.has_pow_scale()) {
      set_pow_scale(from.pow_scale());
    }
    if (from.has_frac_of_filters_response_norm()) {
      set_frac_of_filters_response_norm(from.frac_of_filters_response_norm());
    }
    if (from.has_polyak_queue_size()) {
      set_polyak_queue_size(from.polyak_queue_size());
    }
    if (from.has_gpu_id()) {
      set_gpu_id(from.gpu_id());
    }
    if (from.has_display()) {
      set_display(from.display());
    }
    if (from.has_kernel_size()) {
      set_kernel_size(from.kernel_size());
    }
    if (from.has_stride()) {
      set_stride(from.stride());
    }
    if (from.has_initialization()) {
      set_initialization(from.initialization());
    }
  }
  if (from._has_bits_[24 / 32] & 117440512u) {
    if (from.has_init_wt()) {
      set_init_wt(from.init_wt());
    }
    if (from.has_scale_gradients()) {
      set_scale_gradients(from.scale_gradients());
    }
    if (from.has_sample_factor()) {
      set_sample_factor(from.sample_factor());
    }
  }
}

void Edge::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:config.Edge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Edge::CopyFrom(const Edge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:config.Edge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Edge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Edge::Swap(Edge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Edge::InternalSwap(Edge* other) {
  source_.Swap(&other->source_);
  dest_.Swap(&other->dest_);
  tied_to_.Swap(&other->tied_to_);
  pretrained_model_.Swap(&other->pretrained_model_);
  pretrained_edge_name_.Swap(&other->pretrained_edge_name_);
  std::swap(weight_optimizer_, other->weight_optimizer_);
  std::swap(bias_optimizer_, other->bias_optimizer_);
  std::swap(edge_type_, other->edge_type_);
  std::swap(padding_, other->padding_);
  std::swap(init_bias_, other->init_bias_);
  std::swap(shared_bias_, other->shared_bias_);
  std::swap(block_backprop_, other->block_backprop_);
  std::swap(has_no_bias_, other->has_no_bias_);
  std::swap(response_norm_in_blocks_, other->response_norm_in_blocks_);
  std::swap(partial_sum_, other->partial_sum_);
  std::swap(add_scale_, other->add_scale_);
  std::swap(pow_scale_, other->pow_scale_);
  std::swap(frac_of_filters_response_norm_, other->frac_of_filters_response_norm_);
  std::swap(polyak_queue_size_, other->polyak_queue_size_);
  std::swap(gpu_id_, other->gpu_id_);
  std::swap(display_, other->display_);
  std::swap(kernel_size_, other->kernel_size_);
  std::swap(stride_, other->stride_);
  std::swap(initialization_, other->initialization_);
  std::swap(init_wt_, other->init_wt_);
  std::swap(scale_gradients_, other->scale_gradients_);
  std::swap(sample_factor_, other->sample_factor_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Edge::GetMetadata() const {
  protobuf_convnet_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_convnet_5fconfig_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Edge

// required string source = 1;
bool Edge::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Edge::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
void Edge::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
void Edge::clear_source() {
  source_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source();
}
const ::std::string& Edge::source() const {
  // @@protoc_insertion_point(field_get:config.Edge.source)
  return source_.GetNoArena();
}
void Edge::set_source(const ::std::string& value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.Edge.source)
}
#if LANG_CXX11
void Edge::set_source(::std::string&& value) {
  set_has_source();
  source_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.Edge.source)
}
#endif
void Edge::set_source(const char* value) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.Edge.source)
}
void Edge::set_source(const char* value, size_t size) {
  set_has_source();
  source_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.Edge.source)
}
::std::string* Edge::mutable_source() {
  set_has_source();
  // @@protoc_insertion_point(field_mutable:config.Edge.source)
  return source_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Edge::release_source() {
  // @@protoc_insertion_point(field_release:config.Edge.source)
  clear_has_source();
  return source_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Edge::set_allocated_source(::std::string* source) {
  if (source != NULL) {
    set_has_source();
  } else {
    clear_has_source();
  }
  source_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source);
  // @@protoc_insertion_point(field_set_allocated:config.Edge.source)
}

// required string dest = 2;
bool Edge::has_dest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Edge::set_has_dest() {
  _has_bits_[0] |= 0x00000002u;
}
void Edge::clear_has_dest() {
  _has_bits_[0] &= ~0x00000002u;
}
void Edge::clear_dest() {
  dest_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dest();
}
const ::std::string& Edge::dest() const {
  // @@protoc_insertion_point(field_get:config.Edge.dest)
  return dest_.GetNoArena();
}
void Edge::set_dest(const ::std::string& value) {
  set_has_dest();
  dest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.Edge.dest)
}
#if LANG_CXX11
void Edge::set_dest(::std::string&& value) {
  set_has_dest();
  dest_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.Edge.dest)
}
#endif
void Edge::set_dest(const char* value) {
  set_has_dest();
  dest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.Edge.dest)
}
void Edge::set_dest(const char* value, size_t size) {
  set_has_dest();
  dest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.Edge.dest)
}
::std::string* Edge::mutable_dest() {
  set_has_dest();
  // @@protoc_insertion_point(field_mutable:config.Edge.dest)
  return dest_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Edge::release_dest() {
  // @@protoc_insertion_point(field_release:config.Edge.dest)
  clear_has_dest();
  return dest_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Edge::set_allocated_dest(::std::string* dest) {
  if (dest != NULL) {
    set_has_dest();
  } else {
    clear_has_dest();
  }
  dest_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dest);
  // @@protoc_insertion_point(field_set_allocated:config.Edge.dest)
}

// optional .config.Edge.EdgeType edge_type = 3 [default = FC];
bool Edge::has_edge_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Edge::set_has_edge_type() {
  _has_bits_[0] |= 0x00000080u;
}
void Edge::clear_has_edge_type() {
  _has_bits_[0] &= ~0x00000080u;
}
void Edge::clear_edge_type() {
  edge_type_ = 0;
  clear_has_edge_type();
}
::config::Edge_EdgeType Edge::edge_type() const {
  // @@protoc_insertion_point(field_get:config.Edge.edge_type)
  return static_cast< ::config::Edge_EdgeType >(edge_type_);
}
void Edge::set_edge_type(::config::Edge_EdgeType value) {
  assert(::config::Edge_EdgeType_IsValid(value));
  set_has_edge_type();
  edge_type_ = value;
  // @@protoc_insertion_point(field_set:config.Edge.edge_type)
}

// optional int32 kernel_size = 4 [default = -1];
bool Edge::has_kernel_size() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void Edge::set_has_kernel_size() {
  _has_bits_[0] |= 0x00200000u;
}
void Edge::clear_has_kernel_size() {
  _has_bits_[0] &= ~0x00200000u;
}
void Edge::clear_kernel_size() {
  kernel_size_ = -1;
  clear_has_kernel_size();
}
::google::protobuf::int32 Edge::kernel_size() const {
  // @@protoc_insertion_point(field_get:config.Edge.kernel_size)
  return kernel_size_;
}
void Edge::set_kernel_size(::google::protobuf::int32 value) {
  set_has_kernel_size();
  kernel_size_ = value;
  // @@protoc_insertion_point(field_set:config.Edge.kernel_size)
}

// optional int32 stride = 5 [default = 1];
bool Edge::has_stride() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void Edge::set_has_stride() {
  _has_bits_[0] |= 0x00400000u;
}
void Edge::clear_has_stride() {
  _has_bits_[0] &= ~0x00400000u;
}
void Edge::clear_stride() {
  stride_ = 1;
  clear_has_stride();
}
::google::protobuf::int32 Edge::stride() const {
  // @@protoc_insertion_point(field_get:config.Edge.stride)
  return stride_;
}
void Edge::set_stride(::google::protobuf::int32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:config.Edge.stride)
}

// optional int32 padding = 6 [default = 0];
bool Edge::has_padding() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Edge::set_has_padding() {
  _has_bits_[0] |= 0x00000100u;
}
void Edge::clear_has_padding() {
  _has_bits_[0] &= ~0x00000100u;
}
void Edge::clear_padding() {
  padding_ = 0;
  clear_has_padding();
}
::google::protobuf::int32 Edge::padding() const {
  // @@protoc_insertion_point(field_get:config.Edge.padding)
  return padding_;
}
void Edge::set_padding(::google::protobuf::int32 value) {
  set_has_padding();
  padding_ = value;
  // @@protoc_insertion_point(field_set:config.Edge.padding)
}

// optional .config.Edge.Initialization initialization = 7 [default = DENSE_GAUSSIAN_SQRT_FAN_IN];
bool Edge::has_initialization() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void Edge::set_has_initialization() {
  _has_bits_[0] |= 0x00800000u;
}
void Edge::clear_has_initialization() {
  _has_bits_[0] &= ~0x00800000u;
}
void Edge::clear_initialization() {
  initialization_ = 3;
  clear_has_initialization();
}
::config::Edge_Initialization Edge::initialization() const {
  // @@protoc_insertion_point(field_get:config.Edge.initialization)
  return static_cast< ::config::Edge_Initialization >(initialization_);
}
void Edge::set_initialization(::config::Edge_Initialization value) {
  assert(::config::Edge_Initialization_IsValid(value));
  set_has_initialization();
  initialization_ = value;
  // @@protoc_insertion_point(field_set:config.Edge.initialization)
}

// optional float init_wt = 8 [default = 1];
bool Edge::has_init_wt() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void Edge::set_has_init_wt() {
  _has_bits_[0] |= 0x01000000u;
}
void Edge::clear_has_init_wt() {
  _has_bits_[0] &= ~0x01000000u;
}
void Edge::clear_init_wt() {
  init_wt_ = 1;
  clear_has_init_wt();
}
float Edge::init_wt() const {
  // @@protoc_insertion_point(field_get:config.Edge.init_wt)
  return init_wt_;
}
void Edge::set_init_wt(float value) {
  set_has_init_wt();
  init_wt_ = value;
  // @@protoc_insertion_point(field_set:config.Edge.init_wt)
}

// optional float init_bias = 9 [default = 0];
bool Edge::has_init_bias() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Edge::set_has_init_bias() {
  _has_bits_[0] |= 0x00000200u;
}
void Edge::clear_has_init_bias() {
  _has_bits_[0] &= ~0x00000200u;
}
void Edge::clear_init_bias() {
  init_bias_ = 0;
  clear_has_init_bias();
}
float Edge::init_bias() const {
  // @@protoc_insertion_point(field_get:config.Edge.init_bias)
  return init_bias_;
}
void Edge::set_init_bias(float value) {
  set_has_init_bias();
  init_bias_ = value;
  // @@protoc_insertion_point(field_set:config.Edge.init_bias)
}

// optional .config.Optimizer weight_optimizer = 10;
bool Edge::has_weight_optimizer() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Edge::set_has_weight_optimizer() {
  _has_bits_[0] |= 0x00000020u;
}
void Edge::clear_has_weight_optimizer() {
  _has_bits_[0] &= ~0x00000020u;
}
void Edge::clear_weight_optimizer() {
  if (weight_optimizer_ != NULL) weight_optimizer_->::config::Optimizer::Clear();
  clear_has_weight_optimizer();
}
const ::config::Optimizer& Edge::weight_optimizer() const {
  // @@protoc_insertion_point(field_get:config.Edge.weight_optimizer)
  return weight_optimizer_ != NULL ? *weight_optimizer_
                         : *::config::Optimizer::internal_default_instance();
}
::config::Optimizer* Edge::mutable_weight_optimizer() {
  set_has_weight_optimizer();
  if (weight_optimizer_ == NULL) {
    weight_optimizer_ = new ::config::Optimizer;
  }
  // @@protoc_insertion_point(field_mutable:config.Edge.weight_optimizer)
  return weight_optimizer_;
}
::config::Optimizer* Edge::release_weight_optimizer() {
  // @@protoc_insertion_point(field_release:config.Edge.weight_optimizer)
  clear_has_weight_optimizer();
  ::config::Optimizer* temp = weight_optimizer_;
  weight_optimizer_ = NULL;
  return temp;
}
void Edge::set_allocated_weight_optimizer(::config::Optimizer* weight_optimizer) {
  delete weight_optimizer_;
  weight_optimizer_ = weight_optimizer;
  if (weight_optimizer) {
    set_has_weight_optimizer();
  } else {
    clear_has_weight_optimizer();
  }
  // @@protoc_insertion_point(field_set_allocated:config.Edge.weight_optimizer)
}

// optional .config.Optimizer bias_optimizer = 11;
bool Edge::has_bias_optimizer() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Edge::set_has_bias_optimizer() {
  _has_bits_[0] |= 0x00000040u;
}
void Edge::clear_has_bias_optimizer() {
  _has_bits_[0] &= ~0x00000040u;
}
void Edge::clear_bias_optimizer() {
  if (bias_optimizer_ != NULL) bias_optimizer_->::config::Optimizer::Clear();
  clear_has_bias_optimizer();
}
const ::config::Optimizer& Edge::bias_optimizer() const {
  // @@protoc_insertion_point(field_get:config.Edge.bias_optimizer)
  return bias_optimizer_ != NULL ? *bias_optimizer_
                         : *::config::Optimizer::internal_default_instance();
}
::config::Optimizer* Edge::mutable_bias_optimizer() {
  set_has_bias_optimizer();
  if (bias_optimizer_ == NULL) {
    bias_optimizer_ = new ::config::Optimizer;
  }
  // @@protoc_insertion_point(field_mutable:config.Edge.bias_optimizer)
  return bias_optimizer_;
}
::config::Optimizer* Edge::release_bias_optimizer() {
  // @@protoc_insertion_point(field_release:config.Edge.bias_optimizer)
  clear_has_bias_optimizer();
  ::config::Optimizer* temp = bias_optimizer_;
  bias_optimizer_ = NULL;
  return temp;
}
void Edge::set_allocated_bias_optimizer(::config::Optimizer* bias_optimizer) {
  delete bias_optimizer_;
  bias_optimizer_ = bias_optimizer;
  if (bias_optimizer) {
    set_has_bias_optimizer();
  } else {
    clear_has_bias_optimizer();
  }
  // @@protoc_insertion_point(field_set_allocated:config.Edge.bias_optimizer)
}

// optional bool shared_bias = 12 [default = false];
bool Edge::has_shared_bias() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Edge::set_has_shared_bias() {
  _has_bits_[0] |= 0x00000400u;
}
void Edge::clear_has_shared_bias() {
  _has_bits_[0] &= ~0x00000400u;
}
void Edge::clear_shared_bias() {
  shared_bias_ = false;
  clear_has_shared_bias();
}
bool Edge::shared_bias() const {
  // @@protoc_insertion_point(field_get:config.Edge.shared_bias)
  return shared_bias_;
}
void Edge::set_shared_bias(bool value) {
  set_has_shared_bias();
  shared_bias_ = value;
  // @@protoc_insertion_point(field_set:config.Edge.shared_bias)
}

// optional bool block_backprop = 13 [default = false];
bool Edge::has_block_backprop() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Edge::set_has_block_backprop() {
  _has_bits_[0] |= 0x00000800u;
}
void Edge::clear_has_block_backprop() {
  _has_bits_[0] &= ~0x00000800u;
}
void Edge::clear_block_backprop() {
  block_backprop_ = false;
  clear_has_block_backprop();
}
bool Edge::block_backprop() const {
  // @@protoc_insertion_point(field_get:config.Edge.block_backprop)
  return block_backprop_;
}
void Edge::set_block_backprop(bool value) {
  set_has_block_backprop();
  block_backprop_ = value;
  // @@protoc_insertion_point(field_set:config.Edge.block_backprop)
}

// optional string tied_to = 14;
bool Edge::has_tied_to() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Edge::set_has_tied_to() {
  _has_bits_[0] |= 0x00000004u;
}
void Edge::clear_has_tied_to() {
  _has_bits_[0] &= ~0x00000004u;
}
void Edge::clear_tied_to() {
  tied_to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tied_to();
}
const ::std::string& Edge::tied_to() const {
  // @@protoc_insertion_point(field_get:config.Edge.tied_to)
  return tied_to_.GetNoArena();
}
void Edge::set_tied_to(const ::std::string& value) {
  set_has_tied_to();
  tied_to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.Edge.tied_to)
}
#if LANG_CXX11
void Edge::set_tied_to(::std::string&& value) {
  set_has_tied_to();
  tied_to_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.Edge.tied_to)
}
#endif
void Edge::set_tied_to(const char* value) {
  set_has_tied_to();
  tied_to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.Edge.tied_to)
}
void Edge::set_tied_to(const char* value, size_t size) {
  set_has_tied_to();
  tied_to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.Edge.tied_to)
}
::std::string* Edge::mutable_tied_to() {
  set_has_tied_to();
  // @@protoc_insertion_point(field_mutable:config.Edge.tied_to)
  return tied_to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Edge::release_tied_to() {
  // @@protoc_insertion_point(field_release:config.Edge.tied_to)
  clear_has_tied_to();
  return tied_to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Edge::set_allocated_tied_to(::std::string* tied_to) {
  if (tied_to != NULL) {
    set_has_tied_to();
  } else {
    clear_has_tied_to();
  }
  tied_to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tied_to);
  // @@protoc_insertion_point(field_set_allocated:config.Edge.tied_to)
}

// optional bool has_no_bias = 15 [default = false];
bool Edge::has_has_no_bias() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Edge::set_has_has_no_bias() {
  _has_bits_[0] |= 0x00001000u;
}
void Edge::clear_has_has_no_bias() {
  _has_bits_[0] &= ~0x00001000u;
}
void Edge::clear_has_no_bias() {
  has_no_bias_ = false;
  clear_has_has_no_bias();
}
bool Edge::has_no_bias() const {
  // @@protoc_insertion_point(field_get:config.Edge.has_no_bias)
  return has_no_bias_;
}
void Edge::set_has_no_bias(bool value) {
  set_has_has_no_bias();
  has_no_bias_ = value;
  // @@protoc_insertion_point(field_set:config.Edge.has_no_bias)
}

// optional float scale_gradients = 16 [default = 1];
bool Edge::has_scale_gradients() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void Edge::set_has_scale_gradients() {
  _has_bits_[0] |= 0x02000000u;
}
void Edge::clear_has_scale_gradients() {
  _has_bits_[0] &= ~0x02000000u;
}
void Edge::clear_scale_gradients() {
  scale_gradients_ = 1;
  clear_has_scale_gradients();
}
float Edge::scale_gradients() const {
  // @@protoc_insertion_point(field_get:config.Edge.scale_gradients)
  return scale_gradients_;
}
void Edge::set_scale_gradients(float value) {
  set_has_scale_gradients();
  scale_gradients_ = value;
  // @@protoc_insertion_point(field_set:config.Edge.scale_gradients)
}

// optional int32 partial_sum = 17 [default = 0];
bool Edge::has_partial_sum() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Edge::set_has_partial_sum() {
  _has_bits_[0] |= 0x00004000u;
}
void Edge::clear_has_partial_sum() {
  _has_bits_[0] &= ~0x00004000u;
}
void Edge::clear_partial_sum() {
  partial_sum_ = 0;
  clear_has_partial_sum();
}
::google::protobuf::int32 Edge::partial_sum() const {
  // @@protoc_insertion_point(field_get:config.Edge.partial_sum)
  return partial_sum_;
}
void Edge::set_partial_sum(::google::protobuf::int32 value) {
  set_has_partial_sum();
  partial_sum_ = value;
  // @@protoc_insertion_point(field_set:config.Edge.partial_sum)
}

// optional int32 sample_factor = 18 [default = 1];
bool Edge::has_sample_factor() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void Edge::set_has_sample_factor() {
  _has_bits_[0] |= 0x04000000u;
}
void Edge::clear_has_sample_factor() {
  _has_bits_[0] &= ~0x04000000u;
}
void Edge::clear_sample_factor() {
  sample_factor_ = 1;
  clear_has_sample_factor();
}
::google::protobuf::int32 Edge::sample_factor() const {
  // @@protoc_insertion_point(field_get:config.Edge.sample_factor)
  return sample_factor_;
}
void Edge::set_sample_factor(::google::protobuf::int32 value) {
  set_has_sample_factor();
  sample_factor_ = value;
  // @@protoc_insertion_point(field_set:config.Edge.sample_factor)
}

// optional bool response_norm_in_blocks = 19 [default = false];
bool Edge::has_response_norm_in_blocks() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Edge::set_has_response_norm_in_blocks() {
  _has_bits_[0] |= 0x00002000u;
}
void Edge::clear_has_response_norm_in_blocks() {
  _has_bits_[0] &= ~0x00002000u;
}
void Edge::clear_response_norm_in_blocks() {
  response_norm_in_blocks_ = false;
  clear_has_response_norm_in_blocks();
}
bool Edge::response_norm_in_blocks() const {
  // @@protoc_insertion_point(field_get:config.Edge.response_norm_in_blocks)
  return response_norm_in_blocks_;
}
void Edge::set_response_norm_in_blocks(bool value) {
  set_has_response_norm_in_blocks();
  response_norm_in_blocks_ = value;
  // @@protoc_insertion_point(field_set:config.Edge.response_norm_in_blocks)
}

// optional float add_scale = 20 [default = 0];
bool Edge::has_add_scale() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Edge::set_has_add_scale() {
  _has_bits_[0] |= 0x00008000u;
}
void Edge::clear_has_add_scale() {
  _has_bits_[0] &= ~0x00008000u;
}
void Edge::clear_add_scale() {
  add_scale_ = 0;
  clear_has_add_scale();
}
float Edge::add_scale() const {
  // @@protoc_insertion_point(field_get:config.Edge.add_scale)
  return add_scale_;
}
void Edge::set_add_scale(float value) {
  set_has_add_scale();
  add_scale_ = value;
  // @@protoc_insertion_point(field_set:config.Edge.add_scale)
}

// optional float pow_scale = 21 [default = 0];
bool Edge::has_pow_scale() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Edge::set_has_pow_scale() {
  _has_bits_[0] |= 0x00010000u;
}
void Edge::clear_has_pow_scale() {
  _has_bits_[0] &= ~0x00010000u;
}
void Edge::clear_pow_scale() {
  pow_scale_ = 0;
  clear_has_pow_scale();
}
float Edge::pow_scale() const {
  // @@protoc_insertion_point(field_get:config.Edge.pow_scale)
  return pow_scale_;
}
void Edge::set_pow_scale(float value) {
  set_has_pow_scale();
  pow_scale_ = value;
  // @@protoc_insertion_point(field_set:config.Edge.pow_scale)
}

// optional float frac_of_filters_response_norm = 22 [default = 0];
bool Edge::has_frac_of_filters_response_norm() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Edge::set_has_frac_of_filters_response_norm() {
  _has_bits_[0] |= 0x00020000u;
}
void Edge::clear_has_frac_of_filters_response_norm() {
  _has_bits_[0] &= ~0x00020000u;
}
void Edge::clear_frac_of_filters_response_norm() {
  frac_of_filters_response_norm_ = 0;
  clear_has_frac_of_filters_response_norm();
}
float Edge::frac_of_filters_response_norm() const {
  // @@protoc_insertion_point(field_get:config.Edge.frac_of_filters_response_norm)
  return frac_of_filters_response_norm_;
}
void Edge::set_frac_of_filters_response_norm(float value) {
  set_has_frac_of_filters_response_norm();
  frac_of_filters_response_norm_ = value;
  // @@protoc_insertion_point(field_set:config.Edge.frac_of_filters_response_norm)
}

// optional int32 polyak_queue_size = 23 [default = 0];
bool Edge::has_polyak_queue_size() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void Edge::set_has_polyak_queue_size() {
  _has_bits_[0] |= 0x00040000u;
}
void Edge::clear_has_polyak_queue_size() {
  _has_bits_[0] &= ~0x00040000u;
}
void Edge::clear_polyak_queue_size() {
  polyak_queue_size_ = 0;
  clear_has_polyak_queue_size();
}
::google::protobuf::int32 Edge::polyak_queue_size() const {
  // @@protoc_insertion_point(field_get:config.Edge.polyak_queue_size)
  return polyak_queue_size_;
}
void Edge::set_polyak_queue_size(::google::protobuf::int32 value) {
  set_has_polyak_queue_size();
  polyak_queue_size_ = value;
  // @@protoc_insertion_point(field_set:config.Edge.polyak_queue_size)
}

// optional int32 gpu_id = 24 [default = 0];
bool Edge::has_gpu_id() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void Edge::set_has_gpu_id() {
  _has_bits_[0] |= 0x00080000u;
}
void Edge::clear_has_gpu_id() {
  _has_bits_[0] &= ~0x00080000u;
}
void Edge::clear_gpu_id() {
  gpu_id_ = 0;
  clear_has_gpu_id();
}
::google::protobuf::int32 Edge::gpu_id() const {
  // @@protoc_insertion_point(field_get:config.Edge.gpu_id)
  return gpu_id_;
}
void Edge::set_gpu_id(::google::protobuf::int32 value) {
  set_has_gpu_id();
  gpu_id_ = value;
  // @@protoc_insertion_point(field_set:config.Edge.gpu_id)
}

// optional string pretrained_model = 25;
bool Edge::has_pretrained_model() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Edge::set_has_pretrained_model() {
  _has_bits_[0] |= 0x00000008u;
}
void Edge::clear_has_pretrained_model() {
  _has_bits_[0] &= ~0x00000008u;
}
void Edge::clear_pretrained_model() {
  pretrained_model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pretrained_model();
}
const ::std::string& Edge::pretrained_model() const {
  // @@protoc_insertion_point(field_get:config.Edge.pretrained_model)
  return pretrained_model_.GetNoArena();
}
void Edge::set_pretrained_model(const ::std::string& value) {
  set_has_pretrained_model();
  pretrained_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.Edge.pretrained_model)
}
#if LANG_CXX11
void Edge::set_pretrained_model(::std::string&& value) {
  set_has_pretrained_model();
  pretrained_model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.Edge.pretrained_model)
}
#endif
void Edge::set_pretrained_model(const char* value) {
  set_has_pretrained_model();
  pretrained_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.Edge.pretrained_model)
}
void Edge::set_pretrained_model(const char* value, size_t size) {
  set_has_pretrained_model();
  pretrained_model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.Edge.pretrained_model)
}
::std::string* Edge::mutable_pretrained_model() {
  set_has_pretrained_model();
  // @@protoc_insertion_point(field_mutable:config.Edge.pretrained_model)
  return pretrained_model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Edge::release_pretrained_model() {
  // @@protoc_insertion_point(field_release:config.Edge.pretrained_model)
  clear_has_pretrained_model();
  return pretrained_model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Edge::set_allocated_pretrained_model(::std::string* pretrained_model) {
  if (pretrained_model != NULL) {
    set_has_pretrained_model();
  } else {
    clear_has_pretrained_model();
  }
  pretrained_model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pretrained_model);
  // @@protoc_insertion_point(field_set_allocated:config.Edge.pretrained_model)
}

// optional string pretrained_edge_name = 26;
bool Edge::has_pretrained_edge_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Edge::set_has_pretrained_edge_name() {
  _has_bits_[0] |= 0x00000010u;
}
void Edge::clear_has_pretrained_edge_name() {
  _has_bits_[0] &= ~0x00000010u;
}
void Edge::clear_pretrained_edge_name() {
  pretrained_edge_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pretrained_edge_name();
}
const ::std::string& Edge::pretrained_edge_name() const {
  // @@protoc_insertion_point(field_get:config.Edge.pretrained_edge_name)
  return pretrained_edge_name_.GetNoArena();
}
void Edge::set_pretrained_edge_name(const ::std::string& value) {
  set_has_pretrained_edge_name();
  pretrained_edge_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.Edge.pretrained_edge_name)
}
#if LANG_CXX11
void Edge::set_pretrained_edge_name(::std::string&& value) {
  set_has_pretrained_edge_name();
  pretrained_edge_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.Edge.pretrained_edge_name)
}
#endif
void Edge::set_pretrained_edge_name(const char* value) {
  set_has_pretrained_edge_name();
  pretrained_edge_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.Edge.pretrained_edge_name)
}
void Edge::set_pretrained_edge_name(const char* value, size_t size) {
  set_has_pretrained_edge_name();
  pretrained_edge_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.Edge.pretrained_edge_name)
}
::std::string* Edge::mutable_pretrained_edge_name() {
  set_has_pretrained_edge_name();
  // @@protoc_insertion_point(field_mutable:config.Edge.pretrained_edge_name)
  return pretrained_edge_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Edge::release_pretrained_edge_name() {
  // @@protoc_insertion_point(field_release:config.Edge.pretrained_edge_name)
  clear_has_pretrained_edge_name();
  return pretrained_edge_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Edge::set_allocated_pretrained_edge_name(::std::string* pretrained_edge_name) {
  if (pretrained_edge_name != NULL) {
    set_has_pretrained_edge_name();
  } else {
    clear_has_pretrained_edge_name();
  }
  pretrained_edge_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pretrained_edge_name);
  // @@protoc_insertion_point(field_set_allocated:config.Edge.pretrained_edge_name)
}

// optional bool display = 27 [default = false];
bool Edge::has_display() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void Edge::set_has_display() {
  _has_bits_[0] |= 0x00100000u;
}
void Edge::clear_has_display() {
  _has_bits_[0] &= ~0x00100000u;
}
void Edge::clear_display() {
  display_ = false;
  clear_has_display();
}
bool Edge::display() const {
  // @@protoc_insertion_point(field_get:config.Edge.display)
  return display_;
}
void Edge::set_display(bool value) {
  set_has_display();
  display_ = value;
  // @@protoc_insertion_point(field_set:config.Edge.display)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Subnet_MergeLayer::kSubnetLayerFieldNumber;
const int Subnet_MergeLayer::kNetLayerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Subnet_MergeLayer::Subnet_MergeLayer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_convnet_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:config.Subnet.MergeLayer)
}
Subnet_MergeLayer::Subnet_MergeLayer(const Subnet_MergeLayer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subnet_layer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_subnet_layer()) {
    subnet_layer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subnet_layer_);
  }
  net_layer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_net_layer()) {
    net_layer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.net_layer_);
  }
  // @@protoc_insertion_point(copy_constructor:config.Subnet.MergeLayer)
}

void Subnet_MergeLayer::SharedCtor() {
  _cached_size_ = 0;
  subnet_layer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  net_layer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Subnet_MergeLayer::~Subnet_MergeLayer() {
  // @@protoc_insertion_point(destructor:config.Subnet.MergeLayer)
  SharedDtor();
}

void Subnet_MergeLayer::SharedDtor() {
  subnet_layer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  net_layer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Subnet_MergeLayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Subnet_MergeLayer::descriptor() {
  protobuf_convnet_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_convnet_5fconfig_2eproto::file_level_metadata[3].descriptor;
}

const Subnet_MergeLayer& Subnet_MergeLayer::default_instance() {
  protobuf_convnet_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

Subnet_MergeLayer* Subnet_MergeLayer::New(::google::protobuf::Arena* arena) const {
  Subnet_MergeLayer* n = new Subnet_MergeLayer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Subnet_MergeLayer::Clear() {
// @@protoc_insertion_point(message_clear_start:config.Subnet.MergeLayer)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_subnet_layer()) {
      GOOGLE_DCHECK(!subnet_layer_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*subnet_layer_.UnsafeRawStringPointer())->clear();
    }
    if (has_net_layer()) {
      GOOGLE_DCHECK(!net_layer_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*net_layer_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Subnet_MergeLayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:config.Subnet.MergeLayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string subnet_layer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subnet_layer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->subnet_layer().data(), this->subnet_layer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "config.Subnet.MergeLayer.subnet_layer");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string net_layer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_net_layer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->net_layer().data(), this->net_layer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "config.Subnet.MergeLayer.net_layer");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:config.Subnet.MergeLayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:config.Subnet.MergeLayer)
  return false;
#undef DO_
}

void Subnet_MergeLayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:config.Subnet.MergeLayer)
  // required string subnet_layer = 1;
  if (has_subnet_layer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subnet_layer().data(), this->subnet_layer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.Subnet.MergeLayer.subnet_layer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->subnet_layer(), output);
  }

  // required string net_layer = 2;
  if (has_net_layer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->net_layer().data(), this->net_layer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.Subnet.MergeLayer.net_layer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->net_layer(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:config.Subnet.MergeLayer)
}

::google::protobuf::uint8* Subnet_MergeLayer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:config.Subnet.MergeLayer)
  // required string subnet_layer = 1;
  if (has_subnet_layer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->subnet_layer().data(), this->subnet_layer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.Subnet.MergeLayer.subnet_layer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->subnet_layer(), target);
  }

  // required string net_layer = 2;
  if (has_net_layer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->net_layer().data(), this->net_layer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.Subnet.MergeLayer.net_layer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->net_layer(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:config.Subnet.MergeLayer)
  return target;
}

size_t Subnet_MergeLayer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:config.Subnet.MergeLayer)
  size_t total_size = 0;

  if (has_subnet_layer()) {
    // required string subnet_layer = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->subnet_layer());
  }

  if (has_net_layer()) {
    // required string net_layer = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->net_layer());
  }

  return total_size;
}
size_t Subnet_MergeLayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:config.Subnet.MergeLayer)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string subnet_layer = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->subnet_layer());

    // required string net_layer = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->net_layer());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Subnet_MergeLayer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:config.Subnet.MergeLayer)
  GOOGLE_DCHECK_NE(&from, this);
  const Subnet_MergeLayer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Subnet_MergeLayer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:config.Subnet.MergeLayer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:config.Subnet.MergeLayer)
    MergeFrom(*source);
  }
}

void Subnet_MergeLayer::MergeFrom(const Subnet_MergeLayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:config.Subnet.MergeLayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_subnet_layer()) {
      set_has_subnet_layer();
      subnet_layer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subnet_layer_);
    }
    if (from.has_net_layer()) {
      set_has_net_layer();
      net_layer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.net_layer_);
    }
  }
}

void Subnet_MergeLayer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:config.Subnet.MergeLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Subnet_MergeLayer::CopyFrom(const Subnet_MergeLayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:config.Subnet.MergeLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Subnet_MergeLayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Subnet_MergeLayer::Swap(Subnet_MergeLayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Subnet_MergeLayer::InternalSwap(Subnet_MergeLayer* other) {
  subnet_layer_.Swap(&other->subnet_layer_);
  net_layer_.Swap(&other->net_layer_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Subnet_MergeLayer::GetMetadata() const {
  protobuf_convnet_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_convnet_5fconfig_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Subnet_MergeLayer

// required string subnet_layer = 1;
bool Subnet_MergeLayer::has_subnet_layer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Subnet_MergeLayer::set_has_subnet_layer() {
  _has_bits_[0] |= 0x00000001u;
}
void Subnet_MergeLayer::clear_has_subnet_layer() {
  _has_bits_[0] &= ~0x00000001u;
}
void Subnet_MergeLayer::clear_subnet_layer() {
  subnet_layer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_subnet_layer();
}
const ::std::string& Subnet_MergeLayer::subnet_layer() const {
  // @@protoc_insertion_point(field_get:config.Subnet.MergeLayer.subnet_layer)
  return subnet_layer_.GetNoArena();
}
void Subnet_MergeLayer::set_subnet_layer(const ::std::string& value) {
  set_has_subnet_layer();
  subnet_layer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.Subnet.MergeLayer.subnet_layer)
}
#if LANG_CXX11
void Subnet_MergeLayer::set_subnet_layer(::std::string&& value) {
  set_has_subnet_layer();
  subnet_layer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.Subnet.MergeLayer.subnet_layer)
}
#endif
void Subnet_MergeLayer::set_subnet_layer(const char* value) {
  set_has_subnet_layer();
  subnet_layer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.Subnet.MergeLayer.subnet_layer)
}
void Subnet_MergeLayer::set_subnet_layer(const char* value, size_t size) {
  set_has_subnet_layer();
  subnet_layer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.Subnet.MergeLayer.subnet_layer)
}
::std::string* Subnet_MergeLayer::mutable_subnet_layer() {
  set_has_subnet_layer();
  // @@protoc_insertion_point(field_mutable:config.Subnet.MergeLayer.subnet_layer)
  return subnet_layer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Subnet_MergeLayer::release_subnet_layer() {
  // @@protoc_insertion_point(field_release:config.Subnet.MergeLayer.subnet_layer)
  clear_has_subnet_layer();
  return subnet_layer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Subnet_MergeLayer::set_allocated_subnet_layer(::std::string* subnet_layer) {
  if (subnet_layer != NULL) {
    set_has_subnet_layer();
  } else {
    clear_has_subnet_layer();
  }
  subnet_layer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subnet_layer);
  // @@protoc_insertion_point(field_set_allocated:config.Subnet.MergeLayer.subnet_layer)
}

// required string net_layer = 2;
bool Subnet_MergeLayer::has_net_layer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Subnet_MergeLayer::set_has_net_layer() {
  _has_bits_[0] |= 0x00000002u;
}
void Subnet_MergeLayer::clear_has_net_layer() {
  _has_bits_[0] &= ~0x00000002u;
}
void Subnet_MergeLayer::clear_net_layer() {
  net_layer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_net_layer();
}
const ::std::string& Subnet_MergeLayer::net_layer() const {
  // @@protoc_insertion_point(field_get:config.Subnet.MergeLayer.net_layer)
  return net_layer_.GetNoArena();
}
void Subnet_MergeLayer::set_net_layer(const ::std::string& value) {
  set_has_net_layer();
  net_layer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.Subnet.MergeLayer.net_layer)
}
#if LANG_CXX11
void Subnet_MergeLayer::set_net_layer(::std::string&& value) {
  set_has_net_layer();
  net_layer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.Subnet.MergeLayer.net_layer)
}
#endif
void Subnet_MergeLayer::set_net_layer(const char* value) {
  set_has_net_layer();
  net_layer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.Subnet.MergeLayer.net_layer)
}
void Subnet_MergeLayer::set_net_layer(const char* value, size_t size) {
  set_has_net_layer();
  net_layer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.Subnet.MergeLayer.net_layer)
}
::std::string* Subnet_MergeLayer::mutable_net_layer() {
  set_has_net_layer();
  // @@protoc_insertion_point(field_mutable:config.Subnet.MergeLayer.net_layer)
  return net_layer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Subnet_MergeLayer::release_net_layer() {
  // @@protoc_insertion_point(field_release:config.Subnet.MergeLayer.net_layer)
  clear_has_net_layer();
  return net_layer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Subnet_MergeLayer::set_allocated_net_layer(::std::string* net_layer) {
  if (net_layer != NULL) {
    set_has_net_layer();
  } else {
    clear_has_net_layer();
  }
  net_layer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), net_layer);
  // @@protoc_insertion_point(field_set_allocated:config.Subnet.MergeLayer.net_layer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Subnet::kNameFieldNumber;
const int Subnet::kModelFileFieldNumber;
const int Subnet::kParametersFileFieldNumber;
const int Subnet::kMergeLayerFieldNumber;
const int Subnet::kBlockBackpropFieldNumber;
const int Subnet::kStartOptimizationAfterFieldNumber;
const int Subnet::kGpuIdOffsetFieldNumber;
const int Subnet::kNumChannelsMultiplierFieldNumber;
const int Subnet::kRemoveLayerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Subnet::Subnet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_convnet_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:config.Subnet)
}
Subnet::Subnet(const Subnet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      merge_layer_(from.merge_layer_),
      remove_layer_(from.remove_layer_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  model_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_model_file()) {
    model_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_file_);
  }
  parameters_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_parameters_file()) {
    parameters_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parameters_file_);
  }
  ::memcpy(&block_backprop_, &from.block_backprop_,
    reinterpret_cast<char*>(&num_channels_multiplier_) -
    reinterpret_cast<char*>(&block_backprop_) + sizeof(num_channels_multiplier_));
  // @@protoc_insertion_point(copy_constructor:config.Subnet)
}

void Subnet::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parameters_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&block_backprop_, 0, reinterpret_cast<char*>(&gpu_id_offset_) -
    reinterpret_cast<char*>(&block_backprop_) + sizeof(gpu_id_offset_));
  num_channels_multiplier_ = 1;
}

Subnet::~Subnet() {
  // @@protoc_insertion_point(destructor:config.Subnet)
  SharedDtor();
}

void Subnet::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parameters_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Subnet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Subnet::descriptor() {
  protobuf_convnet_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_convnet_5fconfig_2eproto::file_level_metadata[4].descriptor;
}

const Subnet& Subnet::default_instance() {
  protobuf_convnet_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

Subnet* Subnet::New(::google::protobuf::Arena* arena) const {
  Subnet* n = new Subnet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Subnet::Clear() {
// @@protoc_insertion_point(message_clear_start:config.Subnet)
  merge_layer_.Clear();
  remove_layer_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_model_file()) {
      GOOGLE_DCHECK(!model_file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*model_file_.UnsafeRawStringPointer())->clear();
    }
    if (has_parameters_file()) {
      GOOGLE_DCHECK(!parameters_file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*parameters_file_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 120u) {
    ::memset(&block_backprop_, 0, reinterpret_cast<char*>(&gpu_id_offset_) -
      reinterpret_cast<char*>(&block_backprop_) + sizeof(gpu_id_offset_));
    num_channels_multiplier_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Subnet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:config.Subnet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "config.Subnet.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string model_file = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->model_file().data(), this->model_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "config.Subnet.model_file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string parameters_file = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parameters_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parameters_file().data(), this->parameters_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "config.Subnet.parameters_file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .config.Subnet.MergeLayer merge_layer = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_merge_layer()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // optional bool block_backprop = 5 [default = false];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_block_backprop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &block_backprop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 start_optimization_after = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_start_optimization_after();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &start_optimization_after_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 gpu_id_offset = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_gpu_id_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gpu_id_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_channels_multiplier = 8 [default = 1];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_num_channels_multiplier();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_channels_multiplier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string remove_layer = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_remove_layer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->remove_layer(this->remove_layer_size() - 1).data(),
            this->remove_layer(this->remove_layer_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "config.Subnet.remove_layer");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:config.Subnet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:config.Subnet)
  return false;
#undef DO_
}

void Subnet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:config.Subnet)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.Subnet.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required string model_file = 2;
  if (has_model_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_file().data(), this->model_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.Subnet.model_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->model_file(), output);
  }

  // optional string parameters_file = 3;
  if (has_parameters_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parameters_file().data(), this->parameters_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.Subnet.parameters_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->parameters_file(), output);
  }

  // repeated .config.Subnet.MergeLayer merge_layer = 4;
  for (unsigned int i = 0, n = this->merge_layer_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->merge_layer(i), output);
  }

  // optional bool block_backprop = 5 [default = false];
  if (has_block_backprop()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->block_backprop(), output);
  }

  // optional int32 start_optimization_after = 6 [default = 0];
  if (has_start_optimization_after()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->start_optimization_after(), output);
  }

  // optional int32 gpu_id_offset = 7 [default = 0];
  if (has_gpu_id_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gpu_id_offset(), output);
  }

  // optional int32 num_channels_multiplier = 8 [default = 1];
  if (has_num_channels_multiplier()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->num_channels_multiplier(), output);
  }

  // repeated string remove_layer = 9;
  for (int i = 0, n = this->remove_layer_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remove_layer(i).data(), this->remove_layer(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.Subnet.remove_layer");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->remove_layer(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:config.Subnet)
}

::google::protobuf::uint8* Subnet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:config.Subnet)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.Subnet.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required string model_file = 2;
  if (has_model_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->model_file().data(), this->model_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.Subnet.model_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->model_file(), target);
  }

  // optional string parameters_file = 3;
  if (has_parameters_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parameters_file().data(), this->parameters_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.Subnet.parameters_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->parameters_file(), target);
  }

  // repeated .config.Subnet.MergeLayer merge_layer = 4;
  for (unsigned int i = 0, n = this->merge_layer_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->merge_layer(i), false, target);
  }

  // optional bool block_backprop = 5 [default = false];
  if (has_block_backprop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->block_backprop(), target);
  }

  // optional int32 start_optimization_after = 6 [default = 0];
  if (has_start_optimization_after()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->start_optimization_after(), target);
  }

  // optional int32 gpu_id_offset = 7 [default = 0];
  if (has_gpu_id_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->gpu_id_offset(), target);
  }

  // optional int32 num_channels_multiplier = 8 [default = 1];
  if (has_num_channels_multiplier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->num_channels_multiplier(), target);
  }

  // repeated string remove_layer = 9;
  for (int i = 0, n = this->remove_layer_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->remove_layer(i).data(), this->remove_layer(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.Subnet.remove_layer");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(9, this->remove_layer(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:config.Subnet)
  return target;
}

size_t Subnet::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:config.Subnet)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_model_file()) {
    // required string model_file = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_file());
  }

  return total_size;
}
size_t Subnet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:config.Subnet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required string model_file = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model_file());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .config.Subnet.MergeLayer merge_layer = 4;
  {
    unsigned int count = this->merge_layer_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->merge_layer(i));
    }
  }

  // repeated string remove_layer = 9;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->remove_layer_size());
  for (int i = 0, n = this->remove_layer_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->remove_layer(i));
  }

  if (_has_bits_[0 / 32] & 124u) {
    // optional string parameters_file = 3;
    if (has_parameters_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parameters_file());
    }

    // optional bool block_backprop = 5 [default = false];
    if (has_block_backprop()) {
      total_size += 1 + 1;
    }

    // optional int32 start_optimization_after = 6 [default = 0];
    if (has_start_optimization_after()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->start_optimization_after());
    }

    // optional int32 gpu_id_offset = 7 [default = 0];
    if (has_gpu_id_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gpu_id_offset());
    }

    // optional int32 num_channels_multiplier = 8 [default = 1];
    if (has_num_channels_multiplier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_channels_multiplier());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Subnet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:config.Subnet)
  GOOGLE_DCHECK_NE(&from, this);
  const Subnet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Subnet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:config.Subnet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:config.Subnet)
    MergeFrom(*source);
  }
}

void Subnet::MergeFrom(const Subnet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:config.Subnet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  merge_layer_.MergeFrom(from.merge_layer_);
  remove_layer_.MergeFrom(from.remove_layer_);
  if (from._has_bits_[0 / 32] & 127u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_model_file()) {
      set_has_model_file();
      model_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_file_);
    }
    if (from.has_parameters_file()) {
      set_has_parameters_file();
      parameters_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parameters_file_);
    }
    if (from.has_block_backprop()) {
      set_block_backprop(from.block_backprop());
    }
    if (from.has_start_optimization_after()) {
      set_start_optimization_after(from.start_optimization_after());
    }
    if (from.has_gpu_id_offset()) {
      set_gpu_id_offset(from.gpu_id_offset());
    }
    if (from.has_num_channels_multiplier()) {
      set_num_channels_multiplier(from.num_channels_multiplier());
    }
  }
}

void Subnet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:config.Subnet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Subnet::CopyFrom(const Subnet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:config.Subnet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Subnet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->merge_layer())) return false;
  return true;
}

void Subnet::Swap(Subnet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Subnet::InternalSwap(Subnet* other) {
  merge_layer_.UnsafeArenaSwap(&other->merge_layer_);
  remove_layer_.UnsafeArenaSwap(&other->remove_layer_);
  name_.Swap(&other->name_);
  model_file_.Swap(&other->model_file_);
  parameters_file_.Swap(&other->parameters_file_);
  std::swap(block_backprop_, other->block_backprop_);
  std::swap(start_optimization_after_, other->start_optimization_after_);
  std::swap(gpu_id_offset_, other->gpu_id_offset_);
  std::swap(num_channels_multiplier_, other->num_channels_multiplier_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Subnet::GetMetadata() const {
  protobuf_convnet_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_convnet_5fconfig_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Subnet

// required string name = 1;
bool Subnet::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Subnet::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Subnet::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Subnet::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& Subnet::name() const {
  // @@protoc_insertion_point(field_get:config.Subnet.name)
  return name_.GetNoArena();
}
void Subnet::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.Subnet.name)
}
#if LANG_CXX11
void Subnet::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.Subnet.name)
}
#endif
void Subnet::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.Subnet.name)
}
void Subnet::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.Subnet.name)
}
::std::string* Subnet::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:config.Subnet.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Subnet::release_name() {
  // @@protoc_insertion_point(field_release:config.Subnet.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Subnet::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:config.Subnet.name)
}

// required string model_file = 2;
bool Subnet::has_model_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Subnet::set_has_model_file() {
  _has_bits_[0] |= 0x00000002u;
}
void Subnet::clear_has_model_file() {
  _has_bits_[0] &= ~0x00000002u;
}
void Subnet::clear_model_file() {
  model_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_model_file();
}
const ::std::string& Subnet::model_file() const {
  // @@protoc_insertion_point(field_get:config.Subnet.model_file)
  return model_file_.GetNoArena();
}
void Subnet::set_model_file(const ::std::string& value) {
  set_has_model_file();
  model_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.Subnet.model_file)
}
#if LANG_CXX11
void Subnet::set_model_file(::std::string&& value) {
  set_has_model_file();
  model_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.Subnet.model_file)
}
#endif
void Subnet::set_model_file(const char* value) {
  set_has_model_file();
  model_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.Subnet.model_file)
}
void Subnet::set_model_file(const char* value, size_t size) {
  set_has_model_file();
  model_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.Subnet.model_file)
}
::std::string* Subnet::mutable_model_file() {
  set_has_model_file();
  // @@protoc_insertion_point(field_mutable:config.Subnet.model_file)
  return model_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Subnet::release_model_file() {
  // @@protoc_insertion_point(field_release:config.Subnet.model_file)
  clear_has_model_file();
  return model_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Subnet::set_allocated_model_file(::std::string* model_file) {
  if (model_file != NULL) {
    set_has_model_file();
  } else {
    clear_has_model_file();
  }
  model_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model_file);
  // @@protoc_insertion_point(field_set_allocated:config.Subnet.model_file)
}

// optional string parameters_file = 3;
bool Subnet::has_parameters_file() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Subnet::set_has_parameters_file() {
  _has_bits_[0] |= 0x00000004u;
}
void Subnet::clear_has_parameters_file() {
  _has_bits_[0] &= ~0x00000004u;
}
void Subnet::clear_parameters_file() {
  parameters_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_parameters_file();
}
const ::std::string& Subnet::parameters_file() const {
  // @@protoc_insertion_point(field_get:config.Subnet.parameters_file)
  return parameters_file_.GetNoArena();
}
void Subnet::set_parameters_file(const ::std::string& value) {
  set_has_parameters_file();
  parameters_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.Subnet.parameters_file)
}
#if LANG_CXX11
void Subnet::set_parameters_file(::std::string&& value) {
  set_has_parameters_file();
  parameters_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.Subnet.parameters_file)
}
#endif
void Subnet::set_parameters_file(const char* value) {
  set_has_parameters_file();
  parameters_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.Subnet.parameters_file)
}
void Subnet::set_parameters_file(const char* value, size_t size) {
  set_has_parameters_file();
  parameters_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.Subnet.parameters_file)
}
::std::string* Subnet::mutable_parameters_file() {
  set_has_parameters_file();
  // @@protoc_insertion_point(field_mutable:config.Subnet.parameters_file)
  return parameters_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Subnet::release_parameters_file() {
  // @@protoc_insertion_point(field_release:config.Subnet.parameters_file)
  clear_has_parameters_file();
  return parameters_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Subnet::set_allocated_parameters_file(::std::string* parameters_file) {
  if (parameters_file != NULL) {
    set_has_parameters_file();
  } else {
    clear_has_parameters_file();
  }
  parameters_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parameters_file);
  // @@protoc_insertion_point(field_set_allocated:config.Subnet.parameters_file)
}

// repeated .config.Subnet.MergeLayer merge_layer = 4;
int Subnet::merge_layer_size() const {
  return merge_layer_.size();
}
void Subnet::clear_merge_layer() {
  merge_layer_.Clear();
}
const ::config::Subnet_MergeLayer& Subnet::merge_layer(int index) const {
  // @@protoc_insertion_point(field_get:config.Subnet.merge_layer)
  return merge_layer_.Get(index);
}
::config::Subnet_MergeLayer* Subnet::mutable_merge_layer(int index) {
  // @@protoc_insertion_point(field_mutable:config.Subnet.merge_layer)
  return merge_layer_.Mutable(index);
}
::config::Subnet_MergeLayer* Subnet::add_merge_layer() {
  // @@protoc_insertion_point(field_add:config.Subnet.merge_layer)
  return merge_layer_.Add();
}
::google::protobuf::RepeatedPtrField< ::config::Subnet_MergeLayer >*
Subnet::mutable_merge_layer() {
  // @@protoc_insertion_point(field_mutable_list:config.Subnet.merge_layer)
  return &merge_layer_;
}
const ::google::protobuf::RepeatedPtrField< ::config::Subnet_MergeLayer >&
Subnet::merge_layer() const {
  // @@protoc_insertion_point(field_list:config.Subnet.merge_layer)
  return merge_layer_;
}

// optional bool block_backprop = 5 [default = false];
bool Subnet::has_block_backprop() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Subnet::set_has_block_backprop() {
  _has_bits_[0] |= 0x00000008u;
}
void Subnet::clear_has_block_backprop() {
  _has_bits_[0] &= ~0x00000008u;
}
void Subnet::clear_block_backprop() {
  block_backprop_ = false;
  clear_has_block_backprop();
}
bool Subnet::block_backprop() const {
  // @@protoc_insertion_point(field_get:config.Subnet.block_backprop)
  return block_backprop_;
}
void Subnet::set_block_backprop(bool value) {
  set_has_block_backprop();
  block_backprop_ = value;
  // @@protoc_insertion_point(field_set:config.Subnet.block_backprop)
}

// optional int32 start_optimization_after = 6 [default = 0];
bool Subnet::has_start_optimization_after() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Subnet::set_has_start_optimization_after() {
  _has_bits_[0] |= 0x00000010u;
}
void Subnet::clear_has_start_optimization_after() {
  _has_bits_[0] &= ~0x00000010u;
}
void Subnet::clear_start_optimization_after() {
  start_optimization_after_ = 0;
  clear_has_start_optimization_after();
}
::google::protobuf::int32 Subnet::start_optimization_after() const {
  // @@protoc_insertion_point(field_get:config.Subnet.start_optimization_after)
  return start_optimization_after_;
}
void Subnet::set_start_optimization_after(::google::protobuf::int32 value) {
  set_has_start_optimization_after();
  start_optimization_after_ = value;
  // @@protoc_insertion_point(field_set:config.Subnet.start_optimization_after)
}

// optional int32 gpu_id_offset = 7 [default = 0];
bool Subnet::has_gpu_id_offset() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Subnet::set_has_gpu_id_offset() {
  _has_bits_[0] |= 0x00000020u;
}
void Subnet::clear_has_gpu_id_offset() {
  _has_bits_[0] &= ~0x00000020u;
}
void Subnet::clear_gpu_id_offset() {
  gpu_id_offset_ = 0;
  clear_has_gpu_id_offset();
}
::google::protobuf::int32 Subnet::gpu_id_offset() const {
  // @@protoc_insertion_point(field_get:config.Subnet.gpu_id_offset)
  return gpu_id_offset_;
}
void Subnet::set_gpu_id_offset(::google::protobuf::int32 value) {
  set_has_gpu_id_offset();
  gpu_id_offset_ = value;
  // @@protoc_insertion_point(field_set:config.Subnet.gpu_id_offset)
}

// optional int32 num_channels_multiplier = 8 [default = 1];
bool Subnet::has_num_channels_multiplier() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Subnet::set_has_num_channels_multiplier() {
  _has_bits_[0] |= 0x00000040u;
}
void Subnet::clear_has_num_channels_multiplier() {
  _has_bits_[0] &= ~0x00000040u;
}
void Subnet::clear_num_channels_multiplier() {
  num_channels_multiplier_ = 1;
  clear_has_num_channels_multiplier();
}
::google::protobuf::int32 Subnet::num_channels_multiplier() const {
  // @@protoc_insertion_point(field_get:config.Subnet.num_channels_multiplier)
  return num_channels_multiplier_;
}
void Subnet::set_num_channels_multiplier(::google::protobuf::int32 value) {
  set_has_num_channels_multiplier();
  num_channels_multiplier_ = value;
  // @@protoc_insertion_point(field_set:config.Subnet.num_channels_multiplier)
}

// repeated string remove_layer = 9;
int Subnet::remove_layer_size() const {
  return remove_layer_.size();
}
void Subnet::clear_remove_layer() {
  remove_layer_.Clear();
}
const ::std::string& Subnet::remove_layer(int index) const {
  // @@protoc_insertion_point(field_get:config.Subnet.remove_layer)
  return remove_layer_.Get(index);
}
::std::string* Subnet::mutable_remove_layer(int index) {
  // @@protoc_insertion_point(field_mutable:config.Subnet.remove_layer)
  return remove_layer_.Mutable(index);
}
void Subnet::set_remove_layer(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:config.Subnet.remove_layer)
  remove_layer_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void Subnet::set_remove_layer(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:config.Subnet.remove_layer)
  remove_layer_.Mutable(index)->assign(std::move(value));
}
#endif
void Subnet::set_remove_layer(int index, const char* value) {
  remove_layer_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:config.Subnet.remove_layer)
}
void Subnet::set_remove_layer(int index, const char* value, size_t size) {
  remove_layer_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:config.Subnet.remove_layer)
}
::std::string* Subnet::add_remove_layer() {
  // @@protoc_insertion_point(field_add_mutable:config.Subnet.remove_layer)
  return remove_layer_.Add();
}
void Subnet::add_remove_layer(const ::std::string& value) {
  remove_layer_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:config.Subnet.remove_layer)
}
#if LANG_CXX11
void Subnet::add_remove_layer(::std::string&& value) {
  remove_layer_.Add()->assign(std::move(value));
  // @@protoc_insertion_point(field_add:config.Subnet.remove_layer)
}
#endif
void Subnet::add_remove_layer(const char* value) {
  remove_layer_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:config.Subnet.remove_layer)
}
void Subnet::add_remove_layer(const char* value, size_t size) {
  remove_layer_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:config.Subnet.remove_layer)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Subnet::remove_layer() const {
  // @@protoc_insertion_point(field_list:config.Subnet.remove_layer)
  return remove_layer_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Subnet::mutable_remove_layer() {
  // @@protoc_insertion_point(field_mutable_list:config.Subnet.remove_layer)
  return &remove_layer_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Model::kNameFieldNumber;
const int Model::kLayerFieldNumber;
const int Model::kEdgeFieldNumber;
const int Model::kSeedFieldNumber;
const int Model::kMaxIterFieldNumber;
const int Model::kDisplayAfterFieldNumber;
const int Model::kSaveAfterFieldNumber;
const int Model::kImageSizeFieldNumber;
const int Model::kPatchSizeFieldNumber;
const int Model::kPrintAfterFieldNumber;
const int Model::kLocalizerFieldNumber;
const int Model::kCheckpointDirFieldNumber;
const int Model::kPrintWeightsFieldNumber;
const int Model::kTimestampFieldNumber;
const int Model::kDisplayFieldNumber;
const int Model::kValidateAfterFieldNumber;
const int Model::kReduceLrFactorFieldNumber;
const int Model::kReduceLrThresholdFieldNumber;
const int Model::kReduceLrNumStepsFieldNumber;
const int Model::kReduceLrMaxFieldNumber;
const int Model::kSmallerIsBetterFieldNumber;
const int Model::kPolyakAfterFieldNumber;
const int Model::kPolyakQueueSizeFieldNumber;
const int Model::kSubnetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Model::Model()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_convnet_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:config.Model)
}
Model::Model(const Model& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      layer_(from.layer_),
      edge_(from.edge_),
      timestamp_(from.timestamp_),
      subnet_(from.subnet_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  checkpoint_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_checkpoint_dir()) {
    checkpoint_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.checkpoint_dir_);
  }
  ::memcpy(&seed_, &from.seed_,
    reinterpret_cast<char*>(&reduce_lr_factor_) -
    reinterpret_cast<char*>(&seed_) + sizeof(reduce_lr_factor_));
  // @@protoc_insertion_point(copy_constructor:config.Model)
}

void Model::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  checkpoint_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&seed_, 0, reinterpret_cast<char*>(&polyak_queue_size_) -
    reinterpret_cast<char*>(&seed_) + sizeof(polyak_queue_size_));
  max_iter_ = -1;
  display_after_ = -1;
  save_after_ = -1;
  print_after_ = -1;
  validate_after_ = -1;
  reduce_lr_factor_ = 1;
}

Model::~Model() {
  // @@protoc_insertion_point(destructor:config.Model)
  SharedDtor();
}

void Model::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  checkpoint_dir_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Model::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Model::descriptor() {
  protobuf_convnet_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_convnet_5fconfig_2eproto::file_level_metadata[5].descriptor;
}

const Model& Model::default_instance() {
  protobuf_convnet_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

Model* Model::New(::google::protobuf::Arena* arena) const {
  Model* n = new Model;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Model::Clear() {
// @@protoc_insertion_point(message_clear_start:config.Model)
  layer_.Clear();
  edge_.Clear();
  timestamp_.Clear();
  subnet_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (has_checkpoint_dir()) {
      GOOGLE_DCHECK(!checkpoint_dir_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*checkpoint_dir_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&seed_, 0, reinterpret_cast<char*>(&display_) -
      reinterpret_cast<char*>(&seed_) + sizeof(display_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&smaller_is_better_, 0, reinterpret_cast<char*>(&polyak_queue_size_) -
      reinterpret_cast<char*>(&smaller_is_better_) + sizeof(polyak_queue_size_));
    max_iter_ = -1;
    display_after_ = -1;
  }
  if (_has_bits_[16 / 32] & 983040u) {
    save_after_ = -1;
    print_after_ = -1;
    validate_after_ = -1;
    reduce_lr_factor_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Model::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:config.Model)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "config.Model.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .config.Layer layer = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_layer()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .config.Edge edge = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_edge()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // required int32 seed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_seed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_iter = 5 [default = -1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_max_iter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_iter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 display_after = 6 [default = -1];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_display_after();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &display_after_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 save_after = 7 [default = -1];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_save_after();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &save_after_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 image_size = 8 [default = 0];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_image_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &image_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 patch_size = 9 [default = 0];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_patch_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &patch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 print_after = 10 [default = -1];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_print_after();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &print_after_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool localizer = 11 [default = false];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_localizer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &localizer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string checkpoint_dir = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_checkpoint_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->checkpoint_dir().data(), this->checkpoint_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "config.Model.checkpoint_dir");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool print_weights = 13 [default = false];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_print_weights();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &print_weights_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string timestamp = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->timestamp(this->timestamp_size() - 1).data(),
            this->timestamp(this->timestamp_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "config.Model.timestamp");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool display = 17 [default = false];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_display();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &display_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 validate_after = 18 [default = -1];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_validate_after();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &validate_after_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float reduce_lr_factor = 19 [default = 1];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(157u)) {
          set_has_reduce_lr_factor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &reduce_lr_factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float reduce_lr_threshold = 20 [default = 0];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(165u)) {
          set_has_reduce_lr_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &reduce_lr_threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reduce_lr_num_steps = 21 [default = 0];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          set_has_reduce_lr_num_steps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reduce_lr_num_steps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reduce_lr_max = 22 [default = 0];
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_reduce_lr_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reduce_lr_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool smaller_is_better = 23 [default = false];
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u)) {
          set_has_smaller_is_better();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &smaller_is_better_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 polyak_after = 24 [default = 0];
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u)) {
          set_has_polyak_after();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &polyak_after_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 polyak_queue_size = 25 [default = 0];
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u)) {
          set_has_polyak_queue_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &polyak_queue_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .config.Subnet subnet = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(210u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_subnet()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:config.Model)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:config.Model)
  return false;
#undef DO_
}

void Model::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:config.Model)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.Model.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .config.Layer layer = 2;
  for (unsigned int i = 0, n = this->layer_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->layer(i), output);
  }

  // repeated .config.Edge edge = 3;
  for (unsigned int i = 0, n = this->edge_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->edge(i), output);
  }

  // required int32 seed = 4;
  if (has_seed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->seed(), output);
  }

  // optional int32 max_iter = 5 [default = -1];
  if (has_max_iter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->max_iter(), output);
  }

  // optional int32 display_after = 6 [default = -1];
  if (has_display_after()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->display_after(), output);
  }

  // optional int32 save_after = 7 [default = -1];
  if (has_save_after()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->save_after(), output);
  }

  // optional int32 image_size = 8 [default = 0];
  if (has_image_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->image_size(), output);
  }

  // optional int32 patch_size = 9 [default = 0];
  if (has_patch_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->patch_size(), output);
  }

  // optional int32 print_after = 10 [default = -1];
  if (has_print_after()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->print_after(), output);
  }

  // optional bool localizer = 11 [default = false];
  if (has_localizer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->localizer(), output);
  }

  // optional string checkpoint_dir = 12;
  if (has_checkpoint_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->checkpoint_dir().data(), this->checkpoint_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.Model.checkpoint_dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->checkpoint_dir(), output);
  }

  // optional bool print_weights = 13 [default = false];
  if (has_print_weights()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->print_weights(), output);
  }

  // repeated string timestamp = 15;
  for (int i = 0, n = this->timestamp_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timestamp(i).data(), this->timestamp(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.Model.timestamp");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->timestamp(i), output);
  }

  // optional bool display = 17 [default = false];
  if (has_display()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->display(), output);
  }

  // optional int32 validate_after = 18 [default = -1];
  if (has_validate_after()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->validate_after(), output);
  }

  // optional float reduce_lr_factor = 19 [default = 1];
  if (has_reduce_lr_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->reduce_lr_factor(), output);
  }

  // optional float reduce_lr_threshold = 20 [default = 0];
  if (has_reduce_lr_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->reduce_lr_threshold(), output);
  }

  // optional int32 reduce_lr_num_steps = 21 [default = 0];
  if (has_reduce_lr_num_steps()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->reduce_lr_num_steps(), output);
  }

  // optional int32 reduce_lr_max = 22 [default = 0];
  if (has_reduce_lr_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->reduce_lr_max(), output);
  }

  // optional bool smaller_is_better = 23 [default = false];
  if (has_smaller_is_better()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->smaller_is_better(), output);
  }

  // optional int32 polyak_after = 24 [default = 0];
  if (has_polyak_after()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->polyak_after(), output);
  }

  // optional int32 polyak_queue_size = 25 [default = 0];
  if (has_polyak_queue_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->polyak_queue_size(), output);
  }

  // repeated .config.Subnet subnet = 26;
  for (unsigned int i = 0, n = this->subnet_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->subnet(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:config.Model)
}

::google::protobuf::uint8* Model::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:config.Model)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.Model.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .config.Layer layer = 2;
  for (unsigned int i = 0, n = this->layer_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->layer(i), false, target);
  }

  // repeated .config.Edge edge = 3;
  for (unsigned int i = 0, n = this->edge_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->edge(i), false, target);
  }

  // required int32 seed = 4;
  if (has_seed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->seed(), target);
  }

  // optional int32 max_iter = 5 [default = -1];
  if (has_max_iter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->max_iter(), target);
  }

  // optional int32 display_after = 6 [default = -1];
  if (has_display_after()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->display_after(), target);
  }

  // optional int32 save_after = 7 [default = -1];
  if (has_save_after()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->save_after(), target);
  }

  // optional int32 image_size = 8 [default = 0];
  if (has_image_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->image_size(), target);
  }

  // optional int32 patch_size = 9 [default = 0];
  if (has_patch_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->patch_size(), target);
  }

  // optional int32 print_after = 10 [default = -1];
  if (has_print_after()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->print_after(), target);
  }

  // optional bool localizer = 11 [default = false];
  if (has_localizer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->localizer(), target);
  }

  // optional string checkpoint_dir = 12;
  if (has_checkpoint_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->checkpoint_dir().data(), this->checkpoint_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.Model.checkpoint_dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->checkpoint_dir(), target);
  }

  // optional bool print_weights = 13 [default = false];
  if (has_print_weights()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->print_weights(), target);
  }

  // repeated string timestamp = 15;
  for (int i = 0, n = this->timestamp_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->timestamp(i).data(), this->timestamp(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.Model.timestamp");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(15, this->timestamp(i), target);
  }

  // optional bool display = 17 [default = false];
  if (has_display()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->display(), target);
  }

  // optional int32 validate_after = 18 [default = -1];
  if (has_validate_after()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->validate_after(), target);
  }

  // optional float reduce_lr_factor = 19 [default = 1];
  if (has_reduce_lr_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->reduce_lr_factor(), target);
  }

  // optional float reduce_lr_threshold = 20 [default = 0];
  if (has_reduce_lr_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->reduce_lr_threshold(), target);
  }

  // optional int32 reduce_lr_num_steps = 21 [default = 0];
  if (has_reduce_lr_num_steps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->reduce_lr_num_steps(), target);
  }

  // optional int32 reduce_lr_max = 22 [default = 0];
  if (has_reduce_lr_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->reduce_lr_max(), target);
  }

  // optional bool smaller_is_better = 23 [default = false];
  if (has_smaller_is_better()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->smaller_is_better(), target);
  }

  // optional int32 polyak_after = 24 [default = 0];
  if (has_polyak_after()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->polyak_after(), target);
  }

  // optional int32 polyak_queue_size = 25 [default = 0];
  if (has_polyak_queue_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->polyak_queue_size(), target);
  }

  // repeated .config.Subnet subnet = 26;
  for (unsigned int i = 0, n = this->subnet_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        26, this->subnet(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:config.Model)
  return target;
}

size_t Model::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:config.Model)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_seed()) {
    // required int32 seed = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seed());
  }

  return total_size;
}
size_t Model::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:config.Model)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required int32 seed = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->seed());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .config.Layer layer = 2;
  {
    unsigned int count = this->layer_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->layer(i));
    }
  }

  // repeated .config.Edge edge = 3;
  {
    unsigned int count = this->edge_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->edge(i));
    }
  }

  // repeated string timestamp = 15;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->timestamp_size());
  for (int i = 0, n = this->timestamp_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->timestamp(i));
  }

  // repeated .config.Subnet subnet = 26;
  {
    unsigned int count = this->subnet_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->subnet(i));
    }
  }

  // optional string checkpoint_dir = 12;
  if (has_checkpoint_dir()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->checkpoint_dir());
  }

  if (_has_bits_[0 / 32] & 248u) {
    // optional int32 image_size = 8 [default = 0];
    if (has_image_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->image_size());
    }

    // optional int32 patch_size = 9 [default = 0];
    if (has_patch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->patch_size());
    }

    // optional bool localizer = 11 [default = false];
    if (has_localizer()) {
      total_size += 1 + 1;
    }

    // optional bool print_weights = 13 [default = false];
    if (has_print_weights()) {
      total_size += 1 + 1;
    }

    // optional bool display = 17 [default = false];
    if (has_display()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool smaller_is_better = 23 [default = false];
    if (has_smaller_is_better()) {
      total_size += 2 + 1;
    }

    // optional float reduce_lr_threshold = 20 [default = 0];
    if (has_reduce_lr_threshold()) {
      total_size += 2 + 4;
    }

    // optional int32 reduce_lr_num_steps = 21 [default = 0];
    if (has_reduce_lr_num_steps()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reduce_lr_num_steps());
    }

    // optional int32 reduce_lr_max = 22 [default = 0];
    if (has_reduce_lr_max()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reduce_lr_max());
    }

    // optional int32 polyak_after = 24 [default = 0];
    if (has_polyak_after()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->polyak_after());
    }

    // optional int32 polyak_queue_size = 25 [default = 0];
    if (has_polyak_queue_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->polyak_queue_size());
    }

    // optional int32 max_iter = 5 [default = -1];
    if (has_max_iter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_iter());
    }

    // optional int32 display_after = 6 [default = -1];
    if (has_display_after()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->display_after());
    }

  }
  if (_has_bits_[16 / 32] & 983040u) {
    // optional int32 save_after = 7 [default = -1];
    if (has_save_after()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->save_after());
    }

    // optional int32 print_after = 10 [default = -1];
    if (has_print_after()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->print_after());
    }

    // optional int32 validate_after = 18 [default = -1];
    if (has_validate_after()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->validate_after());
    }

    // optional float reduce_lr_factor = 19 [default = 1];
    if (has_reduce_lr_factor()) {
      total_size += 2 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Model::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:config.Model)
  GOOGLE_DCHECK_NE(&from, this);
  const Model* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Model>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:config.Model)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:config.Model)
    MergeFrom(*source);
  }
}

void Model::MergeFrom(const Model& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:config.Model)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  layer_.MergeFrom(from.layer_);
  edge_.MergeFrom(from.edge_);
  timestamp_.MergeFrom(from.timestamp_);
  subnet_.MergeFrom(from.subnet_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_checkpoint_dir()) {
      set_has_checkpoint_dir();
      checkpoint_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.checkpoint_dir_);
    }
    if (from.has_seed()) {
      set_seed(from.seed());
    }
    if (from.has_image_size()) {
      set_image_size(from.image_size());
    }
    if (from.has_patch_size()) {
      set_patch_size(from.patch_size());
    }
    if (from.has_localizer()) {
      set_localizer(from.localizer());
    }
    if (from.has_print_weights()) {
      set_print_weights(from.print_weights());
    }
    if (from.has_display()) {
      set_display(from.display());
    }
  }
  if (from._has_bits_[8 / 32] & 65280u) {
    if (from.has_smaller_is_better()) {
      set_smaller_is_better(from.smaller_is_better());
    }
    if (from.has_reduce_lr_threshold()) {
      set_reduce_lr_threshold(from.reduce_lr_threshold());
    }
    if (from.has_reduce_lr_num_steps()) {
      set_reduce_lr_num_steps(from.reduce_lr_num_steps());
    }
    if (from.has_reduce_lr_max()) {
      set_reduce_lr_max(from.reduce_lr_max());
    }
    if (from.has_polyak_after()) {
      set_polyak_after(from.polyak_after());
    }
    if (from.has_polyak_queue_size()) {
      set_polyak_queue_size(from.polyak_queue_size());
    }
    if (from.has_max_iter()) {
      set_max_iter(from.max_iter());
    }
    if (from.has_display_after()) {
      set_display_after(from.display_after());
    }
  }
  if (from._has_bits_[16 / 32] & 983040u) {
    if (from.has_save_after()) {
      set_save_after(from.save_after());
    }
    if (from.has_print_after()) {
      set_print_after(from.print_after());
    }
    if (from.has_validate_after()) {
      set_validate_after(from.validate_after());
    }
    if (from.has_reduce_lr_factor()) {
      set_reduce_lr_factor(from.reduce_lr_factor());
    }
  }
}

void Model::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:config.Model)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Model::CopyFrom(const Model& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:config.Model)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Model::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->layer())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->edge())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->subnet())) return false;
  return true;
}

void Model::Swap(Model* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Model::InternalSwap(Model* other) {
  layer_.UnsafeArenaSwap(&other->layer_);
  edge_.UnsafeArenaSwap(&other->edge_);
  timestamp_.UnsafeArenaSwap(&other->timestamp_);
  subnet_.UnsafeArenaSwap(&other->subnet_);
  name_.Swap(&other->name_);
  checkpoint_dir_.Swap(&other->checkpoint_dir_);
  std::swap(seed_, other->seed_);
  std::swap(image_size_, other->image_size_);
  std::swap(patch_size_, other->patch_size_);
  std::swap(localizer_, other->localizer_);
  std::swap(print_weights_, other->print_weights_);
  std::swap(display_, other->display_);
  std::swap(smaller_is_better_, other->smaller_is_better_);
  std::swap(reduce_lr_threshold_, other->reduce_lr_threshold_);
  std::swap(reduce_lr_num_steps_, other->reduce_lr_num_steps_);
  std::swap(reduce_lr_max_, other->reduce_lr_max_);
  std::swap(polyak_after_, other->polyak_after_);
  std::swap(polyak_queue_size_, other->polyak_queue_size_);
  std::swap(max_iter_, other->max_iter_);
  std::swap(display_after_, other->display_after_);
  std::swap(save_after_, other->save_after_);
  std::swap(print_after_, other->print_after_);
  std::swap(validate_after_, other->validate_after_);
  std::swap(reduce_lr_factor_, other->reduce_lr_factor_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Model::GetMetadata() const {
  protobuf_convnet_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_convnet_5fconfig_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Model

// required string name = 1;
bool Model::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Model::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Model::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Model::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& Model::name() const {
  // @@protoc_insertion_point(field_get:config.Model.name)
  return name_.GetNoArena();
}
void Model::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.Model.name)
}
#if LANG_CXX11
void Model::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.Model.name)
}
#endif
void Model::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.Model.name)
}
void Model::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.Model.name)
}
::std::string* Model::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:config.Model.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Model::release_name() {
  // @@protoc_insertion_point(field_release:config.Model.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Model::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:config.Model.name)
}

// repeated .config.Layer layer = 2;
int Model::layer_size() const {
  return layer_.size();
}
void Model::clear_layer() {
  layer_.Clear();
}
const ::config::Layer& Model::layer(int index) const {
  // @@protoc_insertion_point(field_get:config.Model.layer)
  return layer_.Get(index);
}
::config::Layer* Model::mutable_layer(int index) {
  // @@protoc_insertion_point(field_mutable:config.Model.layer)
  return layer_.Mutable(index);
}
::config::Layer* Model::add_layer() {
  // @@protoc_insertion_point(field_add:config.Model.layer)
  return layer_.Add();
}
::google::protobuf::RepeatedPtrField< ::config::Layer >*
Model::mutable_layer() {
  // @@protoc_insertion_point(field_mutable_list:config.Model.layer)
  return &layer_;
}
const ::google::protobuf::RepeatedPtrField< ::config::Layer >&
Model::layer() const {
  // @@protoc_insertion_point(field_list:config.Model.layer)
  return layer_;
}

// repeated .config.Edge edge = 3;
int Model::edge_size() const {
  return edge_.size();
}
void Model::clear_edge() {
  edge_.Clear();
}
const ::config::Edge& Model::edge(int index) const {
  // @@protoc_insertion_point(field_get:config.Model.edge)
  return edge_.Get(index);
}
::config::Edge* Model::mutable_edge(int index) {
  // @@protoc_insertion_point(field_mutable:config.Model.edge)
  return edge_.Mutable(index);
}
::config::Edge* Model::add_edge() {
  // @@protoc_insertion_point(field_add:config.Model.edge)
  return edge_.Add();
}
::google::protobuf::RepeatedPtrField< ::config::Edge >*
Model::mutable_edge() {
  // @@protoc_insertion_point(field_mutable_list:config.Model.edge)
  return &edge_;
}
const ::google::protobuf::RepeatedPtrField< ::config::Edge >&
Model::edge() const {
  // @@protoc_insertion_point(field_list:config.Model.edge)
  return edge_;
}

// required int32 seed = 4;
bool Model::has_seed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Model::set_has_seed() {
  _has_bits_[0] |= 0x00000004u;
}
void Model::clear_has_seed() {
  _has_bits_[0] &= ~0x00000004u;
}
void Model::clear_seed() {
  seed_ = 0;
  clear_has_seed();
}
::google::protobuf::int32 Model::seed() const {
  // @@protoc_insertion_point(field_get:config.Model.seed)
  return seed_;
}
void Model::set_seed(::google::protobuf::int32 value) {
  set_has_seed();
  seed_ = value;
  // @@protoc_insertion_point(field_set:config.Model.seed)
}

// optional int32 max_iter = 5 [default = -1];
bool Model::has_max_iter() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Model::set_has_max_iter() {
  _has_bits_[0] |= 0x00004000u;
}
void Model::clear_has_max_iter() {
  _has_bits_[0] &= ~0x00004000u;
}
void Model::clear_max_iter() {
  max_iter_ = -1;
  clear_has_max_iter();
}
::google::protobuf::int32 Model::max_iter() const {
  // @@protoc_insertion_point(field_get:config.Model.max_iter)
  return max_iter_;
}
void Model::set_max_iter(::google::protobuf::int32 value) {
  set_has_max_iter();
  max_iter_ = value;
  // @@protoc_insertion_point(field_set:config.Model.max_iter)
}

// optional int32 display_after = 6 [default = -1];
bool Model::has_display_after() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Model::set_has_display_after() {
  _has_bits_[0] |= 0x00008000u;
}
void Model::clear_has_display_after() {
  _has_bits_[0] &= ~0x00008000u;
}
void Model::clear_display_after() {
  display_after_ = -1;
  clear_has_display_after();
}
::google::protobuf::int32 Model::display_after() const {
  // @@protoc_insertion_point(field_get:config.Model.display_after)
  return display_after_;
}
void Model::set_display_after(::google::protobuf::int32 value) {
  set_has_display_after();
  display_after_ = value;
  // @@protoc_insertion_point(field_set:config.Model.display_after)
}

// optional int32 save_after = 7 [default = -1];
bool Model::has_save_after() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Model::set_has_save_after() {
  _has_bits_[0] |= 0x00010000u;
}
void Model::clear_has_save_after() {
  _has_bits_[0] &= ~0x00010000u;
}
void Model::clear_save_after() {
  save_after_ = -1;
  clear_has_save_after();
}
::google::protobuf::int32 Model::save_after() const {
  // @@protoc_insertion_point(field_get:config.Model.save_after)
  return save_after_;
}
void Model::set_save_after(::google::protobuf::int32 value) {
  set_has_save_after();
  save_after_ = value;
  // @@protoc_insertion_point(field_set:config.Model.save_after)
}

// optional int32 image_size = 8 [default = 0];
bool Model::has_image_size() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Model::set_has_image_size() {
  _has_bits_[0] |= 0x00000008u;
}
void Model::clear_has_image_size() {
  _has_bits_[0] &= ~0x00000008u;
}
void Model::clear_image_size() {
  image_size_ = 0;
  clear_has_image_size();
}
::google::protobuf::int32 Model::image_size() const {
  // @@protoc_insertion_point(field_get:config.Model.image_size)
  return image_size_;
}
void Model::set_image_size(::google::protobuf::int32 value) {
  set_has_image_size();
  image_size_ = value;
  // @@protoc_insertion_point(field_set:config.Model.image_size)
}

// optional int32 patch_size = 9 [default = 0];
bool Model::has_patch_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Model::set_has_patch_size() {
  _has_bits_[0] |= 0x00000010u;
}
void Model::clear_has_patch_size() {
  _has_bits_[0] &= ~0x00000010u;
}
void Model::clear_patch_size() {
  patch_size_ = 0;
  clear_has_patch_size();
}
::google::protobuf::int32 Model::patch_size() const {
  // @@protoc_insertion_point(field_get:config.Model.patch_size)
  return patch_size_;
}
void Model::set_patch_size(::google::protobuf::int32 value) {
  set_has_patch_size();
  patch_size_ = value;
  // @@protoc_insertion_point(field_set:config.Model.patch_size)
}

// optional int32 print_after = 10 [default = -1];
bool Model::has_print_after() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Model::set_has_print_after() {
  _has_bits_[0] |= 0x00020000u;
}
void Model::clear_has_print_after() {
  _has_bits_[0] &= ~0x00020000u;
}
void Model::clear_print_after() {
  print_after_ = -1;
  clear_has_print_after();
}
::google::protobuf::int32 Model::print_after() const {
  // @@protoc_insertion_point(field_get:config.Model.print_after)
  return print_after_;
}
void Model::set_print_after(::google::protobuf::int32 value) {
  set_has_print_after();
  print_after_ = value;
  // @@protoc_insertion_point(field_set:config.Model.print_after)
}

// optional bool localizer = 11 [default = false];
bool Model::has_localizer() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Model::set_has_localizer() {
  _has_bits_[0] |= 0x00000020u;
}
void Model::clear_has_localizer() {
  _has_bits_[0] &= ~0x00000020u;
}
void Model::clear_localizer() {
  localizer_ = false;
  clear_has_localizer();
}
bool Model::localizer() const {
  // @@protoc_insertion_point(field_get:config.Model.localizer)
  return localizer_;
}
void Model::set_localizer(bool value) {
  set_has_localizer();
  localizer_ = value;
  // @@protoc_insertion_point(field_set:config.Model.localizer)
}

// optional string checkpoint_dir = 12;
bool Model::has_checkpoint_dir() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Model::set_has_checkpoint_dir() {
  _has_bits_[0] |= 0x00000002u;
}
void Model::clear_has_checkpoint_dir() {
  _has_bits_[0] &= ~0x00000002u;
}
void Model::clear_checkpoint_dir() {
  checkpoint_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_checkpoint_dir();
}
const ::std::string& Model::checkpoint_dir() const {
  // @@protoc_insertion_point(field_get:config.Model.checkpoint_dir)
  return checkpoint_dir_.GetNoArena();
}
void Model::set_checkpoint_dir(const ::std::string& value) {
  set_has_checkpoint_dir();
  checkpoint_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.Model.checkpoint_dir)
}
#if LANG_CXX11
void Model::set_checkpoint_dir(::std::string&& value) {
  set_has_checkpoint_dir();
  checkpoint_dir_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.Model.checkpoint_dir)
}
#endif
void Model::set_checkpoint_dir(const char* value) {
  set_has_checkpoint_dir();
  checkpoint_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.Model.checkpoint_dir)
}
void Model::set_checkpoint_dir(const char* value, size_t size) {
  set_has_checkpoint_dir();
  checkpoint_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.Model.checkpoint_dir)
}
::std::string* Model::mutable_checkpoint_dir() {
  set_has_checkpoint_dir();
  // @@protoc_insertion_point(field_mutable:config.Model.checkpoint_dir)
  return checkpoint_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Model::release_checkpoint_dir() {
  // @@protoc_insertion_point(field_release:config.Model.checkpoint_dir)
  clear_has_checkpoint_dir();
  return checkpoint_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Model::set_allocated_checkpoint_dir(::std::string* checkpoint_dir) {
  if (checkpoint_dir != NULL) {
    set_has_checkpoint_dir();
  } else {
    clear_has_checkpoint_dir();
  }
  checkpoint_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), checkpoint_dir);
  // @@protoc_insertion_point(field_set_allocated:config.Model.checkpoint_dir)
}

// optional bool print_weights = 13 [default = false];
bool Model::has_print_weights() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Model::set_has_print_weights() {
  _has_bits_[0] |= 0x00000040u;
}
void Model::clear_has_print_weights() {
  _has_bits_[0] &= ~0x00000040u;
}
void Model::clear_print_weights() {
  print_weights_ = false;
  clear_has_print_weights();
}
bool Model::print_weights() const {
  // @@protoc_insertion_point(field_get:config.Model.print_weights)
  return print_weights_;
}
void Model::set_print_weights(bool value) {
  set_has_print_weights();
  print_weights_ = value;
  // @@protoc_insertion_point(field_set:config.Model.print_weights)
}

// repeated string timestamp = 15;
int Model::timestamp_size() const {
  return timestamp_.size();
}
void Model::clear_timestamp() {
  timestamp_.Clear();
}
const ::std::string& Model::timestamp(int index) const {
  // @@protoc_insertion_point(field_get:config.Model.timestamp)
  return timestamp_.Get(index);
}
::std::string* Model::mutable_timestamp(int index) {
  // @@protoc_insertion_point(field_mutable:config.Model.timestamp)
  return timestamp_.Mutable(index);
}
void Model::set_timestamp(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:config.Model.timestamp)
  timestamp_.Mutable(index)->assign(value);
}
#if LANG_CXX11
void Model::set_timestamp(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:config.Model.timestamp)
  timestamp_.Mutable(index)->assign(std::move(value));
}
#endif
void Model::set_timestamp(int index, const char* value) {
  timestamp_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:config.Model.timestamp)
}
void Model::set_timestamp(int index, const char* value, size_t size) {
  timestamp_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:config.Model.timestamp)
}
::std::string* Model::add_timestamp() {
  // @@protoc_insertion_point(field_add_mutable:config.Model.timestamp)
  return timestamp_.Add();
}
void Model::add_timestamp(const ::std::string& value) {
  timestamp_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:config.Model.timestamp)
}
#if LANG_CXX11
void Model::add_timestamp(::std::string&& value) {
  timestamp_.Add()->assign(std::move(value));
  // @@protoc_insertion_point(field_add:config.Model.timestamp)
}
#endif
void Model::add_timestamp(const char* value) {
  timestamp_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:config.Model.timestamp)
}
void Model::add_timestamp(const char* value, size_t size) {
  timestamp_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:config.Model.timestamp)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
Model::timestamp() const {
  // @@protoc_insertion_point(field_list:config.Model.timestamp)
  return timestamp_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
Model::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable_list:config.Model.timestamp)
  return &timestamp_;
}

// optional bool display = 17 [default = false];
bool Model::has_display() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Model::set_has_display() {
  _has_bits_[0] |= 0x00000080u;
}
void Model::clear_has_display() {
  _has_bits_[0] &= ~0x00000080u;
}
void Model::clear_display() {
  display_ = false;
  clear_has_display();
}
bool Model::display() const {
  // @@protoc_insertion_point(field_get:config.Model.display)
  return display_;
}
void Model::set_display(bool value) {
  set_has_display();
  display_ = value;
  // @@protoc_insertion_point(field_set:config.Model.display)
}

// optional int32 validate_after = 18 [default = -1];
bool Model::has_validate_after() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void Model::set_has_validate_after() {
  _has_bits_[0] |= 0x00040000u;
}
void Model::clear_has_validate_after() {
  _has_bits_[0] &= ~0x00040000u;
}
void Model::clear_validate_after() {
  validate_after_ = -1;
  clear_has_validate_after();
}
::google::protobuf::int32 Model::validate_after() const {
  // @@protoc_insertion_point(field_get:config.Model.validate_after)
  return validate_after_;
}
void Model::set_validate_after(::google::protobuf::int32 value) {
  set_has_validate_after();
  validate_after_ = value;
  // @@protoc_insertion_point(field_set:config.Model.validate_after)
}

// optional float reduce_lr_factor = 19 [default = 1];
bool Model::has_reduce_lr_factor() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void Model::set_has_reduce_lr_factor() {
  _has_bits_[0] |= 0x00080000u;
}
void Model::clear_has_reduce_lr_factor() {
  _has_bits_[0] &= ~0x00080000u;
}
void Model::clear_reduce_lr_factor() {
  reduce_lr_factor_ = 1;
  clear_has_reduce_lr_factor();
}
float Model::reduce_lr_factor() const {
  // @@protoc_insertion_point(field_get:config.Model.reduce_lr_factor)
  return reduce_lr_factor_;
}
void Model::set_reduce_lr_factor(float value) {
  set_has_reduce_lr_factor();
  reduce_lr_factor_ = value;
  // @@protoc_insertion_point(field_set:config.Model.reduce_lr_factor)
}

// optional float reduce_lr_threshold = 20 [default = 0];
bool Model::has_reduce_lr_threshold() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Model::set_has_reduce_lr_threshold() {
  _has_bits_[0] |= 0x00000200u;
}
void Model::clear_has_reduce_lr_threshold() {
  _has_bits_[0] &= ~0x00000200u;
}
void Model::clear_reduce_lr_threshold() {
  reduce_lr_threshold_ = 0;
  clear_has_reduce_lr_threshold();
}
float Model::reduce_lr_threshold() const {
  // @@protoc_insertion_point(field_get:config.Model.reduce_lr_threshold)
  return reduce_lr_threshold_;
}
void Model::set_reduce_lr_threshold(float value) {
  set_has_reduce_lr_threshold();
  reduce_lr_threshold_ = value;
  // @@protoc_insertion_point(field_set:config.Model.reduce_lr_threshold)
}

// optional int32 reduce_lr_num_steps = 21 [default = 0];
bool Model::has_reduce_lr_num_steps() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Model::set_has_reduce_lr_num_steps() {
  _has_bits_[0] |= 0x00000400u;
}
void Model::clear_has_reduce_lr_num_steps() {
  _has_bits_[0] &= ~0x00000400u;
}
void Model::clear_reduce_lr_num_steps() {
  reduce_lr_num_steps_ = 0;
  clear_has_reduce_lr_num_steps();
}
::google::protobuf::int32 Model::reduce_lr_num_steps() const {
  // @@protoc_insertion_point(field_get:config.Model.reduce_lr_num_steps)
  return reduce_lr_num_steps_;
}
void Model::set_reduce_lr_num_steps(::google::protobuf::int32 value) {
  set_has_reduce_lr_num_steps();
  reduce_lr_num_steps_ = value;
  // @@protoc_insertion_point(field_set:config.Model.reduce_lr_num_steps)
}

// optional int32 reduce_lr_max = 22 [default = 0];
bool Model::has_reduce_lr_max() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Model::set_has_reduce_lr_max() {
  _has_bits_[0] |= 0x00000800u;
}
void Model::clear_has_reduce_lr_max() {
  _has_bits_[0] &= ~0x00000800u;
}
void Model::clear_reduce_lr_max() {
  reduce_lr_max_ = 0;
  clear_has_reduce_lr_max();
}
::google::protobuf::int32 Model::reduce_lr_max() const {
  // @@protoc_insertion_point(field_get:config.Model.reduce_lr_max)
  return reduce_lr_max_;
}
void Model::set_reduce_lr_max(::google::protobuf::int32 value) {
  set_has_reduce_lr_max();
  reduce_lr_max_ = value;
  // @@protoc_insertion_point(field_set:config.Model.reduce_lr_max)
}

// optional bool smaller_is_better = 23 [default = false];
bool Model::has_smaller_is_better() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Model::set_has_smaller_is_better() {
  _has_bits_[0] |= 0x00000100u;
}
void Model::clear_has_smaller_is_better() {
  _has_bits_[0] &= ~0x00000100u;
}
void Model::clear_smaller_is_better() {
  smaller_is_better_ = false;
  clear_has_smaller_is_better();
}
bool Model::smaller_is_better() const {
  // @@protoc_insertion_point(field_get:config.Model.smaller_is_better)
  return smaller_is_better_;
}
void Model::set_smaller_is_better(bool value) {
  set_has_smaller_is_better();
  smaller_is_better_ = value;
  // @@protoc_insertion_point(field_set:config.Model.smaller_is_better)
}

// optional int32 polyak_after = 24 [default = 0];
bool Model::has_polyak_after() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Model::set_has_polyak_after() {
  _has_bits_[0] |= 0x00001000u;
}
void Model::clear_has_polyak_after() {
  _has_bits_[0] &= ~0x00001000u;
}
void Model::clear_polyak_after() {
  polyak_after_ = 0;
  clear_has_polyak_after();
}
::google::protobuf::int32 Model::polyak_after() const {
  // @@protoc_insertion_point(field_get:config.Model.polyak_after)
  return polyak_after_;
}
void Model::set_polyak_after(::google::protobuf::int32 value) {
  set_has_polyak_after();
  polyak_after_ = value;
  // @@protoc_insertion_point(field_set:config.Model.polyak_after)
}

// optional int32 polyak_queue_size = 25 [default = 0];
bool Model::has_polyak_queue_size() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Model::set_has_polyak_queue_size() {
  _has_bits_[0] |= 0x00002000u;
}
void Model::clear_has_polyak_queue_size() {
  _has_bits_[0] &= ~0x00002000u;
}
void Model::clear_polyak_queue_size() {
  polyak_queue_size_ = 0;
  clear_has_polyak_queue_size();
}
::google::protobuf::int32 Model::polyak_queue_size() const {
  // @@protoc_insertion_point(field_get:config.Model.polyak_queue_size)
  return polyak_queue_size_;
}
void Model::set_polyak_queue_size(::google::protobuf::int32 value) {
  set_has_polyak_queue_size();
  polyak_queue_size_ = value;
  // @@protoc_insertion_point(field_set:config.Model.polyak_queue_size)
}

// repeated .config.Subnet subnet = 26;
int Model::subnet_size() const {
  return subnet_.size();
}
void Model::clear_subnet() {
  subnet_.Clear();
}
const ::config::Subnet& Model::subnet(int index) const {
  // @@protoc_insertion_point(field_get:config.Model.subnet)
  return subnet_.Get(index);
}
::config::Subnet* Model::mutable_subnet(int index) {
  // @@protoc_insertion_point(field_mutable:config.Model.subnet)
  return subnet_.Mutable(index);
}
::config::Subnet* Model::add_subnet() {
  // @@protoc_insertion_point(field_add:config.Model.subnet)
  return subnet_.Add();
}
::google::protobuf::RepeatedPtrField< ::config::Subnet >*
Model::mutable_subnet() {
  // @@protoc_insertion_point(field_mutable_list:config.Model.subnet)
  return &subnet_;
}
const ::google::protobuf::RepeatedPtrField< ::config::Subnet >&
Model::subnet() const {
  // @@protoc_insertion_point(field_list:config.Model.subnet)
  return subnet_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataStreamConfig::kFilePatternFieldNumber;
const int DataStreamConfig::kLayerNameFieldNumber;
const int DataStreamConfig::kDatasetNameFieldNumber;
const int DataStreamConfig::kDataTypeFieldNumber;
const int DataStreamConfig::kRawImageSizeFieldNumber;
const int DataStreamConfig::kImageSizeFieldNumber;
const int DataStreamConfig::kCanTranslateFieldNumber;
const int DataStreamConfig::kCanFlipFieldNumber;
const int DataStreamConfig::kPixelwiseNormalizeFieldNumber;
const int DataStreamConfig::kPcaNoiseStddevFieldNumber;
const int DataStreamConfig::kNormalizeFieldNumber;
const int DataStreamConfig::kGpuIdFieldNumber;
const int DataStreamConfig::kStrideFieldNumber;
const int DataStreamConfig::kMeanFileFieldNumber;
const int DataStreamConfig::kNumColorsFieldNumber;
const int DataStreamConfig::kParallelDiskAccessFieldNumber;
const int DataStreamConfig::kRandomRotateRawImageFieldNumber;
const int DataStreamConfig::kRandomRotateMaxAngleFieldNumber;
const int DataStreamConfig::kMinScaleFieldNumber;
const int DataStreamConfig::kNoiseLayerNameFieldNumber;
const int DataStreamConfig::kAvg10FullImageFieldNumber;
const int DataStreamConfig::kBboxFileFieldNumber;
const int DataStreamConfig::kContextFactorFieldNumber;
const int DataStreamConfig::kCenterOnBboxFieldNumber;
const int DataStreamConfig::kWarpBboxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataStreamConfig::DataStreamConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_convnet_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:config.DataStreamConfig)
}
DataStreamConfig::DataStreamConfig(const DataStreamConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_pattern_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_pattern()) {
    file_pattern_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_pattern_);
  }
  layer_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_layer_name()) {
    layer_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.layer_name_);
  }
  dataset_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dataset_name()) {
    dataset_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dataset_name_);
  }
  mean_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mean_file()) {
    mean_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mean_file_);
  }
  noise_layer_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_noise_layer_name()) {
    noise_layer_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.noise_layer_name_);
  }
  bbox_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_bbox_file()) {
    bbox_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bbox_file_);
  }
  ::memcpy(&raw_image_size_, &from.raw_image_size_,
    reinterpret_cast<char*>(&context_factor_) -
    reinterpret_cast<char*>(&raw_image_size_) + sizeof(context_factor_));
  // @@protoc_insertion_point(copy_constructor:config.DataStreamConfig)
}

void DataStreamConfig::SharedCtor() {
  _cached_size_ = 0;
  file_pattern_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  layer_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dataset_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mean_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  noise_layer_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bbox_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&raw_image_size_, 0, reinterpret_cast<char*>(&warp_bbox_) -
    reinterpret_cast<char*>(&raw_image_size_) + sizeof(warp_bbox_));
  data_type_ = 1;
  stride_ = 1;
  num_colors_ = 3;
  context_factor_ = 1;
}

DataStreamConfig::~DataStreamConfig() {
  // @@protoc_insertion_point(destructor:config.DataStreamConfig)
  SharedDtor();
}

void DataStreamConfig::SharedDtor() {
  file_pattern_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  layer_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dataset_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mean_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  noise_layer_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bbox_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DataStreamConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataStreamConfig::descriptor() {
  protobuf_convnet_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_convnet_5fconfig_2eproto::file_level_metadata[6].descriptor;
}

const DataStreamConfig& DataStreamConfig::default_instance() {
  protobuf_convnet_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

DataStreamConfig* DataStreamConfig::New(::google::protobuf::Arena* arena) const {
  DataStreamConfig* n = new DataStreamConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataStreamConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:config.DataStreamConfig)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_file_pattern()) {
      GOOGLE_DCHECK(!file_pattern_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*file_pattern_.UnsafeRawStringPointer())->clear();
    }
    if (has_layer_name()) {
      GOOGLE_DCHECK(!layer_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*layer_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_dataset_name()) {
      GOOGLE_DCHECK(!dataset_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*dataset_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_mean_file()) {
      GOOGLE_DCHECK(!mean_file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*mean_file_.UnsafeRawStringPointer())->clear();
    }
    if (has_noise_layer_name()) {
      GOOGLE_DCHECK(!noise_layer_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*noise_layer_name_.UnsafeRawStringPointer())->clear();
    }
    if (has_bbox_file()) {
      GOOGLE_DCHECK(!bbox_file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*bbox_file_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 192u) {
    ::memset(&raw_image_size_, 0, reinterpret_cast<char*>(&image_size_) -
      reinterpret_cast<char*>(&raw_image_size_) + sizeof(image_size_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&can_translate_, 0, reinterpret_cast<char*>(&min_scale_) -
      reinterpret_cast<char*>(&can_translate_) + sizeof(min_scale_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&parallel_disk_access_, 0, reinterpret_cast<char*>(&warp_bbox_) -
      reinterpret_cast<char*>(&parallel_disk_access_) + sizeof(warp_bbox_));
    data_type_ = 1;
    stride_ = 1;
    num_colors_ = 3;
  }
  context_factor_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DataStreamConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:config.DataStreamConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string file_pattern = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_pattern()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_pattern().data(), this->file_pattern().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "config.DataStreamConfig.file_pattern");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string layer_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_layer_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->layer_name().data(), this->layer_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "config.DataStreamConfig.layer_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string dataset_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dataset_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dataset_name().data(), this->dataset_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "config.DataStreamConfig.dataset_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .config.DataStreamConfig.DataType data_type = 4 [default = HDF5];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::config::DataStreamConfig_DataType_IsValid(value)) {
            set_data_type(static_cast< ::config::DataStreamConfig_DataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 raw_image_size = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_raw_image_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &raw_image_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 image_size = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_image_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &image_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool can_translate = 7 [default = false];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_can_translate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_translate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool can_flip = 8 [default = false];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_can_flip();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_flip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool pixelwise_normalize = 9 [default = false];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_pixelwise_normalize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pixelwise_normalize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float pca_noise_stddev = 10 [default = 0];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u)) {
          set_has_pca_noise_stddev();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pca_noise_stddev_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool normalize = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_normalize();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &normalize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 gpu_id = 12 [default = 0];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_gpu_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gpu_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 stride = 13 [default = 1];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_stride();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stride_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string mean_file = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mean_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mean_file().data(), this->mean_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "config.DataStreamConfig.mean_file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_colors = 15 [default = 3];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_num_colors();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_colors_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool parallel_disk_access = 16 [default = false];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_parallel_disk_access();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &parallel_disk_access_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool random_rotate_raw_image = 17 [default = false];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_random_rotate_raw_image();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &random_rotate_raw_image_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float random_rotate_max_angle = 18 [default = 0];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u)) {
          set_has_random_rotate_max_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &random_rotate_max_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float min_scale = 19 [default = 0];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(157u)) {
          set_has_min_scale();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string noise_layer_name = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(162u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_noise_layer_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->noise_layer_name().data(), this->noise_layer_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "config.DataStreamConfig.noise_layer_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool avg10_full_image = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          set_has_avg10_full_image();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &avg10_full_image_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string bbox_file = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bbox_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bbox_file().data(), this->bbox_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "config.DataStreamConfig.bbox_file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float context_factor = 23 [default = 1];
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(189u)) {
          set_has_context_factor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &context_factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool center_on_bbox = 24 [default = false];
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u)) {
          set_has_center_on_bbox();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &center_on_bbox_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool warp_bbox = 25 [default = false];
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u)) {
          set_has_warp_bbox();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &warp_bbox_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:config.DataStreamConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:config.DataStreamConfig)
  return false;
#undef DO_
}

void DataStreamConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:config.DataStreamConfig)
  // required string file_pattern = 1;
  if (has_file_pattern()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_pattern().data(), this->file_pattern().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.DataStreamConfig.file_pattern");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_pattern(), output);
  }

  // required string layer_name = 2;
  if (has_layer_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->layer_name().data(), this->layer_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.DataStreamConfig.layer_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->layer_name(), output);
  }

  // optional string dataset_name = 3;
  if (has_dataset_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dataset_name().data(), this->dataset_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.DataStreamConfig.dataset_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->dataset_name(), output);
  }

  // optional .config.DataStreamConfig.DataType data_type = 4 [default = HDF5];
  if (has_data_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->data_type(), output);
  }

  // optional int32 raw_image_size = 5 [default = 0];
  if (has_raw_image_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->raw_image_size(), output);
  }

  // optional int32 image_size = 6;
  if (has_image_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->image_size(), output);
  }

  // optional bool can_translate = 7 [default = false];
  if (has_can_translate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->can_translate(), output);
  }

  // optional bool can_flip = 8 [default = false];
  if (has_can_flip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->can_flip(), output);
  }

  // optional bool pixelwise_normalize = 9 [default = false];
  if (has_pixelwise_normalize()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->pixelwise_normalize(), output);
  }

  // optional float pca_noise_stddev = 10 [default = 0];
  if (has_pca_noise_stddev()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->pca_noise_stddev(), output);
  }

  // optional bool normalize = 11;
  if (has_normalize()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->normalize(), output);
  }

  // optional int32 gpu_id = 12 [default = 0];
  if (has_gpu_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->gpu_id(), output);
  }

  // optional int32 stride = 13 [default = 1];
  if (has_stride()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->stride(), output);
  }

  // optional string mean_file = 14;
  if (has_mean_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file().data(), this->mean_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.DataStreamConfig.mean_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->mean_file(), output);
  }

  // optional int32 num_colors = 15 [default = 3];
  if (has_num_colors()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->num_colors(), output);
  }

  // optional bool parallel_disk_access = 16 [default = false];
  if (has_parallel_disk_access()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->parallel_disk_access(), output);
  }

  // optional bool random_rotate_raw_image = 17 [default = false];
  if (has_random_rotate_raw_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->random_rotate_raw_image(), output);
  }

  // optional float random_rotate_max_angle = 18 [default = 0];
  if (has_random_rotate_max_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->random_rotate_max_angle(), output);
  }

  // optional float min_scale = 19 [default = 0];
  if (has_min_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->min_scale(), output);
  }

  // optional string noise_layer_name = 20;
  if (has_noise_layer_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->noise_layer_name().data(), this->noise_layer_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.DataStreamConfig.noise_layer_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->noise_layer_name(), output);
  }

  // optional bool avg10_full_image = 21;
  if (has_avg10_full_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->avg10_full_image(), output);
  }

  // optional string bbox_file = 22;
  if (has_bbox_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bbox_file().data(), this->bbox_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.DataStreamConfig.bbox_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      22, this->bbox_file(), output);
  }

  // optional float context_factor = 23 [default = 1];
  if (has_context_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->context_factor(), output);
  }

  // optional bool center_on_bbox = 24 [default = false];
  if (has_center_on_bbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->center_on_bbox(), output);
  }

  // optional bool warp_bbox = 25 [default = false];
  if (has_warp_bbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->warp_bbox(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:config.DataStreamConfig)
}

::google::protobuf::uint8* DataStreamConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:config.DataStreamConfig)
  // required string file_pattern = 1;
  if (has_file_pattern()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_pattern().data(), this->file_pattern().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.DataStreamConfig.file_pattern");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_pattern(), target);
  }

  // required string layer_name = 2;
  if (has_layer_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->layer_name().data(), this->layer_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.DataStreamConfig.layer_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->layer_name(), target);
  }

  // optional string dataset_name = 3;
  if (has_dataset_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dataset_name().data(), this->dataset_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.DataStreamConfig.dataset_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dataset_name(), target);
  }

  // optional .config.DataStreamConfig.DataType data_type = 4 [default = HDF5];
  if (has_data_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->data_type(), target);
  }

  // optional int32 raw_image_size = 5 [default = 0];
  if (has_raw_image_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->raw_image_size(), target);
  }

  // optional int32 image_size = 6;
  if (has_image_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->image_size(), target);
  }

  // optional bool can_translate = 7 [default = false];
  if (has_can_translate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->can_translate(), target);
  }

  // optional bool can_flip = 8 [default = false];
  if (has_can_flip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->can_flip(), target);
  }

  // optional bool pixelwise_normalize = 9 [default = false];
  if (has_pixelwise_normalize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->pixelwise_normalize(), target);
  }

  // optional float pca_noise_stddev = 10 [default = 0];
  if (has_pca_noise_stddev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->pca_noise_stddev(), target);
  }

  // optional bool normalize = 11;
  if (has_normalize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->normalize(), target);
  }

  // optional int32 gpu_id = 12 [default = 0];
  if (has_gpu_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->gpu_id(), target);
  }

  // optional int32 stride = 13 [default = 1];
  if (has_stride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->stride(), target);
  }

  // optional string mean_file = 14;
  if (has_mean_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mean_file().data(), this->mean_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.DataStreamConfig.mean_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->mean_file(), target);
  }

  // optional int32 num_colors = 15 [default = 3];
  if (has_num_colors()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->num_colors(), target);
  }

  // optional bool parallel_disk_access = 16 [default = false];
  if (has_parallel_disk_access()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->parallel_disk_access(), target);
  }

  // optional bool random_rotate_raw_image = 17 [default = false];
  if (has_random_rotate_raw_image()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->random_rotate_raw_image(), target);
  }

  // optional float random_rotate_max_angle = 18 [default = 0];
  if (has_random_rotate_max_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->random_rotate_max_angle(), target);
  }

  // optional float min_scale = 19 [default = 0];
  if (has_min_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->min_scale(), target);
  }

  // optional string noise_layer_name = 20;
  if (has_noise_layer_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->noise_layer_name().data(), this->noise_layer_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.DataStreamConfig.noise_layer_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->noise_layer_name(), target);
  }

  // optional bool avg10_full_image = 21;
  if (has_avg10_full_image()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->avg10_full_image(), target);
  }

  // optional string bbox_file = 22;
  if (has_bbox_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bbox_file().data(), this->bbox_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.DataStreamConfig.bbox_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->bbox_file(), target);
  }

  // optional float context_factor = 23 [default = 1];
  if (has_context_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->context_factor(), target);
  }

  // optional bool center_on_bbox = 24 [default = false];
  if (has_center_on_bbox()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->center_on_bbox(), target);
  }

  // optional bool warp_bbox = 25 [default = false];
  if (has_warp_bbox()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->warp_bbox(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:config.DataStreamConfig)
  return target;
}

size_t DataStreamConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:config.DataStreamConfig)
  size_t total_size = 0;

  if (has_file_pattern()) {
    // required string file_pattern = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_pattern());
  }

  if (has_layer_name()) {
    // required string layer_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->layer_name());
  }

  return total_size;
}
size_t DataStreamConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:config.DataStreamConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string file_pattern = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_pattern());

    // required string layer_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->layer_name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 252u) {
    // optional string dataset_name = 3;
    if (has_dataset_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dataset_name());
    }

    // optional string mean_file = 14;
    if (has_mean_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mean_file());
    }

    // optional string noise_layer_name = 20;
    if (has_noise_layer_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->noise_layer_name());
    }

    // optional string bbox_file = 22;
    if (has_bbox_file()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bbox_file());
    }

    // optional int32 raw_image_size = 5 [default = 0];
    if (has_raw_image_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->raw_image_size());
    }

    // optional int32 image_size = 6;
    if (has_image_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->image_size());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool can_translate = 7 [default = false];
    if (has_can_translate()) {
      total_size += 1 + 1;
    }

    // optional bool can_flip = 8 [default = false];
    if (has_can_flip()) {
      total_size += 1 + 1;
    }

    // optional bool pixelwise_normalize = 9 [default = false];
    if (has_pixelwise_normalize()) {
      total_size += 1 + 1;
    }

    // optional bool normalize = 11;
    if (has_normalize()) {
      total_size += 1 + 1;
    }

    // optional float pca_noise_stddev = 10 [default = 0];
    if (has_pca_noise_stddev()) {
      total_size += 1 + 4;
    }

    // optional int32 gpu_id = 12 [default = 0];
    if (has_gpu_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gpu_id());
    }

    // optional float random_rotate_max_angle = 18 [default = 0];
    if (has_random_rotate_max_angle()) {
      total_size += 2 + 4;
    }

    // optional float min_scale = 19 [default = 0];
    if (has_min_scale()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional bool parallel_disk_access = 16 [default = false];
    if (has_parallel_disk_access()) {
      total_size += 2 + 1;
    }

    // optional bool random_rotate_raw_image = 17 [default = false];
    if (has_random_rotate_raw_image()) {
      total_size += 2 + 1;
    }

    // optional bool avg10_full_image = 21;
    if (has_avg10_full_image()) {
      total_size += 2 + 1;
    }

    // optional bool center_on_bbox = 24 [default = false];
    if (has_center_on_bbox()) {
      total_size += 2 + 1;
    }

    // optional bool warp_bbox = 25 [default = false];
    if (has_warp_bbox()) {
      total_size += 2 + 1;
    }

    // optional .config.DataStreamConfig.DataType data_type = 4 [default = HDF5];
    if (has_data_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->data_type());
    }

    // optional int32 stride = 13 [default = 1];
    if (has_stride()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stride());
    }

    // optional int32 num_colors = 15 [default = 3];
    if (has_num_colors()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_colors());
    }

  }
  // optional float context_factor = 23 [default = 1];
  if (has_context_factor()) {
    total_size += 2 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataStreamConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:config.DataStreamConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DataStreamConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DataStreamConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:config.DataStreamConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:config.DataStreamConfig)
    MergeFrom(*source);
  }
}

void DataStreamConfig::MergeFrom(const DataStreamConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:config.DataStreamConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_file_pattern()) {
      set_has_file_pattern();
      file_pattern_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_pattern_);
    }
    if (from.has_layer_name()) {
      set_has_layer_name();
      layer_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.layer_name_);
    }
    if (from.has_dataset_name()) {
      set_has_dataset_name();
      dataset_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dataset_name_);
    }
    if (from.has_mean_file()) {
      set_has_mean_file();
      mean_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mean_file_);
    }
    if (from.has_noise_layer_name()) {
      set_has_noise_layer_name();
      noise_layer_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.noise_layer_name_);
    }
    if (from.has_bbox_file()) {
      set_has_bbox_file();
      bbox_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bbox_file_);
    }
    if (from.has_raw_image_size()) {
      set_raw_image_size(from.raw_image_size());
    }
    if (from.has_image_size()) {
      set_image_size(from.image_size());
    }
  }
  if (from._has_bits_[8 / 32] & 65280u) {
    if (from.has_can_translate()) {
      set_can_translate(from.can_translate());
    }
    if (from.has_can_flip()) {
      set_can_flip(from.can_flip());
    }
    if (from.has_pixelwise_normalize()) {
      set_pixelwise_normalize(from.pixelwise_normalize());
    }
    if (from.has_normalize()) {
      set_normalize(from.normalize());
    }
    if (from.has_pca_noise_stddev()) {
      set_pca_noise_stddev(from.pca_noise_stddev());
    }
    if (from.has_gpu_id()) {
      set_gpu_id(from.gpu_id());
    }
    if (from.has_random_rotate_max_angle()) {
      set_random_rotate_max_angle(from.random_rotate_max_angle());
    }
    if (from.has_min_scale()) {
      set_min_scale(from.min_scale());
    }
  }
  if (from._has_bits_[16 / 32] & 16711680u) {
    if (from.has_parallel_disk_access()) {
      set_parallel_disk_access(from.parallel_disk_access());
    }
    if (from.has_random_rotate_raw_image()) {
      set_random_rotate_raw_image(from.random_rotate_raw_image());
    }
    if (from.has_avg10_full_image()) {
      set_avg10_full_image(from.avg10_full_image());
    }
    if (from.has_center_on_bbox()) {
      set_center_on_bbox(from.center_on_bbox());
    }
    if (from.has_warp_bbox()) {
      set_warp_bbox(from.warp_bbox());
    }
    if (from.has_data_type()) {
      set_data_type(from.data_type());
    }
    if (from.has_stride()) {
      set_stride(from.stride());
    }
    if (from.has_num_colors()) {
      set_num_colors(from.num_colors());
    }
  }
  if (from.has_context_factor()) {
    set_context_factor(from.context_factor());
  }
}

void DataStreamConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:config.DataStreamConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataStreamConfig::CopyFrom(const DataStreamConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:config.DataStreamConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataStreamConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void DataStreamConfig::Swap(DataStreamConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataStreamConfig::InternalSwap(DataStreamConfig* other) {
  file_pattern_.Swap(&other->file_pattern_);
  layer_name_.Swap(&other->layer_name_);
  dataset_name_.Swap(&other->dataset_name_);
  mean_file_.Swap(&other->mean_file_);
  noise_layer_name_.Swap(&other->noise_layer_name_);
  bbox_file_.Swap(&other->bbox_file_);
  std::swap(raw_image_size_, other->raw_image_size_);
  std::swap(image_size_, other->image_size_);
  std::swap(can_translate_, other->can_translate_);
  std::swap(can_flip_, other->can_flip_);
  std::swap(pixelwise_normalize_, other->pixelwise_normalize_);
  std::swap(normalize_, other->normalize_);
  std::swap(pca_noise_stddev_, other->pca_noise_stddev_);
  std::swap(gpu_id_, other->gpu_id_);
  std::swap(random_rotate_max_angle_, other->random_rotate_max_angle_);
  std::swap(min_scale_, other->min_scale_);
  std::swap(parallel_disk_access_, other->parallel_disk_access_);
  std::swap(random_rotate_raw_image_, other->random_rotate_raw_image_);
  std::swap(avg10_full_image_, other->avg10_full_image_);
  std::swap(center_on_bbox_, other->center_on_bbox_);
  std::swap(warp_bbox_, other->warp_bbox_);
  std::swap(data_type_, other->data_type_);
  std::swap(stride_, other->stride_);
  std::swap(num_colors_, other->num_colors_);
  std::swap(context_factor_, other->context_factor_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataStreamConfig::GetMetadata() const {
  protobuf_convnet_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_convnet_5fconfig_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DataStreamConfig

// required string file_pattern = 1;
bool DataStreamConfig::has_file_pattern() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DataStreamConfig::set_has_file_pattern() {
  _has_bits_[0] |= 0x00000001u;
}
void DataStreamConfig::clear_has_file_pattern() {
  _has_bits_[0] &= ~0x00000001u;
}
void DataStreamConfig::clear_file_pattern() {
  file_pattern_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_file_pattern();
}
const ::std::string& DataStreamConfig::file_pattern() const {
  // @@protoc_insertion_point(field_get:config.DataStreamConfig.file_pattern)
  return file_pattern_.GetNoArena();
}
void DataStreamConfig::set_file_pattern(const ::std::string& value) {
  set_has_file_pattern();
  file_pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.DataStreamConfig.file_pattern)
}
#if LANG_CXX11
void DataStreamConfig::set_file_pattern(::std::string&& value) {
  set_has_file_pattern();
  file_pattern_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.DataStreamConfig.file_pattern)
}
#endif
void DataStreamConfig::set_file_pattern(const char* value) {
  set_has_file_pattern();
  file_pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.DataStreamConfig.file_pattern)
}
void DataStreamConfig::set_file_pattern(const char* value, size_t size) {
  set_has_file_pattern();
  file_pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.DataStreamConfig.file_pattern)
}
::std::string* DataStreamConfig::mutable_file_pattern() {
  set_has_file_pattern();
  // @@protoc_insertion_point(field_mutable:config.DataStreamConfig.file_pattern)
  return file_pattern_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DataStreamConfig::release_file_pattern() {
  // @@protoc_insertion_point(field_release:config.DataStreamConfig.file_pattern)
  clear_has_file_pattern();
  return file_pattern_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DataStreamConfig::set_allocated_file_pattern(::std::string* file_pattern) {
  if (file_pattern != NULL) {
    set_has_file_pattern();
  } else {
    clear_has_file_pattern();
  }
  file_pattern_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_pattern);
  // @@protoc_insertion_point(field_set_allocated:config.DataStreamConfig.file_pattern)
}

// required string layer_name = 2;
bool DataStreamConfig::has_layer_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DataStreamConfig::set_has_layer_name() {
  _has_bits_[0] |= 0x00000002u;
}
void DataStreamConfig::clear_has_layer_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void DataStreamConfig::clear_layer_name() {
  layer_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_layer_name();
}
const ::std::string& DataStreamConfig::layer_name() const {
  // @@protoc_insertion_point(field_get:config.DataStreamConfig.layer_name)
  return layer_name_.GetNoArena();
}
void DataStreamConfig::set_layer_name(const ::std::string& value) {
  set_has_layer_name();
  layer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.DataStreamConfig.layer_name)
}
#if LANG_CXX11
void DataStreamConfig::set_layer_name(::std::string&& value) {
  set_has_layer_name();
  layer_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.DataStreamConfig.layer_name)
}
#endif
void DataStreamConfig::set_layer_name(const char* value) {
  set_has_layer_name();
  layer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.DataStreamConfig.layer_name)
}
void DataStreamConfig::set_layer_name(const char* value, size_t size) {
  set_has_layer_name();
  layer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.DataStreamConfig.layer_name)
}
::std::string* DataStreamConfig::mutable_layer_name() {
  set_has_layer_name();
  // @@protoc_insertion_point(field_mutable:config.DataStreamConfig.layer_name)
  return layer_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DataStreamConfig::release_layer_name() {
  // @@protoc_insertion_point(field_release:config.DataStreamConfig.layer_name)
  clear_has_layer_name();
  return layer_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DataStreamConfig::set_allocated_layer_name(::std::string* layer_name) {
  if (layer_name != NULL) {
    set_has_layer_name();
  } else {
    clear_has_layer_name();
  }
  layer_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), layer_name);
  // @@protoc_insertion_point(field_set_allocated:config.DataStreamConfig.layer_name)
}

// optional string dataset_name = 3;
bool DataStreamConfig::has_dataset_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DataStreamConfig::set_has_dataset_name() {
  _has_bits_[0] |= 0x00000004u;
}
void DataStreamConfig::clear_has_dataset_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void DataStreamConfig::clear_dataset_name() {
  dataset_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dataset_name();
}
const ::std::string& DataStreamConfig::dataset_name() const {
  // @@protoc_insertion_point(field_get:config.DataStreamConfig.dataset_name)
  return dataset_name_.GetNoArena();
}
void DataStreamConfig::set_dataset_name(const ::std::string& value) {
  set_has_dataset_name();
  dataset_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.DataStreamConfig.dataset_name)
}
#if LANG_CXX11
void DataStreamConfig::set_dataset_name(::std::string&& value) {
  set_has_dataset_name();
  dataset_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.DataStreamConfig.dataset_name)
}
#endif
void DataStreamConfig::set_dataset_name(const char* value) {
  set_has_dataset_name();
  dataset_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.DataStreamConfig.dataset_name)
}
void DataStreamConfig::set_dataset_name(const char* value, size_t size) {
  set_has_dataset_name();
  dataset_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.DataStreamConfig.dataset_name)
}
::std::string* DataStreamConfig::mutable_dataset_name() {
  set_has_dataset_name();
  // @@protoc_insertion_point(field_mutable:config.DataStreamConfig.dataset_name)
  return dataset_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DataStreamConfig::release_dataset_name() {
  // @@protoc_insertion_point(field_release:config.DataStreamConfig.dataset_name)
  clear_has_dataset_name();
  return dataset_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DataStreamConfig::set_allocated_dataset_name(::std::string* dataset_name) {
  if (dataset_name != NULL) {
    set_has_dataset_name();
  } else {
    clear_has_dataset_name();
  }
  dataset_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dataset_name);
  // @@protoc_insertion_point(field_set_allocated:config.DataStreamConfig.dataset_name)
}

// optional .config.DataStreamConfig.DataType data_type = 4 [default = HDF5];
bool DataStreamConfig::has_data_type() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void DataStreamConfig::set_has_data_type() {
  _has_bits_[0] |= 0x00200000u;
}
void DataStreamConfig::clear_has_data_type() {
  _has_bits_[0] &= ~0x00200000u;
}
void DataStreamConfig::clear_data_type() {
  data_type_ = 1;
  clear_has_data_type();
}
::config::DataStreamConfig_DataType DataStreamConfig::data_type() const {
  // @@protoc_insertion_point(field_get:config.DataStreamConfig.data_type)
  return static_cast< ::config::DataStreamConfig_DataType >(data_type_);
}
void DataStreamConfig::set_data_type(::config::DataStreamConfig_DataType value) {
  assert(::config::DataStreamConfig_DataType_IsValid(value));
  set_has_data_type();
  data_type_ = value;
  // @@protoc_insertion_point(field_set:config.DataStreamConfig.data_type)
}

// optional int32 raw_image_size = 5 [default = 0];
bool DataStreamConfig::has_raw_image_size() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DataStreamConfig::set_has_raw_image_size() {
  _has_bits_[0] |= 0x00000040u;
}
void DataStreamConfig::clear_has_raw_image_size() {
  _has_bits_[0] &= ~0x00000040u;
}
void DataStreamConfig::clear_raw_image_size() {
  raw_image_size_ = 0;
  clear_has_raw_image_size();
}
::google::protobuf::int32 DataStreamConfig::raw_image_size() const {
  // @@protoc_insertion_point(field_get:config.DataStreamConfig.raw_image_size)
  return raw_image_size_;
}
void DataStreamConfig::set_raw_image_size(::google::protobuf::int32 value) {
  set_has_raw_image_size();
  raw_image_size_ = value;
  // @@protoc_insertion_point(field_set:config.DataStreamConfig.raw_image_size)
}

// optional int32 image_size = 6;
bool DataStreamConfig::has_image_size() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DataStreamConfig::set_has_image_size() {
  _has_bits_[0] |= 0x00000080u;
}
void DataStreamConfig::clear_has_image_size() {
  _has_bits_[0] &= ~0x00000080u;
}
void DataStreamConfig::clear_image_size() {
  image_size_ = 0;
  clear_has_image_size();
}
::google::protobuf::int32 DataStreamConfig::image_size() const {
  // @@protoc_insertion_point(field_get:config.DataStreamConfig.image_size)
  return image_size_;
}
void DataStreamConfig::set_image_size(::google::protobuf::int32 value) {
  set_has_image_size();
  image_size_ = value;
  // @@protoc_insertion_point(field_set:config.DataStreamConfig.image_size)
}

// optional bool can_translate = 7 [default = false];
bool DataStreamConfig::has_can_translate() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void DataStreamConfig::set_has_can_translate() {
  _has_bits_[0] |= 0x00000100u;
}
void DataStreamConfig::clear_has_can_translate() {
  _has_bits_[0] &= ~0x00000100u;
}
void DataStreamConfig::clear_can_translate() {
  can_translate_ = false;
  clear_has_can_translate();
}
bool DataStreamConfig::can_translate() const {
  // @@protoc_insertion_point(field_get:config.DataStreamConfig.can_translate)
  return can_translate_;
}
void DataStreamConfig::set_can_translate(bool value) {
  set_has_can_translate();
  can_translate_ = value;
  // @@protoc_insertion_point(field_set:config.DataStreamConfig.can_translate)
}

// optional bool can_flip = 8 [default = false];
bool DataStreamConfig::has_can_flip() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void DataStreamConfig::set_has_can_flip() {
  _has_bits_[0] |= 0x00000200u;
}
void DataStreamConfig::clear_has_can_flip() {
  _has_bits_[0] &= ~0x00000200u;
}
void DataStreamConfig::clear_can_flip() {
  can_flip_ = false;
  clear_has_can_flip();
}
bool DataStreamConfig::can_flip() const {
  // @@protoc_insertion_point(field_get:config.DataStreamConfig.can_flip)
  return can_flip_;
}
void DataStreamConfig::set_can_flip(bool value) {
  set_has_can_flip();
  can_flip_ = value;
  // @@protoc_insertion_point(field_set:config.DataStreamConfig.can_flip)
}

// optional bool pixelwise_normalize = 9 [default = false];
bool DataStreamConfig::has_pixelwise_normalize() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void DataStreamConfig::set_has_pixelwise_normalize() {
  _has_bits_[0] |= 0x00000400u;
}
void DataStreamConfig::clear_has_pixelwise_normalize() {
  _has_bits_[0] &= ~0x00000400u;
}
void DataStreamConfig::clear_pixelwise_normalize() {
  pixelwise_normalize_ = false;
  clear_has_pixelwise_normalize();
}
bool DataStreamConfig::pixelwise_normalize() const {
  // @@protoc_insertion_point(field_get:config.DataStreamConfig.pixelwise_normalize)
  return pixelwise_normalize_;
}
void DataStreamConfig::set_pixelwise_normalize(bool value) {
  set_has_pixelwise_normalize();
  pixelwise_normalize_ = value;
  // @@protoc_insertion_point(field_set:config.DataStreamConfig.pixelwise_normalize)
}

// optional float pca_noise_stddev = 10 [default = 0];
bool DataStreamConfig::has_pca_noise_stddev() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void DataStreamConfig::set_has_pca_noise_stddev() {
  _has_bits_[0] |= 0x00001000u;
}
void DataStreamConfig::clear_has_pca_noise_stddev() {
  _has_bits_[0] &= ~0x00001000u;
}
void DataStreamConfig::clear_pca_noise_stddev() {
  pca_noise_stddev_ = 0;
  clear_has_pca_noise_stddev();
}
float DataStreamConfig::pca_noise_stddev() const {
  // @@protoc_insertion_point(field_get:config.DataStreamConfig.pca_noise_stddev)
  return pca_noise_stddev_;
}
void DataStreamConfig::set_pca_noise_stddev(float value) {
  set_has_pca_noise_stddev();
  pca_noise_stddev_ = value;
  // @@protoc_insertion_point(field_set:config.DataStreamConfig.pca_noise_stddev)
}

// optional bool normalize = 11;
bool DataStreamConfig::has_normalize() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void DataStreamConfig::set_has_normalize() {
  _has_bits_[0] |= 0x00000800u;
}
void DataStreamConfig::clear_has_normalize() {
  _has_bits_[0] &= ~0x00000800u;
}
void DataStreamConfig::clear_normalize() {
  normalize_ = false;
  clear_has_normalize();
}
bool DataStreamConfig::normalize() const {
  // @@protoc_insertion_point(field_get:config.DataStreamConfig.normalize)
  return normalize_;
}
void DataStreamConfig::set_normalize(bool value) {
  set_has_normalize();
  normalize_ = value;
  // @@protoc_insertion_point(field_set:config.DataStreamConfig.normalize)
}

// optional int32 gpu_id = 12 [default = 0];
bool DataStreamConfig::has_gpu_id() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void DataStreamConfig::set_has_gpu_id() {
  _has_bits_[0] |= 0x00002000u;
}
void DataStreamConfig::clear_has_gpu_id() {
  _has_bits_[0] &= ~0x00002000u;
}
void DataStreamConfig::clear_gpu_id() {
  gpu_id_ = 0;
  clear_has_gpu_id();
}
::google::protobuf::int32 DataStreamConfig::gpu_id() const {
  // @@protoc_insertion_point(field_get:config.DataStreamConfig.gpu_id)
  return gpu_id_;
}
void DataStreamConfig::set_gpu_id(::google::protobuf::int32 value) {
  set_has_gpu_id();
  gpu_id_ = value;
  // @@protoc_insertion_point(field_set:config.DataStreamConfig.gpu_id)
}

// optional int32 stride = 13 [default = 1];
bool DataStreamConfig::has_stride() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void DataStreamConfig::set_has_stride() {
  _has_bits_[0] |= 0x00400000u;
}
void DataStreamConfig::clear_has_stride() {
  _has_bits_[0] &= ~0x00400000u;
}
void DataStreamConfig::clear_stride() {
  stride_ = 1;
  clear_has_stride();
}
::google::protobuf::int32 DataStreamConfig::stride() const {
  // @@protoc_insertion_point(field_get:config.DataStreamConfig.stride)
  return stride_;
}
void DataStreamConfig::set_stride(::google::protobuf::int32 value) {
  set_has_stride();
  stride_ = value;
  // @@protoc_insertion_point(field_set:config.DataStreamConfig.stride)
}

// optional string mean_file = 14;
bool DataStreamConfig::has_mean_file() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DataStreamConfig::set_has_mean_file() {
  _has_bits_[0] |= 0x00000008u;
}
void DataStreamConfig::clear_has_mean_file() {
  _has_bits_[0] &= ~0x00000008u;
}
void DataStreamConfig::clear_mean_file() {
  mean_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_mean_file();
}
const ::std::string& DataStreamConfig::mean_file() const {
  // @@protoc_insertion_point(field_get:config.DataStreamConfig.mean_file)
  return mean_file_.GetNoArena();
}
void DataStreamConfig::set_mean_file(const ::std::string& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.DataStreamConfig.mean_file)
}
#if LANG_CXX11
void DataStreamConfig::set_mean_file(::std::string&& value) {
  set_has_mean_file();
  mean_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.DataStreamConfig.mean_file)
}
#endif
void DataStreamConfig::set_mean_file(const char* value) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.DataStreamConfig.mean_file)
}
void DataStreamConfig::set_mean_file(const char* value, size_t size) {
  set_has_mean_file();
  mean_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.DataStreamConfig.mean_file)
}
::std::string* DataStreamConfig::mutable_mean_file() {
  set_has_mean_file();
  // @@protoc_insertion_point(field_mutable:config.DataStreamConfig.mean_file)
  return mean_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DataStreamConfig::release_mean_file() {
  // @@protoc_insertion_point(field_release:config.DataStreamConfig.mean_file)
  clear_has_mean_file();
  return mean_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DataStreamConfig::set_allocated_mean_file(::std::string* mean_file) {
  if (mean_file != NULL) {
    set_has_mean_file();
  } else {
    clear_has_mean_file();
  }
  mean_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mean_file);
  // @@protoc_insertion_point(field_set_allocated:config.DataStreamConfig.mean_file)
}

// optional int32 num_colors = 15 [default = 3];
bool DataStreamConfig::has_num_colors() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void DataStreamConfig::set_has_num_colors() {
  _has_bits_[0] |= 0x00800000u;
}
void DataStreamConfig::clear_has_num_colors() {
  _has_bits_[0] &= ~0x00800000u;
}
void DataStreamConfig::clear_num_colors() {
  num_colors_ = 3;
  clear_has_num_colors();
}
::google::protobuf::int32 DataStreamConfig::num_colors() const {
  // @@protoc_insertion_point(field_get:config.DataStreamConfig.num_colors)
  return num_colors_;
}
void DataStreamConfig::set_num_colors(::google::protobuf::int32 value) {
  set_has_num_colors();
  num_colors_ = value;
  // @@protoc_insertion_point(field_set:config.DataStreamConfig.num_colors)
}

// optional bool parallel_disk_access = 16 [default = false];
bool DataStreamConfig::has_parallel_disk_access() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void DataStreamConfig::set_has_parallel_disk_access() {
  _has_bits_[0] |= 0x00010000u;
}
void DataStreamConfig::clear_has_parallel_disk_access() {
  _has_bits_[0] &= ~0x00010000u;
}
void DataStreamConfig::clear_parallel_disk_access() {
  parallel_disk_access_ = false;
  clear_has_parallel_disk_access();
}
bool DataStreamConfig::parallel_disk_access() const {
  // @@protoc_insertion_point(field_get:config.DataStreamConfig.parallel_disk_access)
  return parallel_disk_access_;
}
void DataStreamConfig::set_parallel_disk_access(bool value) {
  set_has_parallel_disk_access();
  parallel_disk_access_ = value;
  // @@protoc_insertion_point(field_set:config.DataStreamConfig.parallel_disk_access)
}

// optional bool random_rotate_raw_image = 17 [default = false];
bool DataStreamConfig::has_random_rotate_raw_image() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void DataStreamConfig::set_has_random_rotate_raw_image() {
  _has_bits_[0] |= 0x00020000u;
}
void DataStreamConfig::clear_has_random_rotate_raw_image() {
  _has_bits_[0] &= ~0x00020000u;
}
void DataStreamConfig::clear_random_rotate_raw_image() {
  random_rotate_raw_image_ = false;
  clear_has_random_rotate_raw_image();
}
bool DataStreamConfig::random_rotate_raw_image() const {
  // @@protoc_insertion_point(field_get:config.DataStreamConfig.random_rotate_raw_image)
  return random_rotate_raw_image_;
}
void DataStreamConfig::set_random_rotate_raw_image(bool value) {
  set_has_random_rotate_raw_image();
  random_rotate_raw_image_ = value;
  // @@protoc_insertion_point(field_set:config.DataStreamConfig.random_rotate_raw_image)
}

// optional float random_rotate_max_angle = 18 [default = 0];
bool DataStreamConfig::has_random_rotate_max_angle() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void DataStreamConfig::set_has_random_rotate_max_angle() {
  _has_bits_[0] |= 0x00004000u;
}
void DataStreamConfig::clear_has_random_rotate_max_angle() {
  _has_bits_[0] &= ~0x00004000u;
}
void DataStreamConfig::clear_random_rotate_max_angle() {
  random_rotate_max_angle_ = 0;
  clear_has_random_rotate_max_angle();
}
float DataStreamConfig::random_rotate_max_angle() const {
  // @@protoc_insertion_point(field_get:config.DataStreamConfig.random_rotate_max_angle)
  return random_rotate_max_angle_;
}
void DataStreamConfig::set_random_rotate_max_angle(float value) {
  set_has_random_rotate_max_angle();
  random_rotate_max_angle_ = value;
  // @@protoc_insertion_point(field_set:config.DataStreamConfig.random_rotate_max_angle)
}

// optional float min_scale = 19 [default = 0];
bool DataStreamConfig::has_min_scale() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void DataStreamConfig::set_has_min_scale() {
  _has_bits_[0] |= 0x00008000u;
}
void DataStreamConfig::clear_has_min_scale() {
  _has_bits_[0] &= ~0x00008000u;
}
void DataStreamConfig::clear_min_scale() {
  min_scale_ = 0;
  clear_has_min_scale();
}
float DataStreamConfig::min_scale() const {
  // @@protoc_insertion_point(field_get:config.DataStreamConfig.min_scale)
  return min_scale_;
}
void DataStreamConfig::set_min_scale(float value) {
  set_has_min_scale();
  min_scale_ = value;
  // @@protoc_insertion_point(field_set:config.DataStreamConfig.min_scale)
}

// optional string noise_layer_name = 20;
bool DataStreamConfig::has_noise_layer_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DataStreamConfig::set_has_noise_layer_name() {
  _has_bits_[0] |= 0x00000010u;
}
void DataStreamConfig::clear_has_noise_layer_name() {
  _has_bits_[0] &= ~0x00000010u;
}
void DataStreamConfig::clear_noise_layer_name() {
  noise_layer_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_noise_layer_name();
}
const ::std::string& DataStreamConfig::noise_layer_name() const {
  // @@protoc_insertion_point(field_get:config.DataStreamConfig.noise_layer_name)
  return noise_layer_name_.GetNoArena();
}
void DataStreamConfig::set_noise_layer_name(const ::std::string& value) {
  set_has_noise_layer_name();
  noise_layer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.DataStreamConfig.noise_layer_name)
}
#if LANG_CXX11
void DataStreamConfig::set_noise_layer_name(::std::string&& value) {
  set_has_noise_layer_name();
  noise_layer_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.DataStreamConfig.noise_layer_name)
}
#endif
void DataStreamConfig::set_noise_layer_name(const char* value) {
  set_has_noise_layer_name();
  noise_layer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.DataStreamConfig.noise_layer_name)
}
void DataStreamConfig::set_noise_layer_name(const char* value, size_t size) {
  set_has_noise_layer_name();
  noise_layer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.DataStreamConfig.noise_layer_name)
}
::std::string* DataStreamConfig::mutable_noise_layer_name() {
  set_has_noise_layer_name();
  // @@protoc_insertion_point(field_mutable:config.DataStreamConfig.noise_layer_name)
  return noise_layer_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DataStreamConfig::release_noise_layer_name() {
  // @@protoc_insertion_point(field_release:config.DataStreamConfig.noise_layer_name)
  clear_has_noise_layer_name();
  return noise_layer_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DataStreamConfig::set_allocated_noise_layer_name(::std::string* noise_layer_name) {
  if (noise_layer_name != NULL) {
    set_has_noise_layer_name();
  } else {
    clear_has_noise_layer_name();
  }
  noise_layer_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), noise_layer_name);
  // @@protoc_insertion_point(field_set_allocated:config.DataStreamConfig.noise_layer_name)
}

// optional bool avg10_full_image = 21;
bool DataStreamConfig::has_avg10_full_image() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void DataStreamConfig::set_has_avg10_full_image() {
  _has_bits_[0] |= 0x00040000u;
}
void DataStreamConfig::clear_has_avg10_full_image() {
  _has_bits_[0] &= ~0x00040000u;
}
void DataStreamConfig::clear_avg10_full_image() {
  avg10_full_image_ = false;
  clear_has_avg10_full_image();
}
bool DataStreamConfig::avg10_full_image() const {
  // @@protoc_insertion_point(field_get:config.DataStreamConfig.avg10_full_image)
  return avg10_full_image_;
}
void DataStreamConfig::set_avg10_full_image(bool value) {
  set_has_avg10_full_image();
  avg10_full_image_ = value;
  // @@protoc_insertion_point(field_set:config.DataStreamConfig.avg10_full_image)
}

// optional string bbox_file = 22;
bool DataStreamConfig::has_bbox_file() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DataStreamConfig::set_has_bbox_file() {
  _has_bits_[0] |= 0x00000020u;
}
void DataStreamConfig::clear_has_bbox_file() {
  _has_bits_[0] &= ~0x00000020u;
}
void DataStreamConfig::clear_bbox_file() {
  bbox_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_bbox_file();
}
const ::std::string& DataStreamConfig::bbox_file() const {
  // @@protoc_insertion_point(field_get:config.DataStreamConfig.bbox_file)
  return bbox_file_.GetNoArena();
}
void DataStreamConfig::set_bbox_file(const ::std::string& value) {
  set_has_bbox_file();
  bbox_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.DataStreamConfig.bbox_file)
}
#if LANG_CXX11
void DataStreamConfig::set_bbox_file(::std::string&& value) {
  set_has_bbox_file();
  bbox_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.DataStreamConfig.bbox_file)
}
#endif
void DataStreamConfig::set_bbox_file(const char* value) {
  set_has_bbox_file();
  bbox_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.DataStreamConfig.bbox_file)
}
void DataStreamConfig::set_bbox_file(const char* value, size_t size) {
  set_has_bbox_file();
  bbox_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.DataStreamConfig.bbox_file)
}
::std::string* DataStreamConfig::mutable_bbox_file() {
  set_has_bbox_file();
  // @@protoc_insertion_point(field_mutable:config.DataStreamConfig.bbox_file)
  return bbox_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DataStreamConfig::release_bbox_file() {
  // @@protoc_insertion_point(field_release:config.DataStreamConfig.bbox_file)
  clear_has_bbox_file();
  return bbox_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DataStreamConfig::set_allocated_bbox_file(::std::string* bbox_file) {
  if (bbox_file != NULL) {
    set_has_bbox_file();
  } else {
    clear_has_bbox_file();
  }
  bbox_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bbox_file);
  // @@protoc_insertion_point(field_set_allocated:config.DataStreamConfig.bbox_file)
}

// optional float context_factor = 23 [default = 1];
bool DataStreamConfig::has_context_factor() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void DataStreamConfig::set_has_context_factor() {
  _has_bits_[0] |= 0x01000000u;
}
void DataStreamConfig::clear_has_context_factor() {
  _has_bits_[0] &= ~0x01000000u;
}
void DataStreamConfig::clear_context_factor() {
  context_factor_ = 1;
  clear_has_context_factor();
}
float DataStreamConfig::context_factor() const {
  // @@protoc_insertion_point(field_get:config.DataStreamConfig.context_factor)
  return context_factor_;
}
void DataStreamConfig::set_context_factor(float value) {
  set_has_context_factor();
  context_factor_ = value;
  // @@protoc_insertion_point(field_set:config.DataStreamConfig.context_factor)
}

// optional bool center_on_bbox = 24 [default = false];
bool DataStreamConfig::has_center_on_bbox() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void DataStreamConfig::set_has_center_on_bbox() {
  _has_bits_[0] |= 0x00080000u;
}
void DataStreamConfig::clear_has_center_on_bbox() {
  _has_bits_[0] &= ~0x00080000u;
}
void DataStreamConfig::clear_center_on_bbox() {
  center_on_bbox_ = false;
  clear_has_center_on_bbox();
}
bool DataStreamConfig::center_on_bbox() const {
  // @@protoc_insertion_point(field_get:config.DataStreamConfig.center_on_bbox)
  return center_on_bbox_;
}
void DataStreamConfig::set_center_on_bbox(bool value) {
  set_has_center_on_bbox();
  center_on_bbox_ = value;
  // @@protoc_insertion_point(field_set:config.DataStreamConfig.center_on_bbox)
}

// optional bool warp_bbox = 25 [default = false];
bool DataStreamConfig::has_warp_bbox() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void DataStreamConfig::set_has_warp_bbox() {
  _has_bits_[0] |= 0x00100000u;
}
void DataStreamConfig::clear_has_warp_bbox() {
  _has_bits_[0] &= ~0x00100000u;
}
void DataStreamConfig::clear_warp_bbox() {
  warp_bbox_ = false;
  clear_has_warp_bbox();
}
bool DataStreamConfig::warp_bbox() const {
  // @@protoc_insertion_point(field_get:config.DataStreamConfig.warp_bbox)
  return warp_bbox_;
}
void DataStreamConfig::set_warp_bbox(bool value) {
  set_has_warp_bbox();
  warp_bbox_ = value;
  // @@protoc_insertion_point(field_set:config.DataStreamConfig.warp_bbox)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DatasetConfig::kDataConfigFieldNumber;
const int DatasetConfig::kBatchSizeFieldNumber;
const int DatasetConfig::kChunkSizeFieldNumber;
const int DatasetConfig::kMaxReuseCountFieldNumber;
const int DatasetConfig::kPipelineLoadsFieldNumber;
const int DatasetConfig::kRandomizeCpuFieldNumber;
const int DatasetConfig::kRandomizeGpuFieldNumber;
const int DatasetConfig::kRandomAccessChunkSizeFieldNumber;
const int DatasetConfig::kMaxDatasetSizeFieldNumber;
const int DatasetConfig::kMultiplicityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DatasetConfig::DatasetConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_convnet_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:config.DatasetConfig)
}
DatasetConfig::DatasetConfig(const DatasetConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      data_config_(from.data_config_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&chunk_size_, &from.chunk_size_,
    reinterpret_cast<char*>(&random_access_chunk_size_) -
    reinterpret_cast<char*>(&chunk_size_) + sizeof(random_access_chunk_size_));
  // @@protoc_insertion_point(copy_constructor:config.DatasetConfig)
}

void DatasetConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&chunk_size_, 0, reinterpret_cast<char*>(&max_dataset_size_) -
    reinterpret_cast<char*>(&chunk_size_) + sizeof(max_dataset_size_));
  multiplicity_ = 1;
  batch_size_ = 1;
  random_access_chunk_size_ = 1;
}

DatasetConfig::~DatasetConfig() {
  // @@protoc_insertion_point(destructor:config.DatasetConfig)
  SharedDtor();
}

void DatasetConfig::SharedDtor() {
}

void DatasetConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DatasetConfig::descriptor() {
  protobuf_convnet_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_convnet_5fconfig_2eproto::file_level_metadata[7].descriptor;
}

const DatasetConfig& DatasetConfig::default_instance() {
  protobuf_convnet_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

DatasetConfig* DatasetConfig::New(::google::protobuf::Arena* arena) const {
  DatasetConfig* n = new DatasetConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DatasetConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:config.DatasetConfig)
  data_config_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&chunk_size_, 0, reinterpret_cast<char*>(&max_dataset_size_) -
      reinterpret_cast<char*>(&chunk_size_) + sizeof(max_dataset_size_));
    multiplicity_ = 1;
    batch_size_ = 1;
  }
  random_access_chunk_size_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DatasetConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:config.DatasetConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .config.DataStreamConfig data_config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_data_config()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // optional int32 batch_size = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_batch_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &batch_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 chunk_size = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_chunk_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chunk_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_reuse_count = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_max_reuse_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_reuse_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool pipeline_loads = 5 [default = false];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_pipeline_loads();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pipeline_loads_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool randomize_cpu = 6 [default = false];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_randomize_cpu();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &randomize_cpu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool randomize_gpu = 7 [default = false];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_randomize_gpu();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &randomize_gpu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 random_access_chunk_size = 8 [default = 1];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_random_access_chunk_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &random_access_chunk_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 max_dataset_size = 9 [default = 0];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_max_dataset_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_dataset_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 multiplicity = 10 [default = 1];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_multiplicity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &multiplicity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:config.DatasetConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:config.DatasetConfig)
  return false;
#undef DO_
}

void DatasetConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:config.DatasetConfig)
  // repeated .config.DataStreamConfig data_config = 1;
  for (unsigned int i = 0, n = this->data_config_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data_config(i), output);
  }

  // optional int32 batch_size = 2 [default = 1];
  if (has_batch_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->batch_size(), output);
  }

  // optional int32 chunk_size = 3 [default = 0];
  if (has_chunk_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->chunk_size(), output);
  }

  // optional int32 max_reuse_count = 4 [default = 0];
  if (has_max_reuse_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_reuse_count(), output);
  }

  // optional bool pipeline_loads = 5 [default = false];
  if (has_pipeline_loads()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->pipeline_loads(), output);
  }

  // optional bool randomize_cpu = 6 [default = false];
  if (has_randomize_cpu()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->randomize_cpu(), output);
  }

  // optional bool randomize_gpu = 7 [default = false];
  if (has_randomize_gpu()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->randomize_gpu(), output);
  }

  // optional int32 random_access_chunk_size = 8 [default = 1];
  if (has_random_access_chunk_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->random_access_chunk_size(), output);
  }

  // optional int32 max_dataset_size = 9 [default = 0];
  if (has_max_dataset_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->max_dataset_size(), output);
  }

  // optional int32 multiplicity = 10 [default = 1];
  if (has_multiplicity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->multiplicity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:config.DatasetConfig)
}

::google::protobuf::uint8* DatasetConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:config.DatasetConfig)
  // repeated .config.DataStreamConfig data_config = 1;
  for (unsigned int i = 0, n = this->data_config_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->data_config(i), false, target);
  }

  // optional int32 batch_size = 2 [default = 1];
  if (has_batch_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->batch_size(), target);
  }

  // optional int32 chunk_size = 3 [default = 0];
  if (has_chunk_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->chunk_size(), target);
  }

  // optional int32 max_reuse_count = 4 [default = 0];
  if (has_max_reuse_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_reuse_count(), target);
  }

  // optional bool pipeline_loads = 5 [default = false];
  if (has_pipeline_loads()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->pipeline_loads(), target);
  }

  // optional bool randomize_cpu = 6 [default = false];
  if (has_randomize_cpu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->randomize_cpu(), target);
  }

  // optional bool randomize_gpu = 7 [default = false];
  if (has_randomize_gpu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->randomize_gpu(), target);
  }

  // optional int32 random_access_chunk_size = 8 [default = 1];
  if (has_random_access_chunk_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->random_access_chunk_size(), target);
  }

  // optional int32 max_dataset_size = 9 [default = 0];
  if (has_max_dataset_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->max_dataset_size(), target);
  }

  // optional int32 multiplicity = 10 [default = 1];
  if (has_multiplicity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->multiplicity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:config.DatasetConfig)
  return target;
}

size_t DatasetConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:config.DatasetConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // repeated .config.DataStreamConfig data_config = 1;
  {
    unsigned int count = this->data_config_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data_config(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 chunk_size = 3 [default = 0];
    if (has_chunk_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chunk_size());
    }

    // optional int32 max_reuse_count = 4 [default = 0];
    if (has_max_reuse_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_reuse_count());
    }

    // optional bool pipeline_loads = 5 [default = false];
    if (has_pipeline_loads()) {
      total_size += 1 + 1;
    }

    // optional bool randomize_cpu = 6 [default = false];
    if (has_randomize_cpu()) {
      total_size += 1 + 1;
    }

    // optional bool randomize_gpu = 7 [default = false];
    if (has_randomize_gpu()) {
      total_size += 1 + 1;
    }

    // optional int32 max_dataset_size = 9 [default = 0];
    if (has_max_dataset_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_dataset_size());
    }

    // optional int32 multiplicity = 10 [default = 1];
    if (has_multiplicity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->multiplicity());
    }

    // optional int32 batch_size = 2 [default = 1];
    if (has_batch_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->batch_size());
    }

  }
  // optional int32 random_access_chunk_size = 8 [default = 1];
  if (has_random_access_chunk_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->random_access_chunk_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DatasetConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:config.DatasetConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DatasetConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DatasetConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:config.DatasetConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:config.DatasetConfig)
    MergeFrom(*source);
  }
}

void DatasetConfig::MergeFrom(const DatasetConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:config.DatasetConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_config_.MergeFrom(from.data_config_);
  if (from._has_bits_[0 / 32] & 255u) {
    if (from.has_chunk_size()) {
      set_chunk_size(from.chunk_size());
    }
    if (from.has_max_reuse_count()) {
      set_max_reuse_count(from.max_reuse_count());
    }
    if (from.has_pipeline_loads()) {
      set_pipeline_loads(from.pipeline_loads());
    }
    if (from.has_randomize_cpu()) {
      set_randomize_cpu(from.randomize_cpu());
    }
    if (from.has_randomize_gpu()) {
      set_randomize_gpu(from.randomize_gpu());
    }
    if (from.has_max_dataset_size()) {
      set_max_dataset_size(from.max_dataset_size());
    }
    if (from.has_multiplicity()) {
      set_multiplicity(from.multiplicity());
    }
    if (from.has_batch_size()) {
      set_batch_size(from.batch_size());
    }
  }
  if (from.has_random_access_chunk_size()) {
    set_random_access_chunk_size(from.random_access_chunk_size());
  }
}

void DatasetConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:config.DatasetConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatasetConfig::CopyFrom(const DatasetConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:config.DatasetConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatasetConfig::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->data_config())) return false;
  return true;
}

void DatasetConfig::Swap(DatasetConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DatasetConfig::InternalSwap(DatasetConfig* other) {
  data_config_.UnsafeArenaSwap(&other->data_config_);
  std::swap(chunk_size_, other->chunk_size_);
  std::swap(max_reuse_count_, other->max_reuse_count_);
  std::swap(pipeline_loads_, other->pipeline_loads_);
  std::swap(randomize_cpu_, other->randomize_cpu_);
  std::swap(randomize_gpu_, other->randomize_gpu_);
  std::swap(max_dataset_size_, other->max_dataset_size_);
  std::swap(multiplicity_, other->multiplicity_);
  std::swap(batch_size_, other->batch_size_);
  std::swap(random_access_chunk_size_, other->random_access_chunk_size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DatasetConfig::GetMetadata() const {
  protobuf_convnet_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_convnet_5fconfig_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DatasetConfig

// repeated .config.DataStreamConfig data_config = 1;
int DatasetConfig::data_config_size() const {
  return data_config_.size();
}
void DatasetConfig::clear_data_config() {
  data_config_.Clear();
}
const ::config::DataStreamConfig& DatasetConfig::data_config(int index) const {
  // @@protoc_insertion_point(field_get:config.DatasetConfig.data_config)
  return data_config_.Get(index);
}
::config::DataStreamConfig* DatasetConfig::mutable_data_config(int index) {
  // @@protoc_insertion_point(field_mutable:config.DatasetConfig.data_config)
  return data_config_.Mutable(index);
}
::config::DataStreamConfig* DatasetConfig::add_data_config() {
  // @@protoc_insertion_point(field_add:config.DatasetConfig.data_config)
  return data_config_.Add();
}
::google::protobuf::RepeatedPtrField< ::config::DataStreamConfig >*
DatasetConfig::mutable_data_config() {
  // @@protoc_insertion_point(field_mutable_list:config.DatasetConfig.data_config)
  return &data_config_;
}
const ::google::protobuf::RepeatedPtrField< ::config::DataStreamConfig >&
DatasetConfig::data_config() const {
  // @@protoc_insertion_point(field_list:config.DatasetConfig.data_config)
  return data_config_;
}

// optional int32 batch_size = 2 [default = 1];
bool DatasetConfig::has_batch_size() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DatasetConfig::set_has_batch_size() {
  _has_bits_[0] |= 0x00000080u;
}
void DatasetConfig::clear_has_batch_size() {
  _has_bits_[0] &= ~0x00000080u;
}
void DatasetConfig::clear_batch_size() {
  batch_size_ = 1;
  clear_has_batch_size();
}
::google::protobuf::int32 DatasetConfig::batch_size() const {
  // @@protoc_insertion_point(field_get:config.DatasetConfig.batch_size)
  return batch_size_;
}
void DatasetConfig::set_batch_size(::google::protobuf::int32 value) {
  set_has_batch_size();
  batch_size_ = value;
  // @@protoc_insertion_point(field_set:config.DatasetConfig.batch_size)
}

// optional int32 chunk_size = 3 [default = 0];
bool DatasetConfig::has_chunk_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DatasetConfig::set_has_chunk_size() {
  _has_bits_[0] |= 0x00000001u;
}
void DatasetConfig::clear_has_chunk_size() {
  _has_bits_[0] &= ~0x00000001u;
}
void DatasetConfig::clear_chunk_size() {
  chunk_size_ = 0;
  clear_has_chunk_size();
}
::google::protobuf::int32 DatasetConfig::chunk_size() const {
  // @@protoc_insertion_point(field_get:config.DatasetConfig.chunk_size)
  return chunk_size_;
}
void DatasetConfig::set_chunk_size(::google::protobuf::int32 value) {
  set_has_chunk_size();
  chunk_size_ = value;
  // @@protoc_insertion_point(field_set:config.DatasetConfig.chunk_size)
}

// optional int32 max_reuse_count = 4 [default = 0];
bool DatasetConfig::has_max_reuse_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DatasetConfig::set_has_max_reuse_count() {
  _has_bits_[0] |= 0x00000002u;
}
void DatasetConfig::clear_has_max_reuse_count() {
  _has_bits_[0] &= ~0x00000002u;
}
void DatasetConfig::clear_max_reuse_count() {
  max_reuse_count_ = 0;
  clear_has_max_reuse_count();
}
::google::protobuf::int32 DatasetConfig::max_reuse_count() const {
  // @@protoc_insertion_point(field_get:config.DatasetConfig.max_reuse_count)
  return max_reuse_count_;
}
void DatasetConfig::set_max_reuse_count(::google::protobuf::int32 value) {
  set_has_max_reuse_count();
  max_reuse_count_ = value;
  // @@protoc_insertion_point(field_set:config.DatasetConfig.max_reuse_count)
}

// optional bool pipeline_loads = 5 [default = false];
bool DatasetConfig::has_pipeline_loads() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DatasetConfig::set_has_pipeline_loads() {
  _has_bits_[0] |= 0x00000004u;
}
void DatasetConfig::clear_has_pipeline_loads() {
  _has_bits_[0] &= ~0x00000004u;
}
void DatasetConfig::clear_pipeline_loads() {
  pipeline_loads_ = false;
  clear_has_pipeline_loads();
}
bool DatasetConfig::pipeline_loads() const {
  // @@protoc_insertion_point(field_get:config.DatasetConfig.pipeline_loads)
  return pipeline_loads_;
}
void DatasetConfig::set_pipeline_loads(bool value) {
  set_has_pipeline_loads();
  pipeline_loads_ = value;
  // @@protoc_insertion_point(field_set:config.DatasetConfig.pipeline_loads)
}

// optional bool randomize_cpu = 6 [default = false];
bool DatasetConfig::has_randomize_cpu() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DatasetConfig::set_has_randomize_cpu() {
  _has_bits_[0] |= 0x00000008u;
}
void DatasetConfig::clear_has_randomize_cpu() {
  _has_bits_[0] &= ~0x00000008u;
}
void DatasetConfig::clear_randomize_cpu() {
  randomize_cpu_ = false;
  clear_has_randomize_cpu();
}
bool DatasetConfig::randomize_cpu() const {
  // @@protoc_insertion_point(field_get:config.DatasetConfig.randomize_cpu)
  return randomize_cpu_;
}
void DatasetConfig::set_randomize_cpu(bool value) {
  set_has_randomize_cpu();
  randomize_cpu_ = value;
  // @@protoc_insertion_point(field_set:config.DatasetConfig.randomize_cpu)
}

// optional bool randomize_gpu = 7 [default = false];
bool DatasetConfig::has_randomize_gpu() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DatasetConfig::set_has_randomize_gpu() {
  _has_bits_[0] |= 0x00000010u;
}
void DatasetConfig::clear_has_randomize_gpu() {
  _has_bits_[0] &= ~0x00000010u;
}
void DatasetConfig::clear_randomize_gpu() {
  randomize_gpu_ = false;
  clear_has_randomize_gpu();
}
bool DatasetConfig::randomize_gpu() const {
  // @@protoc_insertion_point(field_get:config.DatasetConfig.randomize_gpu)
  return randomize_gpu_;
}
void DatasetConfig::set_randomize_gpu(bool value) {
  set_has_randomize_gpu();
  randomize_gpu_ = value;
  // @@protoc_insertion_point(field_set:config.DatasetConfig.randomize_gpu)
}

// optional int32 random_access_chunk_size = 8 [default = 1];
bool DatasetConfig::has_random_access_chunk_size() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void DatasetConfig::set_has_random_access_chunk_size() {
  _has_bits_[0] |= 0x00000100u;
}
void DatasetConfig::clear_has_random_access_chunk_size() {
  _has_bits_[0] &= ~0x00000100u;
}
void DatasetConfig::clear_random_access_chunk_size() {
  random_access_chunk_size_ = 1;
  clear_has_random_access_chunk_size();
}
::google::protobuf::int32 DatasetConfig::random_access_chunk_size() const {
  // @@protoc_insertion_point(field_get:config.DatasetConfig.random_access_chunk_size)
  return random_access_chunk_size_;
}
void DatasetConfig::set_random_access_chunk_size(::google::protobuf::int32 value) {
  set_has_random_access_chunk_size();
  random_access_chunk_size_ = value;
  // @@protoc_insertion_point(field_set:config.DatasetConfig.random_access_chunk_size)
}

// optional int32 max_dataset_size = 9 [default = 0];
bool DatasetConfig::has_max_dataset_size() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DatasetConfig::set_has_max_dataset_size() {
  _has_bits_[0] |= 0x00000020u;
}
void DatasetConfig::clear_has_max_dataset_size() {
  _has_bits_[0] &= ~0x00000020u;
}
void DatasetConfig::clear_max_dataset_size() {
  max_dataset_size_ = 0;
  clear_has_max_dataset_size();
}
::google::protobuf::int32 DatasetConfig::max_dataset_size() const {
  // @@protoc_insertion_point(field_get:config.DatasetConfig.max_dataset_size)
  return max_dataset_size_;
}
void DatasetConfig::set_max_dataset_size(::google::protobuf::int32 value) {
  set_has_max_dataset_size();
  max_dataset_size_ = value;
  // @@protoc_insertion_point(field_set:config.DatasetConfig.max_dataset_size)
}

// optional int32 multiplicity = 10 [default = 1];
bool DatasetConfig::has_multiplicity() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DatasetConfig::set_has_multiplicity() {
  _has_bits_[0] |= 0x00000040u;
}
void DatasetConfig::clear_has_multiplicity() {
  _has_bits_[0] &= ~0x00000040u;
}
void DatasetConfig::clear_multiplicity() {
  multiplicity_ = 1;
  clear_has_multiplicity();
}
::google::protobuf::int32 DatasetConfig::multiplicity() const {
  // @@protoc_insertion_point(field_get:config.DatasetConfig.multiplicity)
  return multiplicity_;
}
void DatasetConfig::set_multiplicity(::google::protobuf::int32 value) {
  set_has_multiplicity();
  multiplicity_ = value;
  // @@protoc_insertion_point(field_set:config.DatasetConfig.multiplicity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FeatureStreamConfig::kLayerFieldNumber;
const int FeatureStreamConfig::kAverageBatchesFieldNumber;
const int FeatureStreamConfig::kAverageOnlineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FeatureStreamConfig::FeatureStreamConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_convnet_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:config.FeatureStreamConfig)
}
FeatureStreamConfig::FeatureStreamConfig(const FeatureStreamConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  layer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_layer()) {
    layer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.layer_);
  }
  ::memcpy(&average_batches_, &from.average_batches_,
    reinterpret_cast<char*>(&average_online_) -
    reinterpret_cast<char*>(&average_batches_) + sizeof(average_online_));
  // @@protoc_insertion_point(copy_constructor:config.FeatureStreamConfig)
}

void FeatureStreamConfig::SharedCtor() {
  _cached_size_ = 0;
  layer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  average_batches_ = 1;
  average_online_ = 1;
}

FeatureStreamConfig::~FeatureStreamConfig() {
  // @@protoc_insertion_point(destructor:config.FeatureStreamConfig)
  SharedDtor();
}

void FeatureStreamConfig::SharedDtor() {
  layer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FeatureStreamConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeatureStreamConfig::descriptor() {
  protobuf_convnet_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_convnet_5fconfig_2eproto::file_level_metadata[8].descriptor;
}

const FeatureStreamConfig& FeatureStreamConfig::default_instance() {
  protobuf_convnet_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

FeatureStreamConfig* FeatureStreamConfig::New(::google::protobuf::Arena* arena) const {
  FeatureStreamConfig* n = new FeatureStreamConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FeatureStreamConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:config.FeatureStreamConfig)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_layer()) {
      GOOGLE_DCHECK(!layer_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*layer_.UnsafeRawStringPointer())->clear();
    }
    average_batches_ = 1;
    average_online_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FeatureStreamConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:config.FeatureStreamConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string layer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_layer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->layer().data(), this->layer().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "config.FeatureStreamConfig.layer");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 average_batches = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_average_batches();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &average_batches_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 average_online = 3 [default = 1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_average_online();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &average_online_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:config.FeatureStreamConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:config.FeatureStreamConfig)
  return false;
#undef DO_
}

void FeatureStreamConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:config.FeatureStreamConfig)
  // required string layer = 1;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->layer().data(), this->layer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.FeatureStreamConfig.layer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->layer(), output);
  }

  // optional int32 average_batches = 2 [default = 1];
  if (has_average_batches()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->average_batches(), output);
  }

  // optional int32 average_online = 3 [default = 1];
  if (has_average_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->average_online(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:config.FeatureStreamConfig)
}

::google::protobuf::uint8* FeatureStreamConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:config.FeatureStreamConfig)
  // required string layer = 1;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->layer().data(), this->layer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.FeatureStreamConfig.layer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->layer(), target);
  }

  // optional int32 average_batches = 2 [default = 1];
  if (has_average_batches()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->average_batches(), target);
  }

  // optional int32 average_online = 3 [default = 1];
  if (has_average_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->average_online(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:config.FeatureStreamConfig)
  return target;
}

size_t FeatureStreamConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:config.FeatureStreamConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required string layer = 1;
  if (has_layer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->layer());
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional int32 average_batches = 2 [default = 1];
    if (has_average_batches()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->average_batches());
    }

    // optional int32 average_online = 3 [default = 1];
    if (has_average_online()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->average_online());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeatureStreamConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:config.FeatureStreamConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const FeatureStreamConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FeatureStreamConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:config.FeatureStreamConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:config.FeatureStreamConfig)
    MergeFrom(*source);
  }
}

void FeatureStreamConfig::MergeFrom(const FeatureStreamConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:config.FeatureStreamConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_layer()) {
      set_has_layer();
      layer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.layer_);
    }
    if (from.has_average_batches()) {
      set_average_batches(from.average_batches());
    }
    if (from.has_average_online()) {
      set_average_online(from.average_online());
    }
  }
}

void FeatureStreamConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:config.FeatureStreamConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureStreamConfig::CopyFrom(const FeatureStreamConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:config.FeatureStreamConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureStreamConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void FeatureStreamConfig::Swap(FeatureStreamConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FeatureStreamConfig::InternalSwap(FeatureStreamConfig* other) {
  layer_.Swap(&other->layer_);
  std::swap(average_batches_, other->average_batches_);
  std::swap(average_online_, other->average_online_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FeatureStreamConfig::GetMetadata() const {
  protobuf_convnet_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_convnet_5fconfig_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FeatureStreamConfig

// required string layer = 1;
bool FeatureStreamConfig::has_layer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FeatureStreamConfig::set_has_layer() {
  _has_bits_[0] |= 0x00000001u;
}
void FeatureStreamConfig::clear_has_layer() {
  _has_bits_[0] &= ~0x00000001u;
}
void FeatureStreamConfig::clear_layer() {
  layer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_layer();
}
const ::std::string& FeatureStreamConfig::layer() const {
  // @@protoc_insertion_point(field_get:config.FeatureStreamConfig.layer)
  return layer_.GetNoArena();
}
void FeatureStreamConfig::set_layer(const ::std::string& value) {
  set_has_layer();
  layer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.FeatureStreamConfig.layer)
}
#if LANG_CXX11
void FeatureStreamConfig::set_layer(::std::string&& value) {
  set_has_layer();
  layer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.FeatureStreamConfig.layer)
}
#endif
void FeatureStreamConfig::set_layer(const char* value) {
  set_has_layer();
  layer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.FeatureStreamConfig.layer)
}
void FeatureStreamConfig::set_layer(const char* value, size_t size) {
  set_has_layer();
  layer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.FeatureStreamConfig.layer)
}
::std::string* FeatureStreamConfig::mutable_layer() {
  set_has_layer();
  // @@protoc_insertion_point(field_mutable:config.FeatureStreamConfig.layer)
  return layer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FeatureStreamConfig::release_layer() {
  // @@protoc_insertion_point(field_release:config.FeatureStreamConfig.layer)
  clear_has_layer();
  return layer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FeatureStreamConfig::set_allocated_layer(::std::string* layer) {
  if (layer != NULL) {
    set_has_layer();
  } else {
    clear_has_layer();
  }
  layer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), layer);
  // @@protoc_insertion_point(field_set_allocated:config.FeatureStreamConfig.layer)
}

// optional int32 average_batches = 2 [default = 1];
bool FeatureStreamConfig::has_average_batches() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FeatureStreamConfig::set_has_average_batches() {
  _has_bits_[0] |= 0x00000002u;
}
void FeatureStreamConfig::clear_has_average_batches() {
  _has_bits_[0] &= ~0x00000002u;
}
void FeatureStreamConfig::clear_average_batches() {
  average_batches_ = 1;
  clear_has_average_batches();
}
::google::protobuf::int32 FeatureStreamConfig::average_batches() const {
  // @@protoc_insertion_point(field_get:config.FeatureStreamConfig.average_batches)
  return average_batches_;
}
void FeatureStreamConfig::set_average_batches(::google::protobuf::int32 value) {
  set_has_average_batches();
  average_batches_ = value;
  // @@protoc_insertion_point(field_set:config.FeatureStreamConfig.average_batches)
}

// optional int32 average_online = 3 [default = 1];
bool FeatureStreamConfig::has_average_online() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FeatureStreamConfig::set_has_average_online() {
  _has_bits_[0] |= 0x00000004u;
}
void FeatureStreamConfig::clear_has_average_online() {
  _has_bits_[0] &= ~0x00000004u;
}
void FeatureStreamConfig::clear_average_online() {
  average_online_ = 1;
  clear_has_average_online();
}
::google::protobuf::int32 FeatureStreamConfig::average_online() const {
  // @@protoc_insertion_point(field_get:config.FeatureStreamConfig.average_online)
  return average_online_;
}
void FeatureStreamConfig::set_average_online(::google::protobuf::int32 value) {
  set_has_average_online();
  average_online_ = value;
  // @@protoc_insertion_point(field_set:config.FeatureStreamConfig.average_online)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FeatureExtractorConfig::kOutputFileFieldNumber;
const int FeatureExtractorConfig::kFeatureFieldNumber;
const int FeatureExtractorConfig::kInputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FeatureExtractorConfig::FeatureExtractorConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_convnet_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:config.FeatureExtractorConfig)
}
FeatureExtractorConfig::FeatureExtractorConfig(const FeatureExtractorConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      feature_(from.feature_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  output_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_output_file()) {
    output_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_file_);
  }
  if (from.has_input()) {
    input_ = new ::config::DatasetConfig(*from.input_);
  } else {
    input_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:config.FeatureExtractorConfig)
}

void FeatureExtractorConfig::SharedCtor() {
  _cached_size_ = 0;
  output_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_ = NULL;
}

FeatureExtractorConfig::~FeatureExtractorConfig() {
  // @@protoc_insertion_point(destructor:config.FeatureExtractorConfig)
  SharedDtor();
}

void FeatureExtractorConfig::SharedDtor() {
  output_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete input_;
  }
}

void FeatureExtractorConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FeatureExtractorConfig::descriptor() {
  protobuf_convnet_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_convnet_5fconfig_2eproto::file_level_metadata[9].descriptor;
}

const FeatureExtractorConfig& FeatureExtractorConfig::default_instance() {
  protobuf_convnet_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

FeatureExtractorConfig* FeatureExtractorConfig::New(::google::protobuf::Arena* arena) const {
  FeatureExtractorConfig* n = new FeatureExtractorConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FeatureExtractorConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:config.FeatureExtractorConfig)
  feature_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_output_file()) {
      GOOGLE_DCHECK(!output_file_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*output_file_.UnsafeRawStringPointer())->clear();
    }
    if (has_input()) {
      GOOGLE_DCHECK(input_ != NULL);
      input_->::config::DatasetConfig::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FeatureExtractorConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:config.FeatureExtractorConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string output_file = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->output_file().data(), this->output_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "config.FeatureExtractorConfig.output_file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .config.FeatureStreamConfig feature = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_feature()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // required .config.DatasetConfig input = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_input()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:config.FeatureExtractorConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:config.FeatureExtractorConfig)
  return false;
#undef DO_
}

void FeatureExtractorConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:config.FeatureExtractorConfig)
  // required string output_file = 1;
  if (has_output_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->output_file().data(), this->output_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.FeatureExtractorConfig.output_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->output_file(), output);
  }

  // repeated .config.FeatureStreamConfig feature = 2;
  for (unsigned int i = 0, n = this->feature_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->feature(i), output);
  }

  // required .config.DatasetConfig input = 3;
  if (has_input()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->input_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:config.FeatureExtractorConfig)
}

::google::protobuf::uint8* FeatureExtractorConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:config.FeatureExtractorConfig)
  // required string output_file = 1;
  if (has_output_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->output_file().data(), this->output_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "config.FeatureExtractorConfig.output_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->output_file(), target);
  }

  // repeated .config.FeatureStreamConfig feature = 2;
  for (unsigned int i = 0, n = this->feature_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->feature(i), false, target);
  }

  // required .config.DatasetConfig input = 3;
  if (has_input()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->input_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:config.FeatureExtractorConfig)
  return target;
}

size_t FeatureExtractorConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:config.FeatureExtractorConfig)
  size_t total_size = 0;

  if (has_output_file()) {
    // required string output_file = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->output_file());
  }

  if (has_input()) {
    // required .config.DatasetConfig input = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->input_);
  }

  return total_size;
}
size_t FeatureExtractorConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:config.FeatureExtractorConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string output_file = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->output_file());

    // required .config.DatasetConfig input = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->input_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .config.FeatureStreamConfig feature = 2;
  {
    unsigned int count = this->feature_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->feature(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeatureExtractorConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:config.FeatureExtractorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const FeatureExtractorConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FeatureExtractorConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:config.FeatureExtractorConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:config.FeatureExtractorConfig)
    MergeFrom(*source);
  }
}

void FeatureExtractorConfig::MergeFrom(const FeatureExtractorConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:config.FeatureExtractorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  feature_.MergeFrom(from.feature_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_output_file()) {
      set_has_output_file();
      output_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_file_);
    }
    if (from.has_input()) {
      mutable_input()->::config::DatasetConfig::MergeFrom(from.input());
    }
  }
}

void FeatureExtractorConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:config.FeatureExtractorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FeatureExtractorConfig::CopyFrom(const FeatureExtractorConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:config.FeatureExtractorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureExtractorConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->feature())) return false;
  if (has_input()) {
    if (!this->input_->IsInitialized()) return false;
  }
  return true;
}

void FeatureExtractorConfig::Swap(FeatureExtractorConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FeatureExtractorConfig::InternalSwap(FeatureExtractorConfig* other) {
  feature_.UnsafeArenaSwap(&other->feature_);
  output_file_.Swap(&other->output_file_);
  std::swap(input_, other->input_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FeatureExtractorConfig::GetMetadata() const {
  protobuf_convnet_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_convnet_5fconfig_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FeatureExtractorConfig

// required string output_file = 1;
bool FeatureExtractorConfig::has_output_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FeatureExtractorConfig::set_has_output_file() {
  _has_bits_[0] |= 0x00000001u;
}
void FeatureExtractorConfig::clear_has_output_file() {
  _has_bits_[0] &= ~0x00000001u;
}
void FeatureExtractorConfig::clear_output_file() {
  output_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_output_file();
}
const ::std::string& FeatureExtractorConfig::output_file() const {
  // @@protoc_insertion_point(field_get:config.FeatureExtractorConfig.output_file)
  return output_file_.GetNoArena();
}
void FeatureExtractorConfig::set_output_file(const ::std::string& value) {
  set_has_output_file();
  output_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:config.FeatureExtractorConfig.output_file)
}
#if LANG_CXX11
void FeatureExtractorConfig::set_output_file(::std::string&& value) {
  set_has_output_file();
  output_file_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:config.FeatureExtractorConfig.output_file)
}
#endif
void FeatureExtractorConfig::set_output_file(const char* value) {
  set_has_output_file();
  output_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:config.FeatureExtractorConfig.output_file)
}
void FeatureExtractorConfig::set_output_file(const char* value, size_t size) {
  set_has_output_file();
  output_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:config.FeatureExtractorConfig.output_file)
}
::std::string* FeatureExtractorConfig::mutable_output_file() {
  set_has_output_file();
  // @@protoc_insertion_point(field_mutable:config.FeatureExtractorConfig.output_file)
  return output_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FeatureExtractorConfig::release_output_file() {
  // @@protoc_insertion_point(field_release:config.FeatureExtractorConfig.output_file)
  clear_has_output_file();
  return output_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FeatureExtractorConfig::set_allocated_output_file(::std::string* output_file) {
  if (output_file != NULL) {
    set_has_output_file();
  } else {
    clear_has_output_file();
  }
  output_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_file);
  // @@protoc_insertion_point(field_set_allocated:config.FeatureExtractorConfig.output_file)
}

// repeated .config.FeatureStreamConfig feature = 2;
int FeatureExtractorConfig::feature_size() const {
  return feature_.size();
}
void FeatureExtractorConfig::clear_feature() {
  feature_.Clear();
}
const ::config::FeatureStreamConfig& FeatureExtractorConfig::feature(int index) const {
  // @@protoc_insertion_point(field_get:config.FeatureExtractorConfig.feature)
  return feature_.Get(index);
}
::config::FeatureStreamConfig* FeatureExtractorConfig::mutable_feature(int index) {
  // @@protoc_insertion_point(field_mutable:config.FeatureExtractorConfig.feature)
  return feature_.Mutable(index);
}
::config::FeatureStreamConfig* FeatureExtractorConfig::add_feature() {
  // @@protoc_insertion_point(field_add:config.FeatureExtractorConfig.feature)
  return feature_.Add();
}
::google::protobuf::RepeatedPtrField< ::config::FeatureStreamConfig >*
FeatureExtractorConfig::mutable_feature() {
  // @@protoc_insertion_point(field_mutable_list:config.FeatureExtractorConfig.feature)
  return &feature_;
}
const ::google::protobuf::RepeatedPtrField< ::config::FeatureStreamConfig >&
FeatureExtractorConfig::feature() const {
  // @@protoc_insertion_point(field_list:config.FeatureExtractorConfig.feature)
  return feature_;
}

// required .config.DatasetConfig input = 3;
bool FeatureExtractorConfig::has_input() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FeatureExtractorConfig::set_has_input() {
  _has_bits_[0] |= 0x00000002u;
}
void FeatureExtractorConfig::clear_has_input() {
  _has_bits_[0] &= ~0x00000002u;
}
void FeatureExtractorConfig::clear_input() {
  if (input_ != NULL) input_->::config::DatasetConfig::Clear();
  clear_has_input();
}
const ::config::DatasetConfig& FeatureExtractorConfig::input() const {
  // @@protoc_insertion_point(field_get:config.FeatureExtractorConfig.input)
  return input_ != NULL ? *input_
                         : *::config::DatasetConfig::internal_default_instance();
}
::config::DatasetConfig* FeatureExtractorConfig::mutable_input() {
  set_has_input();
  if (input_ == NULL) {
    input_ = new ::config::DatasetConfig;
  }
  // @@protoc_insertion_point(field_mutable:config.FeatureExtractorConfig.input)
  return input_;
}
::config::DatasetConfig* FeatureExtractorConfig::release_input() {
  // @@protoc_insertion_point(field_release:config.FeatureExtractorConfig.input)
  clear_has_input();
  ::config::DatasetConfig* temp = input_;
  input_ = NULL;
  return temp;
}
void FeatureExtractorConfig::set_allocated_input(::config::DatasetConfig* input) {
  delete input_;
  input_ = input;
  if (input) {
    set_has_input();
  } else {
    clear_has_input();
  }
  // @@protoc_insertion_point(field_set_allocated:config.FeatureExtractorConfig.input)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace config

// @@protoc_insertion_point(global_scope)
